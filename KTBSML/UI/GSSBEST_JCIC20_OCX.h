// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision: 1.2 $
// File generated on 2006/4/21 ¤U¤È 03:10:01 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\COMPlus Applications\{E06140ED-9BAE-471F-AED7-296A85D4FF35}\GSSBEST_JCIC20_0021.dll (1)
// LIBID: {204ABBEC-7889-45DA-8C07-454411784EBF}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\System32\stdole2.tlb)
//   (2) v1.0 COMSVCSLib, (C:\WINDOWS\System32\COMSVCS.DLL)
// ************************************************************************ //
#ifndef   GSSBEST_JCIC20_OCXH
#define   GSSBEST_JCIC20_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "GSSBEST_JCIC20_TLB.h"
namespace Gssbest_jcic20_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMQ400
// Help String      : 
// Default Interface: _MQ400
// Def. Intf. Object: _MQ400Ptr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TMQ400 : public Oleserver::TOleServer
{
  _MQ400Ptr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TMQ400(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  _MQ400Ptr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(_MQ400Ptr intf);


  void __fastcall set_SaveMQFlag(VARIANT_BOOL Param1/*[in]*/)
  {
    GetDefaultInterface()->set_SaveMQFlag(Param1/*[in]*/);
  }

  void __fastcall set_SaveMQFilePath(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_SaveMQFilePath(Param1/*[in]*/);
  }

  TVariant __fastcall get_Serialize(void)
  {
    return GetDefaultInterface()->get_Serialize();
  }

  void __fastcall set_Serialize(VARIANT Param1/*[in]*/)
  {
    GetDefaultInterface()->set_Serialize(Param1/*[in]*/);
  }

  void __fastcall set_InfoNumber(long Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoNumber(Param1/*[in]*/);
  }

  long __fastcall get_InfoNumber(void)
  {
    return GetDefaultInterface()->get_InfoNumber();
  }

  void __fastcall set_InfoMessage(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoMessage(Param1/*[in]*/);
  }

  BSTR __fastcall get_InfoMessage(void)
  {
    return GetDefaultInterface()->get_InfoMessage();
  }

  BSTR __fastcall get_ProgID(void)
  {
    return GetDefaultInterface()->get_ProgID();
  }

  BSTR __fastcall QueryTriger(void)
  {
    return GetDefaultInterface()->QueryTriger();
  }

  BSTR __fastcall ToString(void)
  {
    return GetDefaultInterface()->ToString();
  }

  BSTR __fastcall mXML_PATH(void)
  {
    return GetDefaultInterface()->mXML_PATH();
  }

  __property TOLEBOOL SaveMQFlag={ };
  __property BSTR SaveMQFilePath={ };
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Serialize={ read=get_Serialize };
  */
  __property BSTR ProgID={ read=get_ProgID };
  __property long InfoNumber={ read=get_InfoNumber, stored=false };
  __property BSTR InfoMessage={ read=get_InfoMessage, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TENGINE
// Help String      : 
// Default Interface: _ENGINE
// Def. Intf. Object: _ENGINEPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TENGINE : public Oleserver::TOleServer
{
  _ENGINEPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TENGINE(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  _ENGINEPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(_ENGINEPtr intf);


  void __fastcall set_AP_ID(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_AP_ID(Param1/*[in]*/);
  }

  void __fastcall set_ConStrName(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_ConStrName(Param1/*[in]*/);
  }

  void __fastcall set_Batch_ID(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_Batch_ID(Param1/*[in]*/);
  }

  BSTR __fastcall get_QSEQNO(void)
  {
    return GetDefaultInterface()->get_QSEQNO();
  }

  BSTR __fastcall get_QItem(void)
  {
    return GetDefaultInterface()->get_QItem();
  }

  void __fastcall set_JC_BankId(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_JC_BankId(Param1/*[in]*/);
  }

  BSTR __fastcall get_JC_BankId(void)
  {
    return GetDefaultInterface()->get_JC_BankId();
  }

  void __fastcall set_JC_BranchId(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_JC_BranchId(Param1/*[in]*/);
  }

  BSTR __fastcall get_JC_BranchId(void)
  {
    return GetDefaultInterface()->get_JC_BranchId();
  }

  void __fastcall set_JC_UserId(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_JC_UserId(Param1/*[in]*/);
  }

  BSTR __fastcall get_JC_UserId(void)
  {
    return GetDefaultInterface()->get_JC_UserId();
  }

  BSTR __fastcall get_QueryResult(void)
  {
    return GetDefaultInterface()->get_QueryResult();
  }

  BSTR __fastcall get_QueryStatus(void)
  {
    return GetDefaultInterface()->get_QueryStatus();
  }

  TOLEBOOL __fastcall get_IsNewQuery(void)
  {
    return GetDefaultInterface()->get_IsNewQuery();
  }

  TVariant __fastcall get_JC_ReturnCode(void)
  {
    return GetDefaultInterface()->get_JC_ReturnCode();
  }

  TVariant __fastcall get_Error_Message(void)
  {
    return GetDefaultInterface()->get_Error_Message();
  }

  TVariant __fastcall get_Error_Number(void)
  {
    return GetDefaultInterface()->get_Error_Number();
  }

  void __fastcall set_SaveMQFlag(VARIANT_BOOL Param1/*[in]*/)
  {
    GetDefaultInterface()->set_SaveMQFlag(Param1/*[in]*/);
  }

  void __fastcall set_SaveMQFilePath(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_SaveMQFilePath(Param1/*[in]*/);
  }

  TVariant __fastcall get_Serialize(void)
  {
    return GetDefaultInterface()->get_Serialize();
  }

  void __fastcall set_Serialize(VARIANT Param1/*[in]*/)
  {
    GetDefaultInterface()->set_Serialize(Param1/*[in]*/);
  }

  void __fastcall set_InfoNumber(long Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoNumber(Param1/*[in]*/);
  }

  long __fastcall get_InfoNumber(void)
  {
    return GetDefaultInterface()->get_InfoNumber();
  }

  void __fastcall set_InfoMessage(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoMessage(Param1/*[in]*/);
  }

  BSTR __fastcall get_InfoMessage(void)
  {
    return GetDefaultInterface()->get_InfoMessage();
  }

  BSTR __fastcall get_ProgID(void)
  {
    return GetDefaultInterface()->get_ProgID();
  }

  void __fastcall SetTextReportType(short* intType/*[in,out]*/)
  {
    GetDefaultInterface()->SetTextReportType(intType/*[in,out]*/);
  }

  void __fastcall setQryRecord(BSTR* strPntType/*[in,out]*/)
  {
    GetDefaultInterface()->setQryRecord(strPntType/*[in,out]*/);
  }

  TVariant __fastcall PutRequest(BSTR strQItemName/*[in]*/, BSTR strPar/*[in]*/, 
                                 BSTR strBRCH/*[in]*/, BSTR strUID/*[in]*/, 
                                 BSTR strStyle/*[in,def,opt]*/, BSTR strAS400_FLAG/*[in,def,opt]*/, 
                                 BSTR strQryReason/*[in,def,opt]*/, 
                                 BSTR strCheckID_Flag/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->PutRequest(strQItemName/*[in]*/, strPar/*[in]*/, strBRCH/*[in]*/, 
                                             strUID/*[in]*/, strStyle/*[in,def,opt]*/, 
                                             strAS400_FLAG/*[in,def,opt]*/, 
                                             strQryReason/*[in,def,opt]*/, 
                                             strCheckID_Flag/*[in,def,opt]*/);
  }

  TVariant __fastcall ResendMsg(BSTR strQSEQNO/*[in]*/)
  {
    return GetDefaultInterface()->ResendMsg(strQSEQNO/*[in]*/);
  }

  TOLEBOOL __fastcall GetResponse(BSTR strQItemName/*[in]*/, BSTR strQSEQ_NO/*[in]*/)
  {
    return GetDefaultInterface()->GetResponse(strQItemName/*[in]*/, strQSEQ_NO/*[in]*/);
  }

  TOLEBOOL __fastcall ReGetQueryInfo(BSTR strQSEQNO/*[in]*/)
  {
    return GetDefaultInterface()->ReGetQueryInfo(strQSEQNO/*[in]*/);
  }

  TOLEBOOL __fastcall SendToAS400(BSTR strSTAN/*[in,def,opt]*/, BSTR strBRNO/*[in,def,opt]*/, 
                                  BSTR strFSCD/*[in,def,opt]*/, BSTR strJICD/*[in,def,opt]*/, 
                                  BSTR strBKNO/*[in,def,opt]*/, BSTR strYMD/*[in,def,opt]*/, 
                                  BSTR strHMS/*[in,def,opt]*/, BSTR strPARM/*[in,def,opt]*/, 
                                  BSTR strSMSG/*[in,def,opt]*/, BSTR strRetCode/*[in,def,opt]*/, 
                                  BSTR strQMGR/*[in,def,opt]*/, BSTR strAS400_SNDQ/*[in,def,opt]*/, 
                                  VARIANT_BOOL blnSuccess/*[in,def,opt]*/)
  {
    return GetDefaultInterface()->SendToAS400(strSTAN/*[in,def,opt]*/, strBRNO/*[in,def,opt]*/, 
                                              strFSCD/*[in,def,opt]*/, strJICD/*[in,def,opt]*/, 
                                              strBKNO/*[in,def,opt]*/, strYMD/*[in,def,opt]*/, 
                                              strHMS/*[in,def,opt]*/, strPARM/*[in,def,opt]*/, 
                                              strSMSG/*[in,def,opt]*/, strRetCode/*[in,def,opt]*/, 
                                              strQMGR/*[in,def,opt]*/, strAS400_SNDQ/*[in,def,opt]*/, 
                                              blnSuccess/*[in,def,opt]*/);
  }

  TOLEBOOL __fastcall InsterAS400QRY(BSTR strQSEQNO/*[in]*/, BSTR strSTAN/*[in]*/, 
                                     BSTR strUID/*[in]*/, BSTR strBRNO/*[in]*/, BSTR strFSCD/*[in]*/, 
                                     BSTR strJICD/*[in]*/, BSTR strBKNO/*[in]*/, BSTR strYMD/*[in]*/, 
                                     BSTR strHMS/*[in]*/, BSTR strPARM/*[in]*/, BSTR strSMSG/*[in]*/, 
                                     BSTR strRetCode/*[in]*/)
  {
    return GetDefaultInterface()->InsterAS400QRY(strQSEQNO/*[in]*/, strSTAN/*[in]*/, strUID/*[in]*/, 
                                                 strBRNO/*[in]*/, strFSCD/*[in]*/, strJICD/*[in]*/, 
                                                 strBKNO/*[in]*/, strYMD/*[in]*/, strHMS/*[in]*/, 
                                                 strPARM/*[in]*/, strSMSG/*[in]*/, 
                                                 strRetCode/*[in]*/);
  }

  BSTR __fastcall GetTextReport(void)
  {
    return GetDefaultInterface()->GetTextReport();
  }

  BSTR __fastcall mGetBatch_ID(void)
  {
    return GetDefaultInterface()->mGetBatch_ID();
  }

  BSTR __fastcall mXML_PATH(void)
  {
    return GetDefaultInterface()->mXML_PATH();
  }

  TVariant __fastcall mJCIC_BRCH(BSTR strJC_BRCH/*[in]*/)
  {
    return GetDefaultInterface()->mJCIC_BRCH(strJC_BRCH/*[in]*/);
  }

  BSTR __fastcall ToString(void)
  {
    return GetDefaultInterface()->ToString();
  }

  TOLEBOOL __fastcall CheckForigenID(VARIANT strForigenId/*[in]*/)
  {
    return GetDefaultInterface()->CheckForigenID(strForigenId/*[in]*/);
  }

  TOLEBOOL __fastcall MRP_ForigenID(VARIANT strForigenId/*[in]*/)
  {
    return GetDefaultInterface()->MRP_ForigenID(strForigenId/*[in]*/);
  }

  __property BSTR AP_ID={ };
  __property BSTR ConStrName={ };
  __property BSTR Batch_ID={ };
  __property BSTR QSEQNO={ read=get_QSEQNO };
  __property BSTR QItem={ read=get_QItem };
  __property BSTR QueryResult={ read=get_QueryResult };
  __property BSTR QueryStatus={ read=get_QueryStatus };
  __property TOLEBOOL IsNewQuery={ read=get_IsNewQuery };
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant JC_ReturnCode={ read=get_JC_ReturnCode };
  */
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Error_Message={ read=get_Error_Message };
  */
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Error_Number={ read=get_Error_Number };
  */
  __property TOLEBOOL SaveMQFlag={ };
  __property BSTR SaveMQFilePath={ };
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Serialize={ read=get_Serialize };
  */
  __property BSTR ProgID={ read=get_ProgID };
  __property BSTR JC_BankId={ read=get_JC_BankId, stored=false };
  __property BSTR JC_BranchId={ read=get_JC_BranchId, stored=false };
  __property BSTR JC_UserId={ read=get_JC_UserId, stored=false };
  __property long InfoNumber={ read=get_InfoNumber, stored=false };
  __property BSTR InfoMessage={ read=get_InfoMessage, stored=false };
};


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TMQJCIC
// Help String      : 
// Default Interface: _MQJCIC
// Def. Intf. Object: _MQJCICPtr
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
class PACKAGE TMQJCIC : public Oleserver::TOleServer
{
  _MQJCICPtr m_DefaultIntf;
  _di_IUnknown __fastcall GetDunk();
public:
  __fastcall TMQJCIC(TComponent* owner) : Oleserver::TOleServer(owner)
  {}

  _MQJCICPtr& GetDefaultInterface();
  void __fastcall InitServerData();
  void __fastcall Connect();
  void __fastcall Disconnect();
  void __fastcall BeforeDestruction();
  void __fastcall ConnectTo(_MQJCICPtr intf);


  void __fastcall set_AP_ID(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_AP_ID(Param1/*[in]*/);
  }

  BSTR __fastcall get_AP_ID(void)
  {
    return GetDefaultInterface()->get_AP_ID();
  }

  void __fastcall set_ConStrName(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_ConStrName(Param1/*[in]*/);
  }

  BSTR __fastcall get_ConStrName(void)
  {
    return GetDefaultInterface()->get_ConStrName();
  }

  TVariant __fastcall get_ErrorMessage(void)
  {
    return GetDefaultInterface()->get_ErrorMessage();
  }

  TVariant __fastcall get_ErrorNumber(void)
  {
    return GetDefaultInterface()->get_ErrorNumber();
  }

  TVariant __fastcall get_Serialize(void)
  {
    return GetDefaultInterface()->get_Serialize();
  }

  void __fastcall set_Serialize(VARIANT Param1/*[in]*/)
  {
    GetDefaultInterface()->set_Serialize(Param1/*[in]*/);
  }

  void __fastcall set_InfoNumber(long Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoNumber(Param1/*[in]*/);
  }

  long __fastcall get_InfoNumber(void)
  {
    return GetDefaultInterface()->get_InfoNumber();
  }

  void __fastcall set_InfoMessage(BSTR Param1/*[in]*/)
  {
    GetDefaultInterface()->set_InfoMessage(Param1/*[in]*/);
  }

  BSTR __fastcall get_InfoMessage(void)
  {
    return GetDefaultInterface()->get_InfoMessage();
  }

  BSTR __fastcall get_ProgID(void)
  {
    return GetDefaultInterface()->get_ProgID();
  }

  TVariant __fastcall ReturnTriger(void)
  {
    return GetDefaultInterface()->ReturnTriger();
  }

  TOLEBOOL __fastcall mAnalyOthers(BSTR strStyle/*[in]*/, BSTR strQitem/*[in]*/, 
                                   BSTR vstrBranch/*[in]*/, BSTR* vstrSeqID/*[in,out,opt]*/)
  {
    return GetDefaultInterface()->mAnalyOthers(strStyle/*[in]*/, strQitem/*[in]*/, 
                                               vstrBranch/*[in]*/, vstrSeqID/*[in,out,opt]*/);
  }

  BSTR __fastcall SaveTmpFilePath(void)
  {
    return GetDefaultInterface()->SaveTmpFilePath();
  }

  BSTR __fastcall mXML_PATH(void)
  {
    return GetDefaultInterface()->mXML_PATH();
  }

  TOLEBOOL __fastcall mSearchAS400QRY(BSTR* strQSEQNO/*[in,out]*/)
  {
    return GetDefaultInterface()->mSearchAS400QRY(strQSEQNO/*[in,out]*/);
  }

  TOLEBOOL __fastcall PutToAS400(BSTR* strQitem/*[in,out]*/, BSTR* strQSEQNO/*[in,out]*/)
  {
    return GetDefaultInterface()->PutToAS400(strQitem/*[in,out]*/, strQSEQNO/*[in,out]*/);
  }

  BSTR __fastcall ToString(void)
  {
    return GetDefaultInterface()->ToString();
  }

  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant ErrorMessage={ read=get_ErrorMessage };
  */
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant ErrorNumber={ read=get_ErrorNumber };
  */
  /* Warning: C++Builder is unable to validate the following property: 
  __property TVariant Serialize={ read=get_Serialize };
  */
  __property BSTR ProgID={ read=get_ProgID };
  __property BSTR AP_ID={ read=get_AP_ID, stored=false };
  __property BSTR ConStrName={ read=get_ConStrName, stored=false };
  __property long InfoNumber={ read=get_InfoNumber, stored=false };
  __property BSTR InfoMessage={ read=get_InfoMessage, stored=false };
};

};     // namespace Gssbest_jcic20_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Gssbest_jcic20_tlb;
#endif

#pragma option pop

#endif // GSSBEST_JCIC20_OCXH
