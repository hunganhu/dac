#include "npv.h"

ploan::ploan(unsigned int loan_amount, double apr, unsigned int terms,
             unsigned int application_fee)
{
	_loan_amount = loan_amount;
  _terms = terms;
  if(_loan_amount == 0)
    _application_fee = 0;
  else
    _application_fee = application_fee;

  _year_for_pd = ((_terms / 12.0) + 0.5);

  _monthly_rate = apr / 12.0;
  _apr = apr;
  _npv = new double [_terms+4][14];
  _located = true;

  _npv[0][0] = 0;  //interest revenue
  _npv[0][1] = 0;  //principal payment
  _npv[0][2] = _loan_amount;  //remaining principal
  _npv[0][3] = _monthly_rate;  //interest rate
  _npv[0][4] = 1;  //probability of stay; i.e. account attrition
  _npv[0][5] = 0;  //credit loss
  _npv[0][6] = 0;  //pre-collection cost
  _npv[0][8] = 0;  //interest cost
  _npv[0][9] = 0;  //collection cost
  _npv[0][7] = 0;  //net value

  _npv[0][10] = 0; //late fee

  _npv[0][11] = 1; //% of balance remaining; i.e. balance attrition, not used
  _npv[0][12] = 0; //delta working capital
  _npv[0][13] = 0; //operating expense

  for(unsigned int i = 0; i<= _terms+3; ++i)
    _npv[i][3] = _monthly_rate;
};

ploan::~ploan()
{
  if(_located)
    delete[]_npv;
};

void ploan::probability_of_stay()
{
	_npv[0][4] = 1;
  double base31[36] =
  {0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0066970353615938,
   0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0066970353615938, 0.0305810397553517,
   0.0366972477064220, 0.0275229357798165, 0.0275229357798165, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532,
   0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532,
   0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532,
   0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532, 0.0220183486238532};
  double base32[36] =
  {0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0076531503387259,
   0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0076531503387259, 0.0469483568075117,
   0.0563380281690141, 0.0422535211267606, 0.0422535211267606, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084,
   0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084,
   0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084,
   0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084, 0.0338028169014084};

  double base51[60]=
  {0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0050520442137829,
   0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0050520442137829, 0.0206611570247934,
   0.0247933884297521, 0.0185950413223140, 0.0185950413223140, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512,
   0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512, 0.0148760330578512};
  double base52[60] =
  {0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0049858943709634,
   0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0049858943709634, 0.0431034482758621,
   0.0517241379310345, 0.0387931034482759, 0.0387931034482759, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207,
   0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207, 0.0310344827586207};
  double base71[120] =
  {0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.00390897358644327,
   0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.00390897358644327, 0.01922508133688260,
   0.02307009760425910, 0.01730257320319430, 0.01730257320319430, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550,
   0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550, 0.01384205856255550};
  double base72[120] =
  {0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0055139496437332,
   0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0055139496437332, 0.0197368421052632,
   0.0236842105263158, 0.0177631578947368, 0.0177631578947368, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895,
   0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895, 0.0142105263157895};
  double involunatory_attrition, volunatory_attrition;
	for(unsigned int i = 0; i<=_terms+3; ++i){
    if(i==0)
      _npv[i][4] = 1;
    else{
      involunatory_attrition = _npv[i-1][4] * ATTRITION_ADJ * assign_pd(i);
      if(_terms < 48){
        if(_apr > 0.09)
          volunatory_attrition = base32[i-1];
        else
          volunatory_attrition = base31[i-1];
      }
      else if(_terms < 84){
        if(_apr > 0.09)
          volunatory_attrition = base52[i-1];
        else
          volunatory_attrition = base51[i-1];
      }
      else{
        if(_apr > 0.09)
          volunatory_attrition = base72[i-1];
        else
          volunatory_attrition = base71[i-1];
      };
      volunatory_attrition *=  (_npv[i-1][4] * ATTRITION_ADJ);
      if(i <= _terms)
        _npv[i][4] = _npv[i-1][4] - involunatory_attrition - volunatory_attrition;
      else
        _npv[i][4] = _npv[i-1][4];
    };
  };
};

void ploan::interest_cost(unsigned int i)
{
  if(i>0 && i <= _terms)
    _npv[i][8] = LEVERAGE_RATIO * COF/12.0 * _npv[i-1][2] * _npv[i-1][4];
  else
    _npv[i][8] = 0;
};

double ploan::discount()
{
  double npv = 0;
  for(unsigned int i=0; i<=_terms+3; ++i)
    npv += _npv[i][7] / pow(1 + ROE / 12.0, i);
  return npv;
};

void ploan::pre_collection_cost(unsigned int i)
{
  if(((i<2) ||(_npv[i-2][2] == 0)) || (i > (_terms + 1)))
    _npv[i][6] = 0;
  else{
    double M1_per_open = _monthly_pb * M1_TO_M7_RATIO;
    double grace_per_open = _monthly_pb * M1_TO_M7_RATIO * M1_TO_M7_RATIO;
    _npv[i][6] = _npv[i-2][4] * (M1_per_open * PRE_COLLECTION_PHONE_COST +  grace_per_open * SMS_COST);
  }
};

void ploan::collection_cost(unsigned int i)
{
  if(((i<4) ||(_npv[i-2][2] == 0)) || (i > (_terms + 3)))
    _npv[i][9] = 0;
  else{
    double M1_fix_cost = EXECUTION_ORDER_COST + PROPERTY_INQUIRY_COST + AUDITION_COST + LEGAL_PERSONNEL;
    _npv[i][9] = _npv[i-4][4] * _monthly_pb * (M1_fix_cost + _npv[i-4][2] * EXECUTION_COST_RATE);
  }
};

void ploan::late_fee(unsigned int i)
{
  if(i > (_terms + 1))
    _npv[i][10] = 0;
  else{
    double involunatory_attrition = _npv[i-1][4] * ATTRITION_ADJ * assign_pd(i);
    double involunatory_attrition_M1 = involunatory_attrition * M1_TO_M7_RATIO;
    _npv[i][10] = _npv[i-1][2] * _npv[i][3] *
       ((involunatory_attrition_M1 * RECOVERY_RATIO_4D * DAYS_LATE * 12 / 365 * LATE_FEE_RATE) +
        (involunatory_attrition * RECOVERY_RATIO * DAYS_LATE_M7 * 12 / 365 * LATE_FEE_RATE_M7));
  };
};

void ploan::credit_loss(unsigned int i)
{
  if(i>0 && i < (_terms +1)){
    double involunatory_attrition = _npv[i-1][4] * ATTRITION_ADJ * assign_pd(i);
    double recovery_discount_ratio = 1/ pow((1+ROE/12.0), LEGAL_ACTION_PERIOD);
    _npv[i][5] = _npv[i-1][2] * involunatory_attrition * (1 - recovery_discount_ratio * (1 - EAD));
  }
  else
    _npv[i][5] = 0;
};

void ploan::delta_working_capital(unsigned int i)
{
  credit_loss(i);
  if(i == 0)
    _npv[i][12] = _loan_amount * (LEVERAGE_RATIO - 1);
  else if (i < _terms){
    _npv[i][12] = (_npv[i-1][2] * _npv[i-1][4] - _npv[i][2] * _npv[i][4]) * (1 - LEVERAGE_RATIO) - _npv[i][5];
  }
  else if (i == _terms){
    _npv[i][12] = (_npv[i-1][2]) * _npv[i-1][4] * (1 - LEVERAGE_RATIO) - _npv[i][5];
  }
  else
    _npv[i][12] = 0;
};

void ploan::mgmt_fee(unsigned int i)
{
/*  if((i <= _months_charging_fee) && (i > 0)){
    if(_monthly_fee_type == 1)
      _npv[i][1] = _monthly_fee * _bt_counts;
    else
      _npv[i][1] = _monthly_fee * _npv[i-1][2];
  }
  else if((_months_charging_fee == 1) && (i==0))
    _npv[0][1] = _monthly_fee * _bt_counts;
  else      */
//    _npv[i][1] = 0;
};

void ploan::operation_expense(unsigned int i)
{
  if(i > 0 && (i < (_terms + 1)))
    _npv[i][13] = ACCT_MGMT_FEE * _npv[i-1][4];
  else
    _npv[i][13] = 0;
};

double ploan::npv(double &pb)
{
//initial term cost

  _monthly_pb =  pb/ 12.0;
  probability_of_stay();
  annunity();
//monthly revenues

  for(unsigned int i = 0; i <= _terms+3; ++i){

     interest_cost(i);
     pre_collection_cost(i);
     collection_cost(i);
     late_fee(i);
     delta_working_capital(i);
     operation_expense(i);

    _npv[i][7] =  _npv[i][0] + _npv[i][12] - _npv[i][6] -
                  _npv[i][8] - _npv[i][9] + _npv[i][10] - _npv[i][13];
    if(i==0)
     _npv[i][7] = _application_fee + _npv[i][12];
  };
  double npv_value = discount();
//  bool dump = dump_series(10, _terms+3);
  return npv_value;
};

//This function is for debugging purpose
bool ploan::dump_series(int type, int period)
{
  ofstream output("npv_dumping.csv", ios_base::app);
  if(!output){
    cerr << "Can not open attrition.csv for output.\n";
    return false;
  };
//  output << _case_sn;
//  output << endl;
  output.precision(15);
  switch (type){
    case 2: //outstanding principle (i.e. remaining principle)
      for(int i=0; i<=period; ++i){
       output << _npv[i][2] << ",";
       if(_npv[i][2]==0)
         break;
      };
    break;
    case 4: //attrition (i.e. probability of stay)
      for(int i=0; i<=period; ++i){
       output << _npv[i][4] << ",";
       if(_npv[i][2]==0)
         break;
      };
    break;
    case 6: //credit loss
      for(int i=0; i<=period; ++i){
       output << _npv[i][6] << ",";
       if(_npv[i][2]==0)
         break;
      };
    break;
    case 7: //credit loss
      for(int i=0; i<=period; ++i){
       output << _npv[i][7] << ",";
       if(_npv[i][2]==0)
         break;
      };
    break;
    case 10: //everything
       for(int j=0; j < 14; ++j){
         for(int i=0; i<=period; ++i){
           output << _npv[i][j] << ",";
//           if(_npv[i][2]==0)
//             break;
         }
         output<<endl;
       }
    break;
  }
  output << endl;
  output.close();
  return true;
};

void ploan::annunity()
{
  double compound = pow((1+_npv[0][3]), _terms);
  double monthly_repayment_ratio = (compound * _npv[0][3]) /
                                  (compound -1);
  double monthly_repayment = _loan_amount * monthly_repayment_ratio;
  double principal_repayment;

  for(unsigned int i=1; i<=_terms; ++i){
    _npv[i][0] = _npv[i][3] * _npv[i-1][2]; //interest repayment
    principal_repayment = monthly_repayment - _npv[i][0];
    _npv[i][0] *= _npv[i][4];
    _npv[i][1] = principal_repayment;
    _npv[i][2] = _npv[i-1][2] - _npv[i][1];
    if(_npv[i][2]<=0){
      _npv[i][1] += _npv[i][2];
      _npv[i][2]=0;
      break;
    };
  };
  _npv[_terms][1] += _npv[_terms][2];
  _npv[_terms][2] =0;

  for(unsigned int i = _terms + 1; i < (_terms + 4); ++i){
    _npv[i][0] = 0;
    _npv[i][1] = 0;
    _npv[i][2] = 0;
  };
};

double ploan::assign_pd(unsigned int i)
{
  double return_value;
  switch(_year_for_pd){
    case 0:
      if(i<7)
       return_value = 2 * _monthly_pb * _terms / (_terms + 1) * (i /_terms);
      else
        return_value = 0;
      break;
    case 1:
      if(i < 8)
        return_value = _monthly_pb * 12 / 7.85 * i / 7;
      else
        return_value = _monthly_pb * 12 / 7.85 * 0.77;
      break;
    case 2:
      if(i < 9)
        return_value = _monthly_pb * 12 / 7.58 * i / 8;
      else
        return_value = _monthly_pb * 12 / 7.58 * 0.77;
      break;
    case 3:
      if(i < 10)
        return_value = _monthly_pb * 12 / 7.31 * i / 9;
      else
        return_value = _monthly_pb * 12 / 7.31 * 0.77;
      break;
    case 4:
      if(i <11)
        return_value = _monthly_pb * 12 / 7.04 * i / 10;
      else
        return_value = _monthly_pb * 12 / 7.04 * 0.77;
      break;
    case 5:
      if(i < 12)
        return_value = _monthly_pb * 12 / 6.77 * i / 11;
      else
        return_value = _monthly_pb * 12 / 6.77 * 0.77;
      break;
    case 6:
      if(i < 13)
        return_value = _monthly_pb * 12 / 6.5 * i / 12;
      else
        return_value = _monthly_pb * 12 / 6.5 * 0.77;
      break;
    default:
      if(i < 13)
        return_value = _monthly_pb * 12 / 6.5 * i / 12;
      else
        return_value = _monthly_pb * 12 / 6.5 * 0.77;
      break;
  };
  return return_value;
};

