/****************************************************************************
** Licensed Materials - Property of DAC
**
** (C) COPYRIGHT Decision Analytics Consulting 2005,2006
** All Rights Reserved.
**
*****************************************************************************
**
** SOURCE FILE NAME: risk_model.sqC
**
** Description: How to generate a risk model
**
**
**
**
****************************************************************************/

#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std;
#else
   #include <iostream.h>
#endif
#include "risk_model.h"
#include "functions.h"
#include "error.h"
#ifdef TRACE
#define trace 1
#else
#define trace 0
#endif

extern char MESSAGE[1024];

//--------------------------------------------------------------------------------------------------
int RiskModel::PrepareJcicTables(char *case_sn, char *idn)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char pjtCase_Sn[20];
     char pjtIdn[12];
     long pjtInx;
     char pjtSqlStmt[512];
     long counter;
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  strcpy (pjtCase_Sn, case_sn);
  strcpy (pjtIdn, idn);
  Debug("Enter PrepareJcicTables()");

  EXEC SQL
     insert into krm001_dedup (case_sn, idn, inquiry_date, card_brand, card_type, issue, issue_name, start_date, stop_date, stop_code, ab_code, m_s, limit, cnt)
        select case_sn, idn, inquiry_date, card_brand, card_type, issue, issue_name, start_date, stop_date, stop_code, ab_code, m_s, limit, count(*)
        from krm001
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
        group by case_sn, idn, inquiry_date, card_brand, card_type, issue, issue_name, start_date, stop_date, stop_code, ab_code, m_s, limit;
  EMB_SQL_CHECK("Insert-KRM001.");
/*
  EXEC SQL
     insert into krm023_dedup (case_sn, idn, inquiry_date, issue, issue_name, limit, yrmon, kr_code, payment, cash, pay_code, cnt)
        select case_sn, idn, inquiry_date, issue, issue_name, limit, yrmon, kr_code, payment, cash, pay_code, count(*)
        from krm023
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
        group by case_sn, idn, inquiry_date, issue, issue_name, limit, yrmon, kr_code, payment, cash, pay_code;
  EMB_SQL_CHECK("Insert-KRM023.");
*/
//start of convert krm037 to krm023  
  EXEC SQL
     insert into krm023_dedup (case_sn, idn, inquiry_date, issue, issue_name, limit, yrmon, kr_code, payment, cash, pay_code, cnt)
        select case_sn, idn, inquiry_date, issue,
               issue_name, limit, yrmon, kr_code, payment, cash, pay_code, count(*)
        from krm023
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
          and cast(yrmon as int) <= 9412
        group by case_sn, idn, inquiry_date, issue, issue_name, limit, yrmon, kr_code, payment, cash, pay_code;
  EMB_SQL_CHECK("Insert-KRM023.");

  EXEC SQL
     insert into krm037_dedup(CASE_SN, inquiry_date, IDN, idn_ban, bill_date, issue,
        issue_name, card_type, perm_limit, temp_limit, cash_limit, payable, cash_lent, 
        last_paya, revol_bal, pay_stat, pay_code, revol_rate, pre_owed, debt_code,
        close_code, clear_date, cnt)
     select CASE_SN, inquiry_date, IDN, idn_ban, bill_date, issue,
        issue_name, card_type, perm_limit, temp_limit, cash_limit, payable, cash_lent, 
        last_paya, revol_bal, pay_stat, pay_code, revol_rate, pre_owed, debt_code,
        close_code, clear_date, count(*)
     from krm037
     where case_sn = :pjtCase_Sn and idn = :pjtIdn
       and issue != 'TOT'
     group by CASE_SN, inquiry_date, IDN, idn_ban, bill_date, issue,
        issue_name, card_type, perm_limit, temp_limit, cash_limit, payable, cash_lent, 
        last_paya, revol_bal, pay_stat, pay_code, revol_rate, pre_owed, debt_code,
        close_code, clear_date;
  EMB_SQL_CHECK("Dedup-KRM037.");
/*     
  EXEC SQL
     update krm037_dedup
       set bill_date  = (case when ltrim(bill_date)  = '' then null else ltrim(rtrim(bill_date)) end),
           issue      = (case when ltrim(issue)      = '' then null else issue end),
           issue_name = (case when ltrim(issue_name) = '' then null else issue_name end),
           card_type  = (case when ltrim(card_type)  = '' then null else card_type end),
           perm_limit = (case when ltrim(perm_limit) = '' then null else perm_limit end),
           temp_limit = (case when ltrim(temp_limit) = '' then null else temp_limit end),
           cash_limit = (case when ltrim(cash_limit) = '' then null else cash_limit end),
           payable    = (case when ltrim(payable)    = '' then null else payable end),
           cash_lent  = (case when ltrim(cash_lent)  = '' then null else cash_lent end),
           last_paya  = (case when ltrim(last_paya)  = '' then null else last_paya end),
           revol_bal  = (case when ltrim(revol_bal)  = '' then null else revol_bal end),
           pay_stat   = (case when ltrim(pay_stat)   = '' then null else pay_stat end),
           pay_code   = (case when ltrim(pay_code)   = '' then null else pay_code end),
           revol_rate = (case when ltrim(revol_rate) = '' then null else revol_rate end),
           pre_owed   = (case when ltrim(pre_owed)   = '' then null else pre_owed end),
           debt_code  = (case when ltrim(debt_code)  = '' then null else debt_code end),
           close_code = (case when ltrim(close_code) = '' then null else close_code end),
           clear_date = (case when ltrim(clear_date) = '' then null else clear_date end)
       where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Clean-KRM037.");
*/     
  EXEC SQL
     update krm037_dedup
       set mon_since = (case when length(bill_date) = 4 and left(bill_date,1) between '1' and '9'
                                  then cast(left(bill_date, 2) as int) * 12 + cast(right(bill_date, 2) as int)
                             when length(bill_date) = 7 then cast(left(bill_date, 3) as int) * 12 + cast(substr(bill_date, 4, 2) as int)
                             else null end)
       where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update-KRM037-mon_since.");

  EXEC SQL
     update krm037_dedup
        set last_paya =
             (case when right(left(last_paya,2),1) in ('H', 'M', 'L') then '0'||(left(last_paya,2))
              else last_paya end)
        where last_paya is not null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 24.");

  EXEC SQL
     update krm037_dedup
        set payment_amt = 
              (case right(last_paya,1) when 'L' then 2 when 'M' then 5 when 'H' then 8
               else 0 end) * power(10, cast(left(last_paya,2) as int)-1) / 1000.0
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 25.");

/* change paycode X to '*' which is less than 'A' in ascii table */
/* 150新光 and 103誠泰 convert to 103新光 since 2006-01 */
  EXEC SQL
     insert into krm037_convert (CASE_SN, inquiry_date, IDN, issue, issue_name, limit, kr_code, payment_amt, revol_bal, pre_owed, cash, pay_code, mon_since)
        select CASE_SN, inquiry_date, IDN,
               (case when (issue = 'A82' and card_type = 'A') then 'AEA'
                     when (issue = 'A82' and card_type = 'E') then 'AEE'
                     when (issue = '021' and card_type = 'V') then 'CTV'
                     when (issue = '021' and card_type = 'M') then 'CTM'
                     when (issue = '021' and card_type = 'D') then 'CTD'
                     when issue = '150' then '103'
                     else issue end),
               issue_name, cast(perm_limit as int), card_type, payment_amt, 
               cast(revol_bal as int), cast(pre_owed as int), 'N',
               (case when debt_code in ('A', 'B') then 'F'
                     when pay_stat = 'X' and pay_code = 'X' then '*'
                     when pay_stat = '1' and pay_code = 'N' then 'A'
                     when pay_stat = '1' and pay_code = '0' then 'B'
                     when pay_stat = '2' and pay_code = 'N' then 'C'
                     when pay_stat = '2' and pay_code = '0' then 'D'
                     when pay_stat = '3' and pay_code between '1' and '7' then 'E'
                     when pay_stat = '4' and pay_code between '1' and '7' then 'F'
                     else null end), mon_since
        from krm037_dedup
        where mon_since > 1140
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Convert-KRM037.");
/* ignore kr_code*/
  EXEC SQL
     insert into krm023_dedup (CASE_SN, inquiry_date, IDN, issue, issue_name, limit, payment_amt, revol_bal, pre_owed, cash, pay_code, mon_since)
        select CASE_SN, inquiry_date, IDN, issue,
               issue_name, cast(sum(limit) as char(5)), sum(payment_amt), 
               sum(revol_bal), sum(pre_owed), cash, max(pay_code), mon_since
        from krm037_convert
        where mon_since > 1140
          and case_sn = :pjtCase_Sn and idn = :pjtIdn
        group by CASE_SN, inquiry_date, IDN, issue, issue_name, cash, mon_since;
  EMB_SQL_CHECK("Convert-KRM037.");

  EXEC SQL
     update krm023_dedup p
        set pay_code = 'X'
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
          and pay_code='*';
  EMB_SQL_CHECK("paycode-KRM037.");

  EXEC SQL
     update krm023_dedup p
        set cash = 'Y'
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
          and exists (select *
                      from krm037_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since = cast(left(s.bill_date, 3) as int) * 12 * cast(substr(s.bill_date, 4, 2) as int)
                        and p.issue = s.issue
                        and cast(s.cash_lent as int) > 0);
  EMB_SQL_CHECK("Cash-KRM037.");
//end of convert krm037 to krm023  

  EXEC SQL
     insert into stm001_dedup (case_sn, idn, inquiry_date, bank_code, bank_name, query_date, item_list, cnt)
        select case_sn, idn, inquiry_date, bank_code, bank_name, query_date, item_list, count(*)
        from stm007
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
        group by case_sn, idn, inquiry_date, bank_code, bank_name, query_date, item_list;
  EMB_SQL_CHECK("Insert-STM007.");

// if bam087 contains data then get data from bam087 else get data from bam086.
//

  EXEC SQL
     select count(*)
     into :counter
     from bam087
     where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Check bam087 exists.");

  if (counter > 0) {
     EXEC SQL
       insert into bam087_dedup(case_sn, inquiry_date, idn, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt1, contract_amt, loan_amt, pass_due_amt, pay_code_12, is_kind, project_code, co_loan, un_mark, u_yyymmdd, u_rate, ib_mark, iab_ban, iab_name, contract_mark, contract_code, contract_code1, con_ban, con_name, act_y_mark, contract_amt_y, cnt)
          select case_sn, inquiry_date, idn, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, cast(contract_amt1 as int), cast(contract_amt as int), cast(loan_amt as int), cast(pass_due_amt as int), pay_code_12, is_kind, project_code, co_loan, un_mark, u_yyymmdd, u_rate, ib_mark, iab_ban, iab_name, contract_mark, contract_code, contract_code1, con_ban, con_name, act_y_mark, cast(contract_amt_y as int), count(*)
          from bam087
          where case_sn = :pjtCase_Sn and idn = :pjtIdn
          group by case_sn, inquiry_date, idn, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt1, contract_amt, loan_amt, pass_due_amt, pay_code_12, is_kind, project_code, co_loan, un_mark, u_yyymmdd, u_rate, ib_mark, iab_ban, iab_name, contract_mark, contract_code, contract_code1, con_ban, con_name, act_y_mark, contract_amt_y;
     EMB_SQL_CHECK("Dedup-BAM08.");
   
     EXEC SQL
       update bam087_dedup
          set contract_amt = contract_amt1
          where contract_amt1 > contract_amt;
     EMB_SQL_CHECK("Max(contract_amt, contract_amt1).");
       
     EXEC SQL
       update bam087_dedup
          set contract_amt = contract_amt_y
          where account_code= 'Y' and contract_amt_y != 0;
     EMB_SQL_CHECK("set cash card contract_amt.");

     EXEC SQL
       insert into bam086_dedup (case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt, loan_amt, pass_due_amt, pay_code_12, co_loan)
          select case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt, loan_amt, pass_due_amt, pay_code_12, co_loan
          from bam087_dedup
          where case_sn = :pjtCase_Sn and idn = :pjtIdn
          group by case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt, loan_amt, pass_due_amt, pay_code_12, co_loan;
     EMB_SQL_CHECK("Insert_dedup-BAM086.");
  }
  else {
     EXEC SQL
       insert into bam086_dedup (case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt, loan_amt, pass_due_amt, pay_code_12, co_loan, cnt)
          select case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, cast(contract_amt as int), cast(loan_amt as int), cast(pass_due_amt as int), pay_code_12, co_loan, count(*)
          from bam086
          where case_sn = :pjtCase_Sn and idn = :pjtIdn
          group by case_sn, idn, inquiry_date, data_yyy, data_mm, bank_code, bank_name, account_code, account_code2, purpose_code, contract_amt, loan_amt, pass_due_amt, pay_code_12, co_loan;
     EMB_SQL_CHECK("Insert-BAM086.");
  }
//  EXEC SQL
//     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
//        select case_sn, idn, inquiry_date, 'D', data_yyymmdd
//        from bas001
//        where (data_yyymmdd is not null and rtrim(ltrim(data_yyymmdd)) <> '')
//          and EVER_DELINQUENT='Y'
//          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
//  EMB_SQL_CHECK("Insert-Select 5.");
//
//  EXEC SQL
//     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
//        select case_sn, idn, inquiry_date, 'B', latest_bounce
//        from das006
//        where (latest_bounce is not null and rtrim(ltrim(latest_bounce)) <> '')
//          and rtrim(ltrim(latest_bounce)) <> 'N'
//          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
//  EMB_SQL_CHECK("Insert-Select 6.");
//
//  EXEC SQL
//     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
//        select case_sn, idn, inquiry_date, 'R', beg_date
//        from dam203
//        where (beg_date is not null and rtrim(ltrim(beg_date)) <> '')
//          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
//  EMB_SQL_CHECK("Insert-Select 7.");
//
//  EXEC SQL
//     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
//        select case_sn, idn, inquiry_date, 'S', stop_date
//        from krm001
//        where stop_code = '3'
//          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
//  EMB_SQL_CHECK("Insert-Select 8.");

 //remove comment when JCIC changed
  EXEC SQL
     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
        select case_sn, idn, inquiry_date, 'D', delinquent_date
        from jas002
        where (delinquent_date is not null and ltrim(delinquent_date) <> '')
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Insert-JAS002-D.");

  EXEC SQL
     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
        select case_sn, idn, inquiry_date, 'B', bad_check_date
        from jas002
        where (bad_check_date is not null and ltrim(bad_check_date) <> '')
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Insert-JAS002-B.");

  EXEC SQL
     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
        select case_sn, idn, inquiry_date, 'R', reject_date
        from jas002
        where (reject_date is not null and ltrim(reject_date) <> '')
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Insert-JAS002-R.");

  EXEC SQL
     insert into jas002_t (case_sn, idn, inquiry_date, reason, date_happen)
        select case_sn, idn, inquiry_date, 'S', stop_card_date
        from jas002
        where (stop_card_date is not null and ltrim(stop_card_date) <> '')
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Insert-JAS002-S.");

  EXEC SQL
     insert into jas002_t_dedup (case_sn, idn, inquiry_date, reason, date_happen, cnt)
        select case_sn, idn, inquiry_date, reason, date_happen, count(*)
        from jas002_t
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
        group by case_sn, idn, inquiry_date, reason, date_happen;
  EMB_SQL_CHECK("Insert-Select 9.");

  EXEC SQL
     update jas002_t_dedup
       set date_happen = (case when date_happen = '' then NULL else date_happen end)
       where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 10.");

  EXEC SQL
     update krm001_dedup
        set card_brand = (case when card_brand = '' then NULL else card_brand end),
            card_type  = (case when card_type  = '' then NULL else card_type  end),
            issue      = (case when issue      = '' then NULL else issue      end),
            issue_name = (case when issue_name = '' then NULL else issue_name end),
            start_date = (case when start_date = '' then NULL else start_date end),
            stop_date  = (case when stop_date in ('','0') then NULL else stop_date  end),
            stop_code  = (case when stop_code  = '' then NULL else stop_code  end),
            ab_code    = (case when ab_code    = '' then NULL else ab_code    end),
            m_s        = (case when m_s        = '' then NULL else m_s        end),
            limit      = (case when limit      = '' then NULL else limit      end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 11.");

  EXEC SQL
     update krm023_dedup
        set issue      = (case when issue      = '' then NULL else issue      end),
            issue_name = (case when issue_name = '' then NULL else issue_name end),
            limit      = (case when limit      = '' then NULL else limit      end),
            yrmon      = (case when yrmon      = '' then NULL else yrmon      end),
            kr_code    = (case when kr_code    = '' then NULL else kr_code    end),
            payment    = (case when payment    = '' then NULL else payment    end),
            cash       = (case when cash       = '' then NULL else cash       end),
            pay_code   = (case when pay_code   = '' then NULL else pay_code   end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 12.");

  EXEC SQL
     update stm001_dedup
        set bank_code  = (case when bank_code  = '' then NULL else bank_code  end),
            bank_name  = (case when bank_name  = '' then NULL else bank_name  end),
            query_date = (case when query_date = '' then NULL else query_date end),
            item_list  = (case when item_list  = '' then NULL else item_list  end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 13.");

  EXEC SQL
     update bam086_dedup
        set data_yyy      = (case when data_yyy      = '' then NULL else data_yyy      end),
            data_mm       = (case when data_mm       = '' then NULL else data_mm       end),
            bank_code     = (case when bank_code     = '' then NULL else bank_code     end),
            bank_name     = (case when bank_name     = '' then NULL else bank_name     end),
            account_code  = (case when account_code  = '' then NULL else account_code  end),
            account_code2 = (case when account_code2 = '' then NULL else account_code2 end),
            purpose_code  = (case when purpose_code  = '' then NULL else purpose_code  end),
            pay_code_12   = (case when pay_code_12   = '' then NULL else pay_code_12   end),
            co_loan       = (case when co_loan       = '' then NULL else co_loan       end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 14.");

  EXEC SQL
     update krm001_dedup
        set start_date = (case
     		   when left(ltrim(start_date),1) not in ('1', '0', '*') then '0'||rtrim(ltrim(start_date))
     		   else start_date
     		  end),
            stop_date =  (case
     		   when left(ltrim(stop_date),1) not in ('1', '0', '*') then '0'||rtrim(ltrim(stop_date))
      		   else stop_date
     		  end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 15.");
/*apply 30-day rule, now = year_month of inquiry_date minus one month 
  15-day rule which if day part of inquiry_date > 15 then now = year_month of inquiry_date
     else now = year_month of inquiry_date minus one month, is unuse.
2007/08/01, use 15-day rule for inquiry month     
*/
  EXEC SQL
     update krm001_dedup
        set start_mon_since = (case
     			when left(start_date,1) = '*' then null
     			else cast(left(start_date, 3) as int)  * 12 + cast(right(left(start_date, 5), 2) as int)
     		       end),
            end_mon_since = (case
     			when left(stop_date, 1) = '*' then null
     			else cast(left(stop_date, 3) as int) * 12 + cast(right(left(stop_date, 5), 2) as int)
     		     end),
            now = (case when substr(inquiry_date, 8, 2) > '15' then
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int)
                   else
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int) -1
                   end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 16.");

  EXEC SQL
     update krm001_dedup
        set end_mon_since = 12000
        where end_mon_since is null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 17.");

  EXEC SQL
     update jas002_t_dedup
        set date_happen = (case
     		    when left(ltrim(date_happen),1) not in ('1', '0', '*') then '0'||rtrim(ltrim(date_happen))
      		    else date_happen
      		   end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 18.");

  EXEC SQL
     update jas002_t_dedup
        set mon_since = (case
        		  when left(ltrim(date_happen),1) = '*' then null
        		  else cast(left(ltrim(date_happen), 3) as int)* 12 + cast(right(left(rtrim(date_happen), 5), 2) as int)
      	  	         end),
            now = (case when substr(inquiry_date, 8, 2) > '15' then
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int)
                   else
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int) -1
                   end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 19.");

  EXEC SQL
     update krm023_dedup
        set yrmon = (case
     	      when left(ltrim(yrmon),1) not in ('1', '0', '*') then '0'||rtrim(ltrim(yrmon))
     	      else yrmon
     	     end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
          and yrmon is not null;
  EMB_SQL_CHECK("Update 20.");

  EXEC SQL
     update krm023_dedup
        set mon_since = (case
     		   when left(yrmon,1) = '*' then null
     		   else cast(left(yrmon, 3) as int) * 12 + cast(right(left(yrmon, 5), 2) as int)
     		 end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn
          and yrmon is not null;
  EMB_SQL_CHECK("Update 21.");

  EXEC SQL
     update krm023_dedup
        set now = (case when substr(inquiry_date, 8, 2) > '15' then
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int)
                   else
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int) -1
                   end),
            curr_inqmon = (case when substr(inquiry_date, 8, 2) > '15' then 0
                           else 0 end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 21.");

  EXEC SQL
     update stm001_dedup
        set query_date = (case
     		   when left(ltrim(query_date),1) not in ('1', '0', '*') then '0'||rtrim(ltrim(query_date))
     		   else query_date
     		  end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 22.");

  EXEC SQL
     update stm001_dedup
        set query_mon_since = (case
     			when left(query_date,1) = '*' then null
     			else cast(left(query_date, 3) as int) * 12 + cast(right(left(query_date, 5), 2) as int)
     		       end),
            now = (case when substr(inquiry_date, 8, 2) > '15' then
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int)
                   else
                      (cast(substr(inquiry_date,1,3) as int))*12 + cast(substr(inquiry_date,5,2) as int) -1
                   end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 23.");

  EXEC SQL
     update krm023_dedup
        set payment =
             (case when right(left(payment,2),1) in ('H', 'M', 'L') then '0'||(left(payment,2))
              else payment end)
        where payment is not null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 24.");

  EXEC SQL
     update krm023_dedup
        set payment_amt = 
              (case right(payment,1) when 'L' then 2 when 'M' then 5 when 'H' then 8
               else 0 end) * power(10, cast(left(payment,2) as int)-1) / 1000.0
        where payment is not null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 25.");

  EXEC SQL
     update krm023_dedup
        set payment_amt = 0
        where payment_amt is null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 26.");

  EXEC SQL
     update krm023_dedup
        set payment_amt = cast(limit as int)
        where payment_amt > cast(limit as int)
          and issue != 'AEE'
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 26-1.");

  EXEC SQL
     update krm023_dedup
        set revol_bal = payment_amt * 1000,
            pre_owed = 0
        where revol_bal is null
          and case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 26-2.");

  EXEC SQL
     update  krm023_dedup
        set bucket_def_1k = (case when pay_code in ('D', 'E', 'F') and payment_amt > 1 then 1
                             else 0 end),
            bucket_ef_1k = (case when pay_code in ('E', 'F') and payment_amt > 1 then 1
                            else 0 end),
            bucket_f_1k = (case when pay_code = 'F' and payment_amt > 1 then 1
                         else 0 end)
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 27.");

  strcpy (pjtSqlStmt,
         "update krm023_dedup p "
         " set  p.bucket_ef_1k= "
         "      (select (case when p.bucket_ef_1k=1 then s.bucket_ef_1k+1 else 0 end) "
         "      from krm023_dedup s "
         "      where p.case_sn = s.case_sn "
         "        and p.issue = s.issue "
         "        and p.mon_since = s.mon_since+1) "
         "   where p.now-p.mon_since = ? "
         "     and case_sn = ? and idn = ? "
         "     and exists (select s.case_sn from krm023_dedup s  "
         "                 where p.case_sn = s.case_sn "
         "                   and p.issue = s.issue "
         "                   and p.mon_since = s.mon_since+1)");
  EXEC SQL PREPARE stmt1 FROM :pjtSqlStmt;

  strcpy (pjtSqlStmt,
         "update krm023_dedup p "
         " set  p.bucket_f_1k= "
         "      (select (case when p.bucket_f_1k =1 then s.bucket_f_1k +1 else 0 end) "
         "      from krm023_dedup s "
         "      where p.case_sn = s.case_sn "
         "        and p.issue = s.issue "
         "        and p.mon_since = s.mon_since+1) "
         "   where p.now-p.mon_since = ? "
         "     and case_sn = ? and idn = ? "
         "     and exists (select s.case_sn from krm023_dedup s  "
         "                 where p.case_sn = s.case_sn "
         "                   and p.issue = s.issue "
         "                   and p.mon_since = s.mon_since+1)");
  EXEC SQL PREPARE stmt2 FROM :pjtSqlStmt;

  pjtInx = 11;
  while (pjtInx > 0){
     EXEC SQL EXECUTE stmt1 USING :pjtInx, :pjtCase_Sn, :pjtIdn;
     EXEC SQL EXECUTE stmt2 USING :pjtInx, :pjtCase_Sn, :pjtIdn;
     pjtInx--;
     EMB_SQL_CHECK("Update 27-2.");
  }

  EXEC SQL
     update bam086_dedup
        set bank_code2 = left(bank_code,3),
            mon_since = cast(data_yyy as int)* 12 + cast(data_mm as int),
            cycle = length(ltrim(rtrim(pay_code_12)))
        where case_sn = :pjtCase_Sn and idn = :pjtIdn;
  EMB_SQL_CHECK("Update 28.");

  strcpy (pjtSqlStmt,
         "insert into bam086_bucket (case_sn, idn, bank_code, mon_since, bucket) "
         " select case_sn, idn, bank_code, (mon_since - ? + 1), "
         "               (case when substr(rtrim(pay_code_12), ?, 1) = 'A' then 0.25 "
         "                     when substr(rtrim(pay_code_12), ?, 1) = 'B' then 0.5 "
         "                     when substr(rtrim(pay_code_12), ?, 1) = 'X' then 0.0 "
         "                     else cast(substr(rtrim(pay_code_12), ?, 1) as int) end) "
         " from bam086_dedup "
         " where cycle >= ? "
         "   and case_sn = ? and idn = ? ");

  EXEC SQL PREPARE stmt3 FROM :pjtSqlStmt;
  pjtInx = 1;
  while (pjtInx <= 12){
     EXEC SQL EXECUTE stmt3 USING :pjtInx, :pjtInx, :pjtInx, :pjtInx, :pjtInx, :pjtInx, :pjtCase_Sn, :pjtIdn;
     pjtInx++;
     EMB_SQL_CHECK("Update 29.");
  }

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");
  Debug("Exit PrepareJcicTables()");

  return 0;
} // RiskModel::PrepareJcicTables()

//--------------------------------------------------------------------------------------------------
int RiskModel::Prescreen(char *case_sn, char *idn)
{
  EXEC SQL BEGIN DECLARE SECTION;
    char pfCase_Sn[20];
    char pfIdn[12];
    long  age;
    long  jas002_defect;
    long  krm001_hit;
    long  krm023_hit;
    long  max_bucket;
    long  fs044;
    long  fs334;
    long  cash_max_bucket;
    long  cash_utilization;
    long  ind001;
    long  revolving_amt;
    long  ps_code;

    short  age_ind;
    short  jas002_defect_ind;
    short  krm001_hit_ind;
    short  krm023_hit_ind;
    short  max_bucket_ind;
    short  fs044_ind;
    short  fs334_ind;
    short  cash_max_bucket_ind;
    short  cash_utilization_ind;
    short  ind001_ind;
    short  revolving_amt_ind;
    short  ps_code_ind;

    char  ps_msg[257];
  EXEC SQL END DECLARE SECTION;
  int rc = 0;
  struct sqlca sqlca;
  int cust_age, cust_foreigner;

  memset(MESSAGE, '\0', sizeof(MESSAGE));
  strcpy (pfCase_Sn, case_sn);
  strcpy (pfIdn, idn);

  EXEC SQL
     select jas002_defect, krm001_hit, krm023_hit, max_bucket, fs044, fs334, cash_max_bucket,
            cash_utilization, ind001, revolving_amt, age
     into :jas002_defect:jas002_defect_ind, :krm001_hit:krm001_hit_ind, :krm023_hit:krm023_hit_ind,
          :max_bucket:max_bucket_ind, :fs044:fs044_ind, :fs334:fs334_ind, :cash_max_bucket:cash_max_bucket_ind,
          :cash_utilization:cash_utilization_ind, :ind001:ind001_ind, :revolving_amt:revolving_amt_ind, :age:age_ind
     from pdaco_cal
     where case_sn = :pfCase_Sn and idn = :pfIdn;
  EMB_SQL_CHECK("Select Pdaco_cal.");

  if (sqlca.sqlcode == 100) {
    strcpy(MESSAGE, "申貸編號不存在於 pdaco_cal");
    return(EXIST_ERR_1101);
  }

 cust_foreigner = foreigner(idn);
 
 ps_code = 0; // initialize to 0
 
 if (age >= 60) {
    strcpy(MESSAGE, "年齡 > 60 歲。");
    ps_code = 3101;
 }
 else if (age < 20 && age != -1000) {
    strcpy(MESSAGE, "年齡 < 20 歲。");
    ps_code = 3102;
 }
 else if (cust_foreigner == 1) {
    strcpy(MESSAGE, "外籍人士。");
    ps_code = 3103;
 }
 else if (krm001_hit ==0 || krm023_hit == 0) {
    strcpy(MESSAGE, "聯徵中心資料不全、或查無資料，模組無法評分。");
    ps_code = 3104;
 }
 else if (jas002_defect > 0) {
    strcpy(MESSAGE, "三年內有強停、拒往、退票、授信異常情況。");
    ps_code = 3105;
 }
 else if (max_bucket > 3) {
    strcpy(MESSAGE, "信用卡繳款異常連續三個月以上。");
    ps_code = 3106;
 }
 else if (fs044 > 0 || fs334 >= 3) {
    strcpy(MESSAGE, "非信用卡貸款有延遲繳款金額或連續三個月繳款異常。");
    ps_code = 3107;
 }
 else if (cash_max_bucket >= 0.5 || cash_utilization >= 1) {
    strcpy(MESSAGE, "最近一個月現金卡繳款異常或使用率超過95%(含)。");
    ps_code = 3108;
 }
 else if (revolving_amt > 500000) {
    strcpy(MESSAGE, "最近一個月現金卡加信用卡循環金額大於五十萬(不含)。");
    ps_code = 3109;
 }
 else if (ind001 == 1) {
    strcpy(MESSAGE, "無信用卡開卡超過六個月以上，模組無法評分。");
    ps_code = 3110;
 }

 strcpy(ps_msg, MESSAGE);
 EXEC SQL
    update pdaco_cal
       set ps_code = :ps_code,
           ps_msg = :ps_msg
    where case_sn = :pfCase_Sn and idn = :pfIdn;
 EMB_SQL_CHECK("update prescreen status.");

 return(ps_code);
}

//--------------------------------------------------------------------------------------------------
int RiskModel::GenerateScreenVars(char *case_sn, char *idn, char *birthday, char *sysdate)
{
  struct sqlca sqlca;

  EXEC SQL BEGIN DECLARE SECTION;
    char psCase_Sn[20];
    char psIdn[12];
    long psAge;
  EXEC SQL END DECLARE SECTION;

  strcpy (psCase_Sn, case_sn);
  strcpy (psIdn, idn);
  /* risk filter process */
  Debug("Enter Prescreen()");

  EXEC SQL
     insert into pdaco_cal(case_sn, idn)
        values (:psCase_Sn, :psIdn);
  EMB_SQL_CHECK("Insert 1.");

  /* Update filter variable*/
  EXEC SQL
    update pdaco_cal p
       set jas002_defect =
           (select (case when count(*) > 0 then 1 else 0 end)
            from jas002_t_dedup s
            where p.case_sn = s.case_sn
            group by s.case_sn )
       where exists (select *
                     from jas002_t_dedup s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 2.");

  EXEC SQL
    update pdaco_cal p
       set krm023_hit =
           (select (case when count(*) > 0 then 1 else 0 end)
            from krm023_dedup s
            where p.case_sn = s.case_sn)
       where exists (select *
                     from krm023_dedup s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 3.");

  EXEC SQL
    update pdaco_cal p
       set krm001_hit =
           (select (case when count(*) > 0 then 1 else 0 end)
            from krm001_dedup s
            where p.case_sn = s.case_sn)
       where exists (select *
                     from krm001_dedup s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 4.");

  EXEC SQL
    update pdaco_cal p
       set max_bucket =
           (select max(bucket_ef_1k)
            from krm023_dedup s
            where p.case_sn = s.case_sn
            group by case_sn)
       where exists (select *
                     from krm023_dedup s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 5.");

  /*----FS044----*/
  EXEC SQL
    update pdaco_cal p
       set fs044 =
           (select count(*)
            from bam086_dedup s
            where s.pass_due_amt > 0
              and p.case_sn = s.case_sn
            group by s.case_sn)
       where exists (select *
                     from bam086_dedup s
                     where s.pass_due_amt > 0
                       and p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 6.");

  /*----FS334--曾經最高遲繳月數--*/
  EXEC SQL
    update pdaco_cal p
       set fs334 =
           (select max(bucket)
            from bam086_bucket s
            where p.case_sn = s.case_sn
            group by s.case_sn)
       where exists (select *
                     from bam086_bucket s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 7.");

  /*----cash card max bucket----*/
  EXEC SQL
    update pdaco_cal p
       set cash_max_bucket =
          (select count(*)
           from bam086_dedup s
           where account_code = 'Y'
             and NULLIF(left(pay_code_12, 1),'0') not in ('0', 'X')
             and p.case_sn = s.case_sn
           group by case_sn)
       where exists (select *
                     from bam086_dedup s
                     where account_code = 'Y'
                       and NULLIF(left(pay_code_12, 1),'0') not in ('0', 'X')
                       and p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 8.");

  /*----cash card utilization----*/
  EXEC SQL
    update pdaco_cal p
       set cash_utilization =
           (select count(*)
            from bam086_dedup s
            where account_code = 'Y'
              and NULLIF(loan_amt, 0) / contract_amt >= 0.95
              and contract_amt > 0
              and p.case_sn = s.case_sn
            group by case_sn)
       where exists (select *
                     from bam086_dedup s
                     where account_code = 'Y'
                       and NULLIF(loan_amt, 0) / contract_amt >= 0.95
                       and contract_amt > 0
                       and p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 9.");

  /*----Ind001----*/
  EXEC SQL
    update pdaco_cal p
       set ind001 =
           (select (case when min(now) - min(start_mon_since) > 6 then 1 else 0 end)
            from krm001_dedup s
            where p.case_sn = s.case_sn
              and s.m_s = 'Y'
            group by case_sn)
       where exists (select *
                     from krm001_dedup s
                     where p.case_sn = s.case_sn
                       and s.m_s = 'Y')
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 10.");
  /* 20060316 by Eric:the earliest stmt should >=6 and the latest stmt should < 6 */
  EXEC SQL
    update pdaco_cal p
       set ind001 = ind001 +
           (select (case when (min(now) - min(mon_since) >= 6) and
                              (min(now) - max(mon_since) < 6) then 1 else 0 end)
            from krm023_dedup s
            where p.case_sn = s.case_sn
            group by case_sn)
       where exists (select *
                     from krm023_dedup s
                     where p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 10-1.");
  
  EXEC SQL
    update pdaco_cal p
       set ind001 = (case when ind001 = 2 then 0 else 1 end)
       where case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update 10-2.");

  /*----unsecured loan amount ----*/
  EXEC SQL
     update pdaco_cal p
        set reserve1 = 0.0
        where case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update unsecured loan-1.");

  /*----cash card and credit card last month revolving balance ----*/
  EXEC SQL delete from open_card where case_sn = :psCase_Sn;
  EMB_SQL_CHECK("delete open_card.");
  
  EXEC SQL
    insert into open_card(case_sn, issue, mon)
       select case_sn, issue, max(mon_since)
            from krm023_dedup s
            where case_sn = :psCase_Sn and idn = :psIdn
              and mon_since >= (now - 3)
            group by case_sn, issue;
  EMB_SQL_CHECK("set latest month.");

  EXEC SQL
     update pdaco_cal p
        set revolving_amt = revolving_amt +
            (select sum(revol_bal)
             from krm023_dedup s, open_card t
             where p.case_sn = s.case_sn
               and pay_code in ('C', 'D', 'E', 'F')
               and s.case_sn = t.case_sn
               and s.issue = t.issue 
               and s.mon_since = t.mon 
            )
        where exists (select *
                      from krm023_dedup s, open_card t
                      where p.case_sn = s.case_sn
                        and pay_code in ('C', 'D', 'E', 'F')
                        and s.case_sn = t.case_sn
               		and s.issue = t.issue 
               		and s.mon_since = t.mon 
                     )
          and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("set CC revol amt.");

  /*----unsecured loan amount: credit card ----*/
  EXEC SQL
     update pdaco_cal p
        set reserve1 = reserve1 +
            (select sum(revol_bal + pre_owed) 
             from krm023_dedup s, open_card t
             where p.case_sn = s.case_sn
               and pay_code in ('C', 'D', 'E', 'F')
               and s.case_sn = t.case_sn
               and s.issue = t.issue 
               and s.mon_since = t.mon 
            )
        where exists (select *
                      from krm023_dedup s, open_card t
                      where p.case_sn = s.case_sn
                        and pay_code in ('C', 'D', 'E', 'F')
                        and s.case_sn = t.case_sn
               		and s.issue = t.issue 
               		and s.mon_since = t.mon 
                     )
          and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("set unsecured loan revol. amt.");

  /*----revolving: cash card ----*/
  EXEC SQL
    update pdaco_cal p
       set revolving_amt = revolving_amt +
           (select sum(loan_amt + pass_due_amt) * 1000.0
            from bam086_dedup s
            where account_code = 'Y'
              and p.case_sn = s.case_sn
            group by s.case_sn)
       where exists (select *
                     from bam086_dedup s
                     where account_code = 'Y'
                       and p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update revolving Amt.");

  /*----unsecured loan amount ----*/
  EXEC SQL
    update pdaco_cal p
       set reserve1 = reserve1 +
           (select sum(loan_amt + pass_due_amt) * 1000.0
            from bam086_dedup s
            where (account_code2='' or account_code2 is null or account_code2 ='N')
              and account_code <> 'K'
              and p.case_sn = s.case_sn
            group by s.case_sn)
       where exists (select *
                     from bam086_dedup s
                      where (account_code2='' or account_code2 is null or account_code2 ='N')
                        and account_code <> 'K'
                        and p.case_sn = s.case_sn)
         and case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update unsecured loan-2.");

  /*----age----*/
  psAge = age(sysdate, birthday);
  EXEC SQL
     update pdaco_cal
        set age = :psAge
        where case_sn = :psCase_Sn and idn = :psIdn;
  EMB_SQL_CHECK("Update age.");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");
  Debug("Exit Prescreen()");
  return 0;
} //RiskModel::Prescreen()

//--------------------------------------------------------------------------------------------------
int RiskModel::GeneratePdacoScore(char *case_sn, char *idn)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char Case_Sn[20];
     char Idn[12];
     long inx;
     char sqlStatement[512];
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  Debug("Enter GeneratePdacoScore()");
  strcpy (Case_Sn, case_sn);
  strcpy (Idn, idn);
 /*Init stm001 variables*/
  EXEC SQL
     update pdaco_cal p
        set fs031 = 0
        where exists (select *
                      from stm001_dedup s
                      where p.case_sn = s.case_sn)
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 1.");
 /*Init bam085 variables*/
  EXEC SQL
     update pdaco_cal p
        set fs051 = 0
        where exists (select *
                      from bam086_dedup s
                      where p.case_sn = s.case_sn)
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 2.");
 /*Init krm023 variables*/
  EXEC SQL
     update pdaco_cal p
        set fs102_3m =  0,
            fs102_6m =  0,
            fs102_9m =  0,
            fs005_1k_3m =  0,
            fs059_1k_3m =  0,
            fs059_1k_6m =  0,
            fs059_1k_9m =  0,
            fs014_9m =  0,
            fs016_3m =  0,
            fs101_3m =  0,
            fs101_9m =  0,
            ms117_6m =  0
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn)
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 3.");

  /* ft102_42_r_tran3	持有之信用額度數 (Line > $100k) */
  EXEC SQL
     update pdaco_cal p
        set fs102_3m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since <  now
               and mon_since >= now - 3
               and cast(limit as int) > 100
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since <  now
                        and mon_since >= now - 3
                        and cast(limit as int) > 100
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 4.");

  EXEC SQL
     update pdaco_cal p
        set fs102_6m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since <  now
               and mon_since >= now - 6
               and cast(limit as int) > 100
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since <  now
                        and mon_since >= now - 6
                        and cast(limit as int) > 100
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 5.");

  EXEC SQL
     update pdaco_cal p
        set fs102_9m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since <  now
               and mon_since >= now - 9
               and cast(limit as int) > 100
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since <  now
                        and mon_since >= now - 9
                        and cast(limit as int) > 100
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 6.");

  /*JCIC查詢次數within 4 month from the inquiry date (Credit Card ), no "15 day rule"*/
  EXEC SQL
     update pdaco_cal p
        set fs031 =
            (select count(*)
             from stm001_dedup s
             where p.case_sn = s.case_sn
               and (item_list is not null or ltrim(rtrim(item_list)) != '')
               and query_mon_since >= now - 3
            )
        where exists (select *
                      from stm001_dedup s
                      where p.case_sn = s.case_sn
                        and (item_list is not null or ltrim(rtrim(item_list)) != '')
                        and query_mon_since >= now - 3
                     )
          and case_sn = :Case_Sn and idn = :Idn;

  EMB_SQL_CHECK("PDACO Update 7.");

  /* fs005_1k_3m	有延遲繳款月數 (M2+) - Pay code in ('F') */
  EXEC SQL
     update pdaco_cal p
        set fs005_1k_3m =
            (select count(*)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 3
               and bucket_f_1k >= 2
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 3
                        and bucket_f_1k >= 2
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 8.");

  /* sex_tran	gender */
  EXEC SQL
     update pdaco_cal
        set sex = cast(substr(idn, 2, 1) as int)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 9.");

  /* app_last_month_bucket_tran	last month max among all lines */
  EXEC SQL
     update pdaco_cal p
        set app_last_month_bucket =
            (select max(bucket_ef_1k)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 1
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 1
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 10.");

  /* ft059_1k_43_r_tran	有延遲繳款額度數 (M1+) - Pay code in ('E','F') */
  /* ft059_1k_42_q_tran	有延遲繳款額度數 (M1+) - Pay code in ('E','F') */
  EXEC SQL
     update pdaco_cal p
        set fs059_1k_3m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 3
               and bucket_ef_1k >= 1
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 3
                        and bucket_ef_1k >= 1
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 11.");

  EXEC SQL
     update pdaco_cal p
        set fs059_1k_6m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 6
               and bucket_ef_1k >= 1
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 6
                        and bucket_ef_1k >= 1
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 12.");

  EXEC SQL
     update pdaco_cal p
        set fs059_1k_9m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 9
               and bucket_ef_1k >= 1
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 9
                        and bucket_ef_1k >= 1
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 13.");

  /* fs051_tran	週轉金貸款筆數 */
  EXEC SQL
     update pdaco_cal p
        set fs051 =
            (select count(*)
             from bam086_dedup s
             where p.case_sn = s.case_sn
               and purpose_code = '4'
            )
        where exists (select *
                      from bam086_dedup s
                      where p.case_sn = s.case_sn
                        and purpose_code = '4'
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 14.");

  /* int015_3m_tran	ever 預借現金額度數(FS016) / 持有之信用額度數(FS101) */
  EXEC SQL
     update pdaco_cal p
        set fs016_3m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 3
               and cash = 'Y'
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 3
                        and cash = 'Y'
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 15.");

  EXEC SQL
     update pdaco_cal p
        set fs101_3m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 3
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 3
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 16.");

  /* ms117_6m	最低循環百分比 (Min of all line)paycode CD */
  EXEC SQL
     update pdaco_cal p
        set ms117_6m =
            (select min(payment_amt/cast(limit as decimal(16,8)))
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since >= now - 6
               and mon_since < now     /*keep 15-day rule*/
               and pay_code in ('C', 'D')
                and cast(limit as int) <> 0
             group by s.case_sn
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since >= now - 6
                        and mon_since < now     /*keep 15-day rule*/
                        and pay_code in ('C', 'D')
                         and cast(limit as int) <> 0
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 17.");

  /* int028_9_tran	刷卡並付清額度數(Paycode A,B, FS014)/FS101 持有之信用額度數 (All opened) */
  EXEC SQL
     update pdaco_cal p
        set fs014_9m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since <  now
               and mon_since >= now - 9
               and pay_code in ('A', 'B')
             group by s.case_sn
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since <  now
                        and mon_since >= now - 9
                        and pay_code in ('A', 'B')
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 18.");

  EXEC SQL
     update pdaco_cal p
        set fs101_9m =
            (select count(distinct issue)
             from krm023_dedup s
             where p.case_sn = s.case_sn
               and mon_since <  now
               and mon_since >= now - 9
            )
        where exists (select *
                      from krm023_dedup s
                      where p.case_sn = s.case_sn
                        and mon_since <  now
                        and mon_since >= now - 9
                     )
          and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 19.");


/*---open_card and open_line contain months which should have transaction records based on
     krm001, open_line contains one record for each credit line each month. One-card-one-line
     issuers, i.e. 021(Citi) is processed seperately.  The other two one-card-one-line issuers,
     i.e. 081(HSBC) ,974(AIG), for their KRM023 data are consolidated, are treated as
     multi-card-one-line issers---*/

  EXEC SQL delete from open_card where case_sn = :Case_Sn;
  EMB_SQL_CHECK("delete open_card.");

  strcpy (sqlStatement,
         "insert into open_card (case_sn, issue, mon, now) "
         "   select case_sn, "
         "          (case when card_brand = 'A' and issue = 'A82' then 'AEA' "
         "                else issue end), "
         "          (now - ?), "
         "          now "
         "   from krm001_dedup "
         "   where (end_mon_since > (now - ?)) "
         "     and (start_mon_since <= (now - ?)) "
         "     and case_sn = ? and idn = ? "
         "     and issue != '021'");
  EXEC SQL PREPARE stmt1 FROM :sqlStatement;

  inx = 0;
  while (inx <= 13){
     EXEC SQL EXECUTE stmt1 USING :inx, :inx, :inx, :Case_Sn, :Idn;
     inx++;
     EMB_SQL_CHECK("PDACO Update 20.");
  }

  strcpy (sqlStatement,
         "insert into open_card (case_sn, issue, mon, now) "
         "   select case_sn, "
         "          (case when card_brand = 'M' then 'CTM' "
         "                when card_brand = 'V' then 'CTV' "
         "                when card_brand = 'D' then 'CTD' end), "
         "          (now - ?), "
         "          now "
         "   from krm001_dedup "
         "   where (end_mon_since > (now - ?)) "
         "     and (start_mon_since <= (now - ?)) "
         "     and case_sn = ? and idn = ? "
         "     and issue = '021'");
  EXEC SQL PREPARE stmt2 FROM :sqlStatement;

  inx = 0;
  while (inx <= 13) {
     EXEC SQL EXECUTE stmt2 USING :inx, :inx, :inx, :Case_Sn, :Idn;
     inx++;
     EMB_SQL_CHECK("PDACO Update 21.");
  }

  EXEC SQL
     insert into open_line (case_sn, issue, mon, now, cards)
        select case_sn, issue, mon, now, count(*)
        from open_card
        where case_sn = :Case_Sn
        group by case_sn, issue, mon, now;
  EMB_SQL_CHECK("PDACO Update 22.");

  EXEC SQL
     update open_line
        set bucket = 1
        where case_sn = :Case_Sn;
  EMB_SQL_CHECK("PDACO Update 23.");

 /*arbitrary number, just to make sure it will out-of-range*/
  EXEC SQL
     update open_line
        set bucket = 100
        where mon = (now - 13)
          and case_sn = :Case_Sn;
  EMB_SQL_CHECK("PDACO Update 24.");

  strcpy (sqlStatement,
         "update open_line p "
         "   set bucket = "
         "       (select s.bucket + 1 "
         "        from open_line s "
         "        where s.case_sn = p.case_sn "
         "          and s.issue = p.issue "
         "          and s.mon = (p.mon - 1)) "
         "   where (p.now - p.mon) = ? "
         "     and case_sn = ? "
         "     and exists (select * "
         "                 from open_line s "
         "                 where s.case_sn = p.case_sn "
         "                   and s.issue = p.issue "
         "                   and s.mon = (p.mon - 1)) ");
    EXEC SQL PREPARE stmt3 FROM :sqlStatement;
  inx = 13;
  while (inx >= 0) {
     EXEC SQL EXECUTE stmt3 USING :inx, :Case_Sn;
     inx--;
     EMB_SQL_CHECK("PDACO Update 25.");
  }

  EXEC SQL
     insert into latest_stmt_mon (case_sn, issue, mon)
        select case_sn, issue, max(mon)
        from open_line
        where mon <= now
          and case_sn = :Case_Sn
        group by case_sn, issue;
  EMB_SQL_CHECK("PDACO Update 26.");

  EXEC SQL
     insert into latest_line (case_sn, issue, mon, mob)
        select a.case_sn, a.issue, a.mon, a.bucket
        from open_line as a inner join latest_stmt_mon as b
          on a.case_sn = b.case_sn
         and a.issue = b.issue
         and a.case_sn = :Case_Sn
         and a.mon = b.mon;
  EMB_SQL_CHECK("PDACO Update 27.");


 //Init krm001 and krm023 variables
  EXEC SQL
     update pdaco_cal p
     set fs205_1k_3m = 0,
         fs212_1k_3m = 0,
         fs212_1k_6m = 0
     where exists (select *
                   from krm001_dedup as a, krm023_dedup as b
                   where a.case_sn = b.case_sn
                     and a.case_sn = p.case_sn
                     and ((a.issue = b.issue)
                           or ((a.issue = '021' and a.card_brand = 'V') and (b.issue = 'CTV'))
                           or ((a.issue = '021' and a.card_brand = 'M') and (b.issue = 'CTM'))
                           or ((a.issue = '021' and a.card_brand = 'D') and (b.issue = 'CTD'))
                           or ((a.issue = 'A82' and a.card_brand = 'A') and (b.issue = 'AEA'))
                         )
                   )
       and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 28.");

  // fs205_1k_3m_q_tran	 of delinquent lines opened less than a year
  EXEC SQL
    update pdaco_cal p
       set fs205_1k_3m =
          (select count(*)
           from krm023_dedup s
           where p.case_sn = s.case_sn
             and issue in (select issue from latest_line
                           where mob <= 12 and case_sn = s.case_sn)
              and pay_code in ('C', 'D', 'E', 'F')
              and payment_amt > 1
              and (s.now - mon_since) <= 3
           group by case_sn
          )
       where exists (select *
                     from krm023_dedup s
                     where p.case_sn = s.case_sn
                       and issue in (select issue from latest_line
                                     where mob <= 12 and case_sn = s.case_sn)
                       and pay_code in ('C', 'D', 'E', 'F')
                       and payment_amt > 1
                       and (s.now - mon_since) <= 3
                    )
         and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 29.");

  // ft212_1k_43_q_tran2	monthly average  of delinqunt lines that are opened less than 6 months
  EXEC SQL delete from t1 where case_sn = :Case_Sn;
  EMB_SQL_CHECK("delete t1.");

  EXEC SQL
     insert into t1(case_sn, mon, deliquent_line)
        select a.case_sn, (a.now -a.mon_since) , count(*) as deliquent_line
        from krm023_dedup as a
        where issue in (select issue from latest_line
                        where  (mon - mob + 1) >=  (a.now - 6) and case_sn = a.case_sn)
          and pay_code in ('C', 'D', 'E', 'F')
          and payment_amt > 1
          and case_sn = :Case_Sn and idn = :Idn
        group by a.case_sn, (a.now - a.mon_since);
  EMB_SQL_CHECK("PDACO Update 31.");

  EXEC SQL
    update pdaco_cal p
       set fs212_1k_3m =
           (select avg(cast(deliquent_line as float))
            from t1 s
            where p.case_sn = s.case_sn
              and mon <=  3
              and mon > 0
           )
       where exists (select *
                     from t1 s
                     where p.case_sn = s.case_sn
                       and mon <=  3
                       and mon > 0
                    )
         and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 32.");

  EXEC SQL
    update pdaco_cal p
       set fs212_1k_6m =
           (select avg(cast(deliquent_line as float))
            from t1 s
            where p.case_sn = s.case_sn
              and mon <= 6
              and mon > 0
           )
       where exists (select *
                     from t1 s
                     where p.case_sn = s.case_sn
                       and mon <= 6
                       and mon > 0
                    )
         and case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 33.");

  EXEC SQL
     update pdaco_cal
        set ft102_42 = fs102_3m - (fs102_9m - fs102_6m),
            int015_3 = (case when fs101_3m = 0 then null else fs016_3m / fs101_3m end),
            ft059_1k_43 = fs059_1k_3m - (fs059_1k_6m - fs059_1k_3m),
            ft059_1k_42 = fs059_1k_3m - (fs059_1k_9m - fs059_1k_6m),
            ft212_1k_43 = fs212_1k_3m - (fs212_1k_6m - fs212_1k_3m),
            int028_9 = (case when fs101_9m = 0 then null else fs014_9m / fs101_9m end)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 34.");

  EXEC SQL
     update pdaco_cal
        set ft059_1k_43_r = power((case when ft059_1k_43 < 0 then null else ft059_1k_43 end), 0.5),
            ft059_1k_42_q = power (ft059_1k_42, 2),
            ft102_42_r = power((case when ft102_42 < 0 then null else ft102_42 end), 0.5),
            ft212_1k_43_q = power (ft212_1k_43, 2),
            fs205_1k_3m_q = power (fs205_1k_3m, 2)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 35.");

  EXEC SQL
     update pdaco_cal
        set int015_3_tran = (case when int015_3 is null then 1
           			    when int015_3 > 1 then 1
           			    else int015_3 end),
            ft102_42_r_tran = (case when ft102_42_r is null then -0.2
           			    when ft102_42_r > 1.7 then 1.7
           			    else ft102_42_r end),
            ft212_1k_43_q_tran = (case when ft212_1k_43_q is null then 0
           			    else ft212_1k_43_q end),
            ft059_1k_42_q_tran = (case when ft059_1k_42_q > 16 then 16
           			       else ft059_1k_42_q end),
            fs031_tran = (case when fs031 is null then -1
           		       when fs031 > 9 then 9
           		       else fs031 end),
            sex_tran = (case when sex = 1 then 1 else 0 end),
            app_last_month_bucket_tran = (case when app_last_month_bucket is null then 1
           			    when app_last_month_bucket > 2 then 2
           			    else app_last_month_bucket end),
            fs205_1k_3m_q_tran = (case when fs205_1k_3m_q is null then 0
           		       when fs205_1k_3m_q > 60 then 60
           		       else fs205_1k_3m_q end),
            int028_9_tran = (case when int028_9 is null then 0.3
           		       when int028_9 > 0.3 then 0.3
           		       else int028_9 end),
            ft059_1k_43_r_tran = (case when ft059_1k_43_r is null then 1
           			       else ft059_1k_43_r end),
            fs051_tran = (case when fs051 is null then 2
           		       else fs051 end)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 36.");

  EXEC SQL
     update pdaco_cal
        set pdaco_score= 0.01474		+
     	     int015_3_tran		*	0.04190 +
     	     ft059_1k_42_q_tran		*	0.00964 +
     	     ft212_1k_43_q_tran		*	0.01186 +
     	     ft102_42_r_tran		*	-0.02683 +
     	     fs031_tran			*	0.00573 +
     	     ms117_6m			*	0.04292 +
     	     fs005_1k_3m		*	0.12726 +
     	     sex_tran 			*	0.02654 +
     	     app_last_month_bucket_tran	*	0.05866 +
     	     fs205_1k_3m_q_tran		*	0.00058973 +
     	     int028_9_tran		*	-0.08045 +
     	     ft059_1k_43_r_tran		*	0.01873 +
     	     fs051_tran 		*	0.00345
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 37.");

  EXEC SQL
     update pdaco_cal
        set pdaco_twen = (case
                         when pdaco_score is null then 0
                         when pdaco_score <= -0.03231 then 1
                         when pdaco_score <= -0.02275 then 2
                         when pdaco_score <= -0.01479 then 3
                         when pdaco_score <= -0.00919 then 4
                         when pdaco_score <= -0.00438 then 5
                         when pdaco_score <= 0.00101 then 6
                         when pdaco_score <= 0.00624 then 7
                         when pdaco_score <= 0.01245 then 8
                         when pdaco_score <= 0.01836 then 9
                         when pdaco_score <= 0.02482 then 10
                         when pdaco_score <= 0.03219 then 11
                         when pdaco_score <= 0.03963 then 12
                         when pdaco_score <= 0.04759 then 13
                         when pdaco_score <= 0.05585 then 14
                         when pdaco_score <= 0.06657 then 15
                         when pdaco_score <= 0.07865 then 16
                         when pdaco_score <= 0.09435 then 17
                         when pdaco_score <= 0.11509 then 18
                         when pdaco_score <= 0.15002 then 19
                         else 20
       		  end)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 38.");

  EXEC SQL
     update pdaco_cal
        set pb_in = (case
                when pdaco_twen = 0  then NULL
                when pdaco_twen = 1  then 0.0070
                when pdaco_twen = 2  then 0.0080
                when pdaco_twen = 3  then 0.0095
                when pdaco_twen = 4  then 0.0105
                when pdaco_twen = 5  then 0.0120
                when pdaco_twen = 6  then 0.0135
                when pdaco_twen = 7  then 0.0155
                when pdaco_twen = 8  then 0.0175
                when pdaco_twen = 9  then 0.0205
                when pdaco_twen = 10 then 0.0235
                when pdaco_twen = 11 then 0.0265
                when pdaco_twen = 12 then 0.0300
                when pdaco_twen = 13 then 0.0340
                when pdaco_twen = 14 then 0.0385
                when pdaco_twen = 15 then 0.0430
                when pdaco_twen = 16 then 0.0500
                when pdaco_twen = 17 then 0.0640
                when pdaco_twen = 18 then 0.0885
                when pdaco_twen = 19 then 0.1190
                when pdaco_twen = 20 then 0.1800
     	     end)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 39.");
/* CPDACO risk cut
  EXEC SQL
     update pdaco_cal
        set pb_in = (case
                         when pdaco_score is null then null
                         when pdaco_score <= -0.00621522  then 0.004562704
                         when pdaco_score <= -0.001009662 then 0.006140593
                         when pdaco_score <= 0.001661431  then 0.007727602
                         when pdaco_score <= 0.003672767  then 0.009314611
                         when pdaco_score <= 0.005406452  then 0.01090162 
                         when pdaco_score <= 0.006956731  then 0.012488629
                         when pdaco_score <= 0.008616099  then 0.014075638
                         when pdaco_score <= 0.01005993   then 0.015662647
                         when pdaco_score <= 0.01182176   then 0.017240535
                         when pdaco_score <= 0.014149998  then 0.018818423
                         when pdaco_score <= 0.01637437   then 0.020405433
                         when pdaco_score <= 0.018207536  then 0.021992443
                         when pdaco_score <= 0.020087056  then 0.023579457
                         when pdaco_score <= 0.022556754  then 0.025166476
                         when pdaco_score <= 0.025161819  then 0.02675351 
                         when pdaco_score <= 0.027390837  then 0.028340575
                         when pdaco_score <= 0.030538321  then 0.029918579
                         when pdaco_score <= 0.033389349  then 0.031496699
                         when pdaco_score <= 0.036961351  then 0.033084157
                         when pdaco_score <= 0.040306407  then 0.034672004
                         when pdaco_score <= 0.044399737  then 0.036260526
                         when pdaco_score <= 0.047908209  then 0.037850192
                         when pdaco_score <= 0.051501968  then 0.039441745
                         when pdaco_score <= 0.05588873   then 0.041036345
                         when pdaco_score <= 0.059827042  then 0.042626543
                         when pdaco_score <= 0.064407195  then 0.044224122
                         when pdaco_score <= 0.06853882   then 0.045842239
                         when pdaco_score <= 0.073968267  then 0.047477361
                         when pdaco_score <= 0.077801493  then 0.04913762 
                         when pdaco_score <= 0.082523698  then 0.050834516
                         when pdaco_score <= 0.088149201  then 0.052584132
                         when pdaco_score <= 0.093330226  then 0.054408696
                         when pdaco_score <= 0.099120815  then 0.056338609
                         when pdaco_score <= 0.104723079  then 0.058402403
                         when pdaco_score <= 0.110613911  then 0.060665649
                         when pdaco_score <= 0.117144868  then 0.063215417
                         when pdaco_score <= 0.124374245  then 0.066136073
                         when pdaco_score <= 0.13164627   then 0.069554095
                         when pdaco_score <= 0.138717125  then 0.073633831
                         when pdaco_score <= 0.146798664  then 0.078587362
                         when pdaco_score <= 0.157061821  then 0.084686557
                         when pdaco_score <= 0.169866044  then 0.092227255
                         when pdaco_score <= 0.181624254  then 0.101677155
                         when pdaco_score <= 0.194927745  then 0.113649567
                         when pdaco_score <= 0.211271879  then 0.128787542
                         when pdaco_score <= 0.22924248   then 0.147950603
                         when pdaco_score <= 0.253771993  then 0.172204432
                         when pdaco_score <= 0.290467428  then 0.202864093
                         when pdaco_score <= 0.357710055  then 0.241545083
                         else 0.290223394
       		  end)
        where case_sn = :Case_Sn and idn = :Idn;
  EMB_SQL_CHECK("PDACO Update 40.");
*/
//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");
  Debug("Exit GeneratePdacoScore()");
  return 0;
} //RiskModel::GeneratePdacoSore()

//--------------------------------------------------------------------------------------------------
int RiskModel::CleanTables(char *case_sn, char *idn)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char delCase_Sn[20];
     char delIdn[12];
  EXEC SQL END DECLARE SECTION;

  struct sqlca sqlca;

  Debug("Enter CleanTables()");

  strcpy (delCase_Sn, case_sn);
  strcpy (delIdn, idn);
  Info("Case_sn= %s.\n", delCase_Sn);
  Info("IDN= %s.\n", delIdn);
  EXEC SQL delete from krm001_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete krm001_dedup");
  EXEC SQL delete from krm023_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete krm023_dedup");
  EXEC SQL delete from krm037_convert where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete krm037_convert");
  EXEC SQL delete from krm037_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete krm037_dedup");
  EXEC SQL delete from bam086_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete bam086_dedup");
  EXEC SQL delete from bam086_bucket where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete bam086_bucket");
  EXEC SQL delete from bam087_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete bam087_dedup");
  EXEC SQL delete from stm001_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete stm001_dedup");
  EXEC SQL delete from jas002_t_dedup where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete jas002_t_dedup");
  EXEC SQL delete from jas002_t where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete jas002_t");
  EXEC SQL delete from pdaco_cal where case_sn= :delCase_Sn and idn = :delIdn;
  EMB_SQL_CHECK("delete pdaco_cal");
  EXEC SQL delete from open_card where case_sn= :delCase_Sn;
  EMB_SQL_CHECK("delete open_card");
  EXEC SQL delete from open_line where case_sn= :delCase_Sn;
  EMB_SQL_CHECK("delete open_line");
  EXEC SQL delete from latest_line where case_sn= :delCase_Sn;
  EMB_SQL_CHECK("delete latest_line");
  EXEC SQL delete from latest_stmt_mon where case_sn= :delCase_Sn;
  EMB_SQL_CHECK("delete latest_stmt_mon");
  EXEC SQL delete from t1 where case_sn = :delCase_Sn;
  EMB_SQL_CHECK("delete t1.");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit CleanTables()");
  return 0;
} //RiskModel::CleanTables()

//--------------------------------------------------------------------------------------------------
int RiskModel::SaveScore(char *case_sn, char *idn)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char ssCase_Sn[20];
     char ssIdn[12];
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  Debug("Enter SaveScore()");

  strcpy (ssCase_Sn, case_sn);
  strcpy (ssIdn, idn);
  EXEC SQL
  insert into pdaco_result(
     case_sn, idn, inquiry_date, now, age, jas002_defect, krm001_hit, krm023_hit, max_bucket,
     fs044, fs334, cash_max_bucket, cash_utilization, ind001, revolving_amt, fs102_3m, fs102_6m, fs102_9m, ft102_42,
     ft102_42_r, ft102_42_r_tran, fs031, fs031_tran, fs005_1k_3m, fs005_1k_3m_q, fs005_1k_3m_q_tran,
     fs059_1k_3m, fs059_1k_6m, fs059_1k_9m, ft059_1k_43, ft059_1k_43_r, ft059_1k_43_r_tran,
     ft059_1k_42, ft059_1k_42_q, ft059_1k_42_q_tran, fs051, fs051_tran, fs016_3m, fs101_3m, int015_3,
     int015_3_tran, fs205_1k_3m, fs205_1k_3m_q, fs205_1k_3m_q_tran, fs212_1k_3m, fs212_1k_6m,
     ft212_1k_43, ft212_1k_43_q, ft212_1k_43_q_tran, ms117_6m, fs014_9m, fs101_9m,
     int028_9, int028_9_tran, sex, sex_tran, app_last_month_bucket, app_last_month_bucket_tran,
     pdaco_score, pdaco_twen, pb_in, ps_code, ps_msg, cut, reserve1)
  select
     case_sn, idn, inquiry_date, now, age, jas002_defect, krm001_hit, krm023_hit, max_bucket,
     fs044, fs334, cash_max_bucket, cash_utilization, ind001, revolving_amt, fs102_3m, fs102_6m, fs102_9m, ft102_42,
     ft102_42_r, ft102_42_r_tran, fs031, fs031_tran, fs005_1k_3m, fs005_1k_3m_q, fs005_1k_3m_q_tran,
     fs059_1k_3m, fs059_1k_6m, fs059_1k_9m, ft059_1k_43, ft059_1k_43_r, ft059_1k_43_r_tran,
     ft059_1k_42, ft059_1k_42_q, ft059_1k_42_q_tran, fs051, fs051_tran, fs016_3m, fs101_3m, int015_3,
     int015_3_tran, fs205_1k_3m, fs205_1k_3m_q, fs205_1k_3m_q_tran, fs212_1k_3m, fs212_1k_6m,
     ft212_1k_43, ft212_1k_43_q, ft212_1k_43_q_tran, ms117_6m, fs014_9m, fs101_9m,
     int028_9, int028_9_tran, sex, sex_tran, app_last_month_bucket, app_last_month_bucket_tran,
     pdaco_score, pdaco_twen, pb_in, ps_code, ps_msg, cut, reserve1
  from pdaco_cal
  where case_sn = :ssCase_Sn and idn = :ssIdn;
  EMB_SQL_CHECK("Save result");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit SaveScore()");
  return 0;
} //RiskModel::SaveScore()

//--------------------------------------------------------------------------------------------------
int RiskModel::Calculate_PB(char *case_sn, char *idn, char *birthday, char *sysdate)
{
  struct sqlca sqlca;
  int rc = 0;

  Debug("Enter Calculate_PB()");

  rc = CleanTables(case_sn, idn);
  if (rc != 0)  return rc;

  // Calculate PB of an applicant or a guarantor
  rc = PrepareJcicTables(case_sn, idn);
  if (rc != 0)  return rc;

  rc = GenerateScreenVars(case_sn, idn, birthday, sysdate);
  if (rc != 0)  return rc;

  rc = Prescreen(case_sn, idn);

  if (rc != 0) {
#ifdef TRACE
     if (trace) SaveScore(case_sn, idn);
#endif
     return rc;
  }
  rc = GeneratePdacoScore(case_sn, idn);
  if (rc != 0)  return rc;

#ifdef TRACE
  if (trace) SaveScore(case_sn, idn);
#endif

//  rc = CleanTables(case_sn, idn);
//  if (rc != 0)  return rc;

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit Calculate_PB()");
  return 0;
} //RiskModel::Calculate_PB()

//--------------------------------------------------------------------------------------------------
int RiskModel::get_pb(char *case_sn, char *idn, float *pb)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char pbCase_Sn[20];
     char pbIdn[12];
     float pbPB;
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  strcpy (pbCase_Sn, case_sn);
  strcpy (pbIdn, idn);

  EXEC SQL
     select pb_in
        into :pbPB
        from pdaco_cal
        where case_sn = :pbCase_Sn and idn = :pbIdn;
  EMB_SQL_CHECK("Select PB.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "申貸編號不存在於 PDACO_CAL");
     return(sqlca.sqlcode);
  }
  *pb = pbPB;
  return(0);

} //RiskModel::get_pb()

//--------------------------------------------------------------------------------------------------
int RiskModel::get_prescreen_status (char *case_sn, char *idn, int *code, char *msg, int *unsecured_bal)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char sCase_Sn[20];
     char sIdn[12];
     long PS_code;
     char PS_msg[257];
     long Unsecured_loan;
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  strcpy (sCase_Sn, case_sn);
  strcpy (sIdn, idn);

  EXEC SQL
     select ps_code, ps_msg, reserve1
        into :PS_code, :PS_msg, :Unsecured_loan
        from pdaco_cal
        where case_sn = :sCase_Sn and idn = :sIdn;
  EMB_SQL_CHECK("Select Prescreen Status.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "申貸編號不存在於 PDACO_CAL");
     return(sqlca.sqlcode);
  }
  *code = PS_code;
  *unsecured_bal = Unsecured_loan;
  strcpy (msg, PS_msg);
  return(0);

} //RiskModel::get_prescreen_status()
/*
int RiskModel::set_birthday(char *case_sn, char *idn, char *date)
{
  EXEC SQL BEGIN DECLARE SECTION;
     char sbCase_Sn[20];
     char sbIdn[12];
     char sbDate[10];
  EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;

  strcpy (sbCase_Sn, case_sn);
  strcpy (sbIdn, idn);
  strcpy (sbDate, date);

  EXEC SQL
     update pdaco_cal
        set inquiry_date = :sbDate
        where case_sn = :sbCase_Sn and idn = :sbIdn;
  EMB_SQL_CHECK("Set Birthday.");

  return(0);

} //RiskModel::set_birthday()
*/
