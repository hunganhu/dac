/****************************************************************************
** Licensed Materials - Property of DAC
**
** (C) COPYRIGHT Decision Analytics Consulting 2005
** All Rights Reserved.
**
*****************************************************************************
** SOURCE FILE NAME: LoanApp.sqC
**
**
****************************************************************************/
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std;
#else
   #include <iostream.h>
#endif
#include "loan_app.h"
#include "error.h"
#include "functions.h"

extern char MESSAGE[1024];
Invalid_Msg tcbMsg[] = {
	{1001, "申請人姓名需填寫 "},
	{1002, "申請人生日需填寫 "},
	{1003, "無效的生日 "},
	{1004, "申請人所得需填寫 "},
	{1005, "申請人所得超出999萬 "},
	{1006, "申請人現址已居住年數需填寫 "},
	{1007, "申請人現址已居住年數超出99年 "},
	{1008, "車籍資料(年份)大於輸入日期 "},
	{1009, "申請人服務年資需填寫 "},
	{1010, "申請人服務年資超出99年 "},
	{1011, "利率 (第一期)需填寫 "},
	{1012, "利率 (第一期)超出12% "},
	{1013, "利率 (第二期)超出12% "},
	{1014, "利率 (第三期)超出12% "},
	{1015, "貸款期數 (第一期)需填寫 "},
	{1016, "貸款期數 (第一期)需大於 0 "},
	{1017, "貸款期數 (第一期)超出84個月 "},
	{1018, "貸款期數 (第二期)超出84個月 "},
	{1019, "貸款期數 (第三期)超出84個月 "},
	{1020, "貸款期數一、二、三，加起來需>=6個月 "},
	{1021, "貸款期數一、二、三，加起來需<=84個月 "},
	{1022, "寬限期需填寫 "},
	{1023, "寬限期超出24個月 "},
	{1024, "寬限期大於總期數 "},
	{1025, "申貸金額需填寫 "},
	{1026, "申貸金額超出200萬 "},
	{1027, "開辦費 (金額) 超出台幣99,999元 "},
	{1028, "開辦費 (百分比) 超出100% "},
	{1101, "申貸編號不存在於APP_INFO "},
	{1102, "申貸編號不存在於APP_RESULT "},
	{1103, "撥貸金額必須大於零 "},
	{1104, "最終准駁 / 撥款決定需輸入 "},
	{1105, "撥款帳號需輸入 "}   
};
char *decisionMsg[] = {
/*Type I message*/
"申請日為 %s，模組審核之申貸金額為新台幣 %d 萬元，最近一個月無擔保循環金額為新台幣 %d 元，模組預估每年轉壞帳之機率為 %5.2f%%，建議核准。",
/*Type II message*/
"申請日為 %s，模組審核之申貸金額為新台幣 %d 萬元，最近一個月無擔保循環金額為新台幣 %d 元，模組預估每年轉壞帳之機率為 %5.2f%%，建議婉拒。",
/*Type III message*/
"申請日為 %s，模組審核之申貸金額為新台幣 %d 萬元，最近一個月無擔保循環金額為新台幣 %d 元，因已超出新台幣80萬元門檻，且無(或無合格)保人，"
"所以僅提供模組PB參考，請人工授信。模組預估每年轉壞帳之機率為 %5.2f%%。",
/*Type IV message*/
"申請日為 %s，模組審核之申貸金額為新台幣 %d 萬元，最近一個月無擔保循環金額為新台幣 %d 元，因已超出新台幣160萬元門檻，所以僅提供模組PB參考，"
"請人工授信。模組預估每年轉壞帳之機率為 %5.2f%%。",
/*Type V message*/
"申請日為 %s，模組審核之申貸金額為新台幣 %d 萬元，最近一個月無擔保循環金額為新台幣 %d 元，模組預估每年轉壞帳之機率為 %5.2f%%。"
};

int decisionCode[] = {
/*Type I Code*/
1,
/*Type II Code*/
2,
/*Type III Code*/
3,
/*Type IV Code*/
4,
/*Type V Code*/
5
};
//--------------------------------------------------------------------------------------------------
LoanApp::LoanApp(char *caseSN)
{
 strcpy (case_sn, caseSN);
}

int LoanApp::initial()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*app_info fields*/
    char iCase_Sn[20];
    char iApplicant_Id[12];
    char iGuarantor_Id[12];
    char iApplicant_name[31];
    char iSystem_date[8];
    long iLoan_purpose;
    long iEducation;
    char iBirthday[8];
    long iMarriage_status;
    long iAnnual_Income;
    long iHome_ownership;
    long iYear_at_current_address;
    long iYear_at_current_job;
    long iCar_year;
    long iProduct_type_code;
    long iApp_amt;
    long iTerm_1;
    long iTerm_2;
    long iTerm_3;
    double iAPR_1;
    double iAPR_2;
    double iAPR_3;
    long iGrace_period;
    long iFee_1;
    double iFee_2;

    /*indicators*/
    short GID_ind;
    short App_name_ind;
    short Loan_purpose_ind;
    short Education_ind;
    short Birthday_ind;
    short Marriage_status_ind;
    short Annual_Income_ind;
    short Home_ownership_ind;
    short Year_at_current_address_ind;
    short Year_at_current_job_ind;
    short Car_year_ind;
    short Product_type_code_ind;
    short App_amt_ind;
    short Term_1_ind;
    short Term_2_ind;
    short Term_3_ind;
    short APR_1_ind;
    short APR_2_ind;
    short APR_3_ind;
    short Grace_period_ind;
    short Fee_1_ind;
    short Fee_2_ind;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code = 0;       // initial to a success status
  int term_code = -1; // initial to a failed status
     
  strcpy (iCase_Sn, case_sn);
  Debug("Enter LoanApp.initial()");

  EXEC SQL
     select System_date, Applicant_ID, Guarantor_ID, Applicant_name, Loan_purpose, education, Birthday, Marriage_status, Car_year,
            Annual_Income, Home_ownership, Year_at_current_address, Year_at_current_job,
            Product_type_code, App_amt, Term_1, Term_2, Term_3, APR_1, APR_2, APR_3, grace_period,
            Fee_1, Fee_2
     into :iSystem_date, :iApplicant_Id, :iGuarantor_Id:GID_ind, :iApplicant_name:App_name_ind, :iLoan_purpose:Loan_purpose_ind, :iEducation:Education_ind,
          :iBirthday:Birthday_ind, :iMarriage_status:Marriage_status_ind, :iCar_year:Car_year_ind,
          :iAnnual_Income:Annual_Income_ind, :iHome_ownership:Home_ownership_ind,
          :iYear_at_current_address:Year_at_current_address_ind, :iYear_at_current_job:Year_at_current_job_ind,
          :iProduct_type_code:Product_type_code_ind, :iApp_amt:App_amt_ind, :iTerm_1:Term_1_ind,
          :iTerm_2:Term_2_ind, :iTerm_3:Term_3_ind, :iAPR_1:APR_1_ind, :iAPR_2:APR_2_ind, :iAPR_3:APR_3_ind,
          :iGrace_period:Grace_period_ind, :iFee_1:Fee_1_ind, :iFee_2:Fee_2_ind
     from  app_info
     where case_sn = :iCase_Sn;
  EMB_SQL_CHECK("Select appInfo.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, DataErrorMsg(EXIST_ERR_1101));
     return(DataErrorCode(EXIST_ERR_1101));
  }
  strcpy (aID, iApplicant_Id);
  strcpy (System_date, iSystem_date);
//  printf("system_date=%s.\n", System_date);
  if (GID_ind == -1) strcpy(gID, "");
  else strcpy (gID, iGuarantor_Id);
  Info("Guarantor ID=%s.\n", gID);
  
  if (App_name_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1001)); code = DataErrorCode(DATA_ERR_1001);}
  else strcpy (aName, iApplicant_name);
/*
  // check loan purpose in 1: 其他家計週轉金; 2: 消費性支出
  if (Loan_purpose_ind == -1) Loan_purpose = -1;
  else {
     Loan_purpose = iLoan_purpose;
     if ((Loan_purpose_ind == -1) || (Loan_purpose < 1) || (Loan_purpose > 2)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1029)); code = DataErrorCode(DATA_ERR_1029);}
  }   
  // check education in "1: 研究所以上 2: 大學 3: 專科 4: 高中職 5: 中學以下 6: 其他"
  if (Education_ind == -1) Education = -1;
  else {
     Education = iEducation;
     if ((Education_ind == -1) || (Education < 1) || (Education > 6)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1030)); code = DataErrorCode(DATA_ERR_1030);}
  }
*/
  // check birthday 民國 yyymmdd
  if (Birthday_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}
  else {
     strcpy (Birthday, iBirthday);
     if (!validate_date(Birthday) || is_future(System_date, Birthday)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1003)); code = DataErrorCode(DATA_ERR_1003);}
  }
/*
  // check marrage status "1: 已婚 2: 其他"
  if (Marriage_status_ind == -1) Marriage_status = -1;
  else {
     Marriage_status = iMarriage_status;
     if ((Marriage_status_ind == -1) || (Marriage_status < 1) || (Marriage_status > 2)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1031)); code = DataErrorCode(DATA_ERR_1031);}
  }
*/
  // check annual income 新台幣萬元，最多三位數 (999)
  if (Annual_Income_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1004)); code = DataErrorCode(DATA_ERR_1004);}
  else {
     Annual_Income = iAnnual_Income;
     if ((Annual_Income < 0) || (Annual_Income > 9990000)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1005)); code = DataErrorCode(DATA_ERR_1005);}
  }
/*
  // check Home_ownership  "1: 自有(無設定) 2: 自有(設定予本行) 3: 自有(設定予他行) 4: 親屬所有
  // 5: 宿舍 6: 租賃 7: 其他"
  if (Home_ownership_ind == -1) Home_ownership = -1;
  else Home_ownership = iHome_ownership;

  if ((Home_ownership == -1) || (Home_ownership < 1) || (Home_ownership > 7)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1032)); code = DataErrorCode(DATA_ERR_1032);}
*/  
  // check Year_at_current_address現址已居住年數 最多二位數 (99)
  if (Year_at_current_address_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1006)); code = DataErrorCode(DATA_ERR_1006);}
  else {
     Year_at_current_address = iYear_at_current_address;
     if ((Year_at_current_address < 0) || (Year_at_current_address > 99)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1007)); code = DataErrorCode(DATA_ERR_1007);}
  }
  // check Year_at_current_job 服務年資 最多二位數 (99)
  if (Year_at_current_job_ind == -1)  {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1009)); code = DataErrorCode(DATA_ERR_1009);}
  else {
     Year_at_current_job = iYear_at_current_job;
     if ((Year_at_current_job < 0) || (Year_at_current_job > 99)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1010)); code = DataErrorCode(DATA_ERR_1010);}
  }
     
  // check car year 民國 (1 ~ 999)
  if (Car_year_ind == -1) Car_year = 0;
  else Car_year = iCar_year;

  if (is_future_year(System_date, Car_year)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1008)); code = DataErrorCode(DATA_ERR_1008);}

  // check product_type_code "1: 簡易小額信貸 2: 個人信貸產品A 3: 個人信貸產品B 4: 其他(只算壞帳機率)"
  if (Product_type_code_ind == -1) Product_type_code = 4;
  else Product_type_code = iProduct_type_code;

//  if ((Product_type_code == -1) || (Product_type_code < 1) || (Product_type_code > 4)) {
//     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1033)); code = DataErrorCode(DATA_ERR_1033);}

  
  // check apr_1, 0~12, 6.99% as 6.99   
  if (APR_1_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1011)); code = DataErrorCode(DATA_ERR_1011);}
  else {
     APR_1 = iAPR_1 / 100.0;
     if ( (APR_1 < 0.0) || (APR_1 > 0.12) ) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1012)); code = DataErrorCode(DATA_ERR_1012);}
  }

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_2_ind == -1) APR_2 = 0.0;
  else APR_2 = iAPR_2 / 100.0;

  if ((APR_2 < 0.0) || (APR_2 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1013)); code = DataErrorCode(DATA_ERR_1013);}

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_3_ind == -1) APR_3 = 0.0;
  else APR_3 = iAPR_3 / 100.0;

  if ((APR_3 < 0.0) || (APR_3 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1014)); code = DataErrorCode(DATA_ERR_1014);}

  max_apr = ((APR_1 ) > (APR_2) ? (APR_1) : (APR_2));
  max_apr = ((max_apr) > (APR_3) ? (max_apr) : (APR_3));

  // check term_1  1~84，月
  if (Term_1_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1015)); code = DataErrorCode(DATA_ERR_1015);}
  else {
     term_code = 0;
     Term_1 = iTerm_1;
     if (Term_1 < 1) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1016));
        term_code = code = DataErrorCode(DATA_ERR_1016);
     }
     if (Term_1 > 84) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1017));
        term_code = code = DataErrorCode(DATA_ERR_1017);
     }

     // check term_2  0~84，月
     if (Term_2_ind == -1) Term_2 = 0;
     else Term_2 = iTerm_2;
     if ((Term_2 < 0) || (Term_2 > 84)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1018));
        term_code = code = DataErrorCode(DATA_ERR_1018);
     }
   
     // check term_3  0~84，月 (期數一、二、三，加起來需>=6 & <=84)
     if (Term_3_ind == -1) Term_3 = 0;
     else Term_3 = iTerm_3;
     if ((Term_3 < 0) || (Term_3 > 84)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1019));
        term_code = code = DataErrorCode(DATA_ERR_1019);
     }
     if (term_code == 0) {
        periods = Term_1 + Term_2 + Term_3;
        if (periods < 6) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1020)); code = DataErrorCode(DATA_ERR_1020);}
        if (periods > 84) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1021)); code = DataErrorCode(DATA_ERR_1021);}
     }   
  }

 // check grace period  <= 24
  if (Grace_period_ind == -1)  {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1022)); code = DataErrorCode(DATA_ERR_1022);}
  else {
     Grace_period = iGrace_period;
     if (term_code == 0) {
        if ((Grace_period < 0) || (Grace_period >24)) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1023)); code = DataErrorCode(DATA_ERR_1023);}
        if (Grace_period > periods) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1024)); code = DataErrorCode(DATA_ERR_1024);}
     }
  }

  // check apply amount 0~200，新台幣萬元
  if (App_amt_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1025)); code = DataErrorCode(DATA_ERR_1025);}
  else {
     App_amt = iApp_amt;  
     if ((App_amt < 0) || (App_amt > 2000000)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1026)); code = DataErrorCode(DATA_ERR_1026);}
  }
  //check Fee_1 開辦費 (金額) 新台幣元，最多五位數
  if (Fee_1_ind == -1) Fee_1 = 0;
  else Fee_1 = iFee_1;

  if (Fee_1  >= 100000) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1027)); code = DataErrorCode(DATA_ERR_1027);}

  //check Fee_2 開辦費 (百分比) <= 100%
  if (Fee_2_ind == -1) Fee_2 = 0.0;
  else Fee_2 = iFee_2 / 100.0;

  if (Fee_2 > 1.0) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1028)); code = DataErrorCode(DATA_ERR_1028);}

  Debug("Exit LoanApp.initial()");
  return(code);
}

//--------------------------------------------------------------------------------------------------
LoanApp::~LoanApp()
{
}

//--------------------------------------------------------------------------------------------------
char * LoanApp::Applicant_id()
{
 return(aID);
}

//--------------------------------------------------------------------------------------------------
char * LoanApp::Guarantor_id()
{
 return(gID);
}

//--------------------------------------------------------------------------------------------------
int LoanApp::get_fin_info()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*Financial fields*/
    double iFund_deposit_pct;
    double iFund_bank_pct;
    double iFund_self_pct;
    double iFund_free_pct;
    double iCOF_deposit;
    double iCOF_bank;
    double iROE;
    double iCommission;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code;

  Debug("Enter LoanApp.get_fin_info()");

  EXEC SQL
     select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit,
            COF_bank, ROE, Commission
     into :iFund_deposit_pct, :iFund_bank_pct, :iFund_self_pct, :iFund_free_pct, :iCOF_deposit,
          :iCOF_bank, :iROE, :iCommission
     from  TCB_FIN_INFO;
  EMB_SQL_CHECK("Select TCB_FIN_INFO .");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "TCB_FIN_INFO 無資料");
     return(EXIST_ERR_1101);
  }

  Fund_deposit_pct = iFund_deposit_pct;
  Fund_bank_pct    = iFund_bank_pct;
  Fund_self_pct    = iFund_self_pct;
  Fund_free_pct    = iFund_free_pct;
  COF_deposit      = iCOF_deposit;
  COF_bank         = iCOF_bank;
  ROE              = iROE;
  Commission       = iCommission;

  Debug("Exit LoanApp.get_fin_info()");
  return (0);
} //LoanApp::get_fin_info()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_loan_info()
{
  EXEC SQL BEGIN DECLARE SECTION;
    char lCase_Sn[20];
    /*Final loan fields*/
    char iSystem_date_final[8];
    char iSystem_time_final[7];
    long iApproval_final;
    char iAccount_No[21];
    char iOpen_date[8];
    long iLoan_amt;
    double iLoan_APR;
    long iLoan_term;
    long iFee_1_final;
    double iFee_2_final;

    short System_date_final_ind;
    short System_time_final_ind;
    short Approval_final_ind;
    short Account_No_ind;
    short Open_date_ind;
    short Loan_amt_ind;
    short Loan_APR_ind;
    short Loan_term_ind;
    short Fee_1_final_ind;
    short Fee_2_final_ind;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code = 0;

  Debug("Enter LoanApp.get_loan_info()");
  strcpy (lCase_Sn, case_sn);

  EXEC SQL
     select System_date_final, System_time_final, Approval_final, Account_No,
            Open_date, Loan_amt, Loan_APR, Loan_term, Fee_1, Fee_2
     into :iSystem_date_final:System_date_final_ind, :iSystem_time_final:System_time_final_ind,
          :iApproval_final:Approval_final_ind, :iAccount_No:Account_No_ind,
          :iOpen_date:Open_date_ind, :iLoan_amt:Loan_amt_ind, :iLoan_APR:Loan_APR_ind,
          :iLoan_term:Loan_term_ind, :iFee_1_final:Fee_1_final_ind, :iFee_2_final:Fee_2_final_ind
     from  app_info
     where case_sn = :lCase_Sn;
  EMB_SQL_CHECK("Select appInfo.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, DataErrorMsg(EXIST_ERR_1101));
     return(DataErrorCode(EXIST_ERR_1101));
  }

  if (System_date_final_ind == -1) strcpy(System_date_final, "");
  else strcpy (System_date_final, iSystem_date_final);
//  printf ("System_date_final=%s.\n", System_date_final);
    
  if (System_time_final_ind == -1) strcpy(System_time_final, "");
  else strcpy (System_time_final, iSystem_time_final);
//  printf ("System_time_final=%s.\n", System_time_final);
  
  if (Approval_final_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1104)); code = DataErrorCode(EXIST_ERR_1104);}
  else Approval_final = iApproval_final;
//  if (code == 0) printf ("Approval_final=%d.\n", Approval_final);

  if (Account_No_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1105)); code = DataErrorCode(EXIST_ERR_1105);}
  else strcpy(Account_No, iAccount_No);
//  if (code == 0) printf ("Account_No=%s.\n", Account_No);

  if (Loan_amt_ind == -1) Loan_amt = 0;
  else Loan_amt = iLoan_amt;
  if (Loan_amt <= 0) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1103)); code = DataErrorCode(EXIST_ERR_1103);}
     
//  printf ("Loan_amt=%d.\n", Loan_amt);
//  printf ("code=%d, msg=%s.\n", code, MESSAGE);
  Debug("Exit LoanApp.get_loan_info()");
  return (code);
}//LoanApp::get_loan_info()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_applicant_pb(double pb)
{
 applicantPB = pb;
} //LoanApp::set_applicant_pb()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_guarantor_pb(double pb)
{
 guarantorPB = pb;
} //LoanApp::set_guarantor_pb()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_applicant_pb_adj(double pb)
{
 applicantPB_adjust = pb;
} //LoanApp::set_applicant_pb_adj()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_guarantor_pass(int flag)
{
 Guarantor_pass = flag;
} //LoanApp::set_guarantor_pass()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_cutpoint(double cut)
{
 cutpoint = cut;
} //LoanApp::set_guarantor_pass()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_ps_status_a(int code, char *msg)
{
 ps_code_a = code;
 strcpy (ps_msg_a, msg);
} //LoanApp::set_ps_status_a()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_ps_status_g(int code, char *msg)
{
 ps_code_g = code;
 strcpy (ps_msg_g, msg);
} //LoanApp::set_ps_status_g()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_product_type()
{
 return(Product_type_code);
} //LoanApp::get_product_type()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_apply_amount()
{
 return(App_amt);
} //LoanApp::get_apply_amount()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_periods()
{
 return(periods);
} //LoanApp::get_periods()

//--------------------------------------------------------------------------------------------------
double LoanApp::get_max_apr()
{
 return(max_apr);
} //LoanApp::get_max_apr()

//--------------------------------------------------------------------------------------------------
char * LoanApp::get_birthday()
{
 return (Birthday);
} //LoanApp::get_birthday()

//--------------------------------------------------------------------------------------------------
char * LoanApp::get_sysdate()
{
 return (System_date);
} //LoanApp::get_sysdate()
//--------------------------------------------------------------------------------------------------
  EXEC SQL BEGIN DECLARE SECTION;
    /*app_result fields*/
    char  oCase_SN[13];
    char  osystem_time[14];
    double oApplicant_PB;
    double oGuarantor_PB;
    double oApplicant_PB_adj;
    long  oNPV;
    long  oPS_code;
    char  oPS_msg[257];
    long  oPS_code_g;
    char  oPS_msg_g[257];
    long  oGuarantor_pass;
    long  oApproval_code;
    char  oApproval_msg[513];
    double oLowest_Rate_1;
    double oLowest_Rate_2;
    double oLowest_Rate_3;
    double oCut;
 EXEC SQL END DECLARE SECTION;

//--------------------------------------------------------------------------------------------------
int LoanApp::update_final_npv()
{
  struct sqlca sqlca;
  
  Debug("Enter LoanApp.update_final_npv()");

  strcpy(oCase_SN, case_sn);
// check if case_sn exist in the table app_result
  EXEC SQL
     update app_info
        set NPV_final=16888
        where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update NPV.");

  Debug("Exit LoanApp.update_final_npv()");
  return (0);
} //LoanApp::update_final_npv()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_result_prescreen_failed()
{
  struct sqlca sqlca;
  
  Debug("Enter LoanApp.write_result_prescreen_failed()");

  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
//  oCut = cutpoint;
// check if case_sn exist in the table app_result
  EXEC SQL
     select case_sn from app_result where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Write Result1.");
  if (sqlca.sqlcode != 100) { // case_sn exists in app_result, use update command
     EXEC SQL delete from  app_result where case_sn = :oCase_SN;
     EMB_SQL_CHECK("Delete PS failure..");
  }

  EXEC SQL
     insert into app_result(Case_SN, system_time, PS_code, PS_msg, Fund_deposit_pct,
                 Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                 Commission, Approval_code, Approval_msg) 
        values (:oCase_SN, :osystem_time, :oPS_code, :oPS_msg,
                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                 :oPS_code, :oPS_msg);
  EMB_SQL_CHECK("Write PS failure.");

  EXEC SQL
     update  app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from  TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_prescreen_failed()");
  return (0);
} //LoanApp::write_result_prescreen_failed()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_result(int decision, int revolving_amt)
{
  struct sqlca sqlca;

  Debug("Enter LoanApp.write_result()");
  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oApplicant_PB = applicantPB;
  oApplicant_PB_adj = applicantPB_adjust;
//  oNPV = 0;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oGuarantor_pass = Guarantor_pass;
  oApproval_code = decisionCode[decision];
  sprintf(oApproval_msg, decisionMsg[decision], System_date, App_amt/10000, revolving_amt, applicantPB_adjust*100);
//  oCut = cutpoint;

// check if case_sn exist in the table app_result
  EXEC SQL
     select case_sn from app_result where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Write Result1.");
  if (sqlca.sqlcode != 100) { // case_sn exists in app_result, use update command
     EXEC SQL delete from  app_result where case_sn = :oCase_SN;
     EMB_SQL_CHECK("Delete Result.");
  }

  if (gID[0] != '\0' && gID[0] != ' ') {
     oPS_code_g = ps_code_g;
     strcpy(oPS_msg_g, ps_msg_g);  
     if (oPS_code_g == 0) {
        oGuarantor_PB = guarantorPB;
        EXEC SQL
           insert into  app_result(Case_SN, system_time, Applicant_PB, Guarantor_PB, Applicant_PB_adj,
                       PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                       Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                       Commission, Approval_code, Approval_msg) 
              values (:oCase_SN, :osystem_time, :oApplicant_PB, :oGuarantor_PB, :oApplicant_PB_adj,
                      :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      :oApproval_code, :oApproval_msg);
        EMB_SQL_CHECK("Write Result1.");
     }
     else {
        EXEC SQL
           insert into  app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                       PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                       Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                       Commission, Approval_code, Approval_msg) 
              values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                      :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,
                      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                      :oApproval_code, :oApproval_msg);
        EMB_SQL_CHECK("Write Result2.");
     } 
  }   
  else {
     EXEC SQL
        insert into  app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                    PS_code, PS_msg, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, Approval_msg) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                    :oPS_code, :oPS_msg, :oGuarantor_pass,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    :oApproval_code, :oApproval_msg);
     EMB_SQL_CHECK("Write Result3.");
  }

  EXEC SQL
     update  app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from  TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result()");
  return (0);
} //LoanApp::write_result()

//--------------------------------------------------------------------------------------------------
