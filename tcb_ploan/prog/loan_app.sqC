/****************************************************************************
** Licensed Materials - Property of DAC
**
** (C) COPYRIGHT Decision Analytics Consulting 2005
** All Rights Reserved.
**
*****************************************************************************
** SOURCE FILE NAME: LoanApp.sqC
**
**
****************************************************************************/
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   #include <fstream>
   #include <string>
   #include <iomanip>
   using namespace std; 
#else
   #include <iostream.h>
   #include <fstream.h>
   #include <string.h>
   #include <iomanip.h>
#endif
#include "loan_app.h"
#include "error.h"
#include "attrition.h"
#include "functions.h"
#include "financial.h"
#include <math.h>
#ifdef TRACE
#define trace 1
#else
#define trace 0
#endif

extern char MESSAGE[1024];
Invalid_Msg tcbMsg[] = {
	{1001, "申請人姓名需填寫 "},
	{1002, "申請人生日需填寫 "},
	{1003, "無效的生日 "},
	{1004, "申請人所得需填寫 "},
	{1005, "申請人所得超出999萬 "},
	{1006, "申請人現址已居住年數需填寫 "},
	{1007, "申請人現址已居住年數超出99年 "},
	{1008, "車籍資料(年份)大於輸入日期 "},
	{1009, "申請人服務年資需填寫 "},
	{1010, "申請人服務年資超出99年 "},
	{1011, "利率 (第一期)需填寫 "},
	{1012, "利率 (第一期)超出12% "},
	{1013, "利率 (第二期)超出12% "},
	{1014, "利率 (第三期)超出12% "},
	{1015, "貸款期數 (第一期)需填寫 "},
	{1016, "貸款期數 (第一期)需大於 0 "},
	{1017, "貸款期數 (第一期)超出84個月 "},
	{1018, "貸款期數 (第二期)超出84個月 "},
	{1019, "貸款期數 (第三期)超出84個月 "},
	{1020, "貸款期數一、二、三，加起來需>=6個月 "},
	{1021, "貸款期數一、二、三，加起來需<=84個月 "},
	{1022, "寬限期需填寫 "},
	{1023, "寬限期超出24個月 "},
	{1024, "寬限期大於總期數 "},
	{1025, "申貸金額需填寫 "},
	{1026, "申貸金額超出200萬 "},
	{1027, "開辦費 (金額) 超出台幣99,999元 "},
	{1028, "開辦費 (百分比) 超出100% "},
	{1101, "申貸編號不存在於APP_INFO "},
	{1102, "申貸編號不存在於APP_RESULT "},
	{1103, "撥貸金額必須大於零 "},
	{1104, "最終准駁 / 撥款決定需輸入 "},
	{1105, "撥款帳號需輸入 "}   
};
char *decisionMsg[] = {
/*
//Type I message//
"模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%，經濟價值為 %d 元，"
"建議核准。%s。(申請日為 %s，申貸戶最近一個月聯徵紀錄顯示之總無擔保放款餘額為新台幣 %5.1f 萬元)",
//Type II message//
"模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%，經濟價值為 %d 元，"
"初評未達核准標準。%s。(申請日為 %s，申貸戶最近一個月聯徵紀錄顯示之總無擔保放款餘額為新台幣 %5.1f 萬元)",
//Type III message//
"模組審核之申貸金額為新台幣 %d 萬元，因已超出新台幣80萬元門檻，且無(或無合格)保人，"
"所以僅提供模組PB參考，請人工授信。模組預估每年轉壞帳之機率為 %5.2f%%。"
"(申請日為 %s，申貸戶最近一個月聯徵紀錄顯示之總無擔保放款餘額為新台幣 %5.1f 萬元)",
//Type IV message//
"模組審核之申貸金額為新台幣 %d 萬元，因已超出新台幣160萬元門檻，所以僅提供模組PB參考，"
"請人工授信。模組預估每年轉壞帳之機率為 %5.2f%%。"
"(申請日為 %s，申貸戶最近一個月聯徵紀錄顯示之總無擔保放款餘額為新台幣 %5.1f 萬元)",
//Type V message//
"模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%。"
"(申請日為 %s，申貸戶最近一個月聯徵紀錄顯示之總無擔保放款餘額為新台幣 %5.1f 萬元)"
*/

/*Type I message*/
"%s 申請，建議核准(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%，經濟價值為 %d 元。"
"%s。",
/*Type II message*/
"%s 申請，初評未達核准標準(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%，經濟價值為 %d 元。"
"%s。",
/*Type III message*/
"%s 申請，請人工授信(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，模組審核之申貸金額為新台幣 %d 萬元，因已超出新台幣80萬元門檻，且無(或無合格)保人，"
"所以僅提供模組PB參考，模組預估每年轉壞帳之機率為 %5.2f%%。",
/*Type IV message*/
"%s 申請，請人工授信(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，模組審核之申貸金額為新台幣 %d 萬元，因已超出新台幣160萬元門檻，所以僅提供模組PB參考，"
"模組預估每年轉壞帳之機率為 %5.2f%%。",
/*Type V message*/
"%s 申請(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，模組審核之申貸金額為新台幣 %d 萬元，模組預估每年轉壞帳之機率為 %5.2f%%。"
};

int decisionCode[] = {
/*Type I Code*/
1,
/*Type II Code*/
2,
/*Type III Code*/
3,
/*Type IV Code*/
4,
/*Type V Code*/
5
};
//--------------------------------------------------------------------------------------------------
LoanApp::LoanApp(char *caseSN)
{
 strcpy (case_sn, caseSN);
}

int LoanApp::initial()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*app_info fields*/
    char iCase_Sn[20];
    char iApplicant_Id[12];
    char iGuarantor_Id[12];
    char iApplicant_name[31];
    char iSystem_date[8];
    long iLoan_purpose;
    long iEducation;
    char iBirthday[8];
    long iMarriage_status;
    long iAnnual_Income;
    long iHome_ownership;
    long iYear_at_current_address;
    long iYear_at_current_job;
    long iCar_year;
    long iProduct_type_code;
    long iApp_amt;
    long iTerm_1;
    long iTerm_2;
    long iTerm_3;
    float iAPR_1;
    float iAPR_2;
    float iAPR_3;
    long iGrace_period;
    long iFee_1;
    double iFee_2;

    /*indicators*/
    short GID_ind;
    short App_name_ind;
    short Loan_purpose_ind;
    short Education_ind;
    short Birthday_ind;
    short Marriage_status_ind;
    short Annual_Income_ind;
    short Home_ownership_ind;
    short Year_at_current_address_ind;
    short Year_at_current_job_ind;
    short Car_year_ind;
    short Product_type_code_ind;
    short App_amt_ind;
    short Term_1_ind;
    short Term_2_ind;
    short Term_3_ind;
    short APR_1_ind;
    short APR_2_ind;
    short APR_3_ind;
    short Grace_period_ind;
    short Fee_1_ind;
    short Fee_2_ind;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code = 0;       // initial to a success status
  int term_code = -1; // initial to a failed status
     
  strcpy (iCase_Sn, case_sn);
  Debug("Enter LoanApp.initial()");

  EXEC SQL
     select System_date, Applicant_ID, Guarantor_ID, Applicant_name, Loan_purpose, education, Birthday, Marriage_status, Car_year,
            Annual_Income, Home_ownership, Year_at_current_address, Year_at_current_job,
            Product_type_code, App_amt, Term_1, Term_2, Term_3, APR_1, APR_2, APR_3, grace_period,
            Fee_1, Fee_2
     into :iSystem_date, :iApplicant_Id, :iGuarantor_Id:GID_ind, :iApplicant_name:App_name_ind, :iLoan_purpose:Loan_purpose_ind, :iEducation:Education_ind,
          :iBirthday:Birthday_ind, :iMarriage_status:Marriage_status_ind, :iCar_year:Car_year_ind,
          :iAnnual_Income:Annual_Income_ind, :iHome_ownership:Home_ownership_ind,
          :iYear_at_current_address:Year_at_current_address_ind, :iYear_at_current_job:Year_at_current_job_ind,
          :iProduct_type_code:Product_type_code_ind, :iApp_amt:App_amt_ind, :iTerm_1:Term_1_ind,
          :iTerm_2:Term_2_ind, :iTerm_3:Term_3_ind, :iAPR_1:APR_1_ind, :iAPR_2:APR_2_ind, :iAPR_3:APR_3_ind,
          :iGrace_period:Grace_period_ind, :iFee_1:Fee_1_ind, :iFee_2:Fee_2_ind
     from  app_info
     where case_sn = :iCase_Sn;
  EMB_SQL_CHECK("Select appInfo.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, DataErrorMsg(EXIST_ERR_1101));
     return(DataErrorCode(EXIST_ERR_1101));
  }
  strcpy (aID, iApplicant_Id);
  strcpy (System_date, iSystem_date);
//  printf("system_date=%s.\n", System_date);
  if (GID_ind == -1) strcpy(gID, "");
  else strcpy (gID, iGuarantor_Id);
  Info("Guarantor ID=%s.\n", gID);
  
  if (App_name_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1001)); code = DataErrorCode(DATA_ERR_1001);}
  else strcpy (aName, iApplicant_name);
/*
  // check loan purpose in 1: 其他家計週轉金; 2: 消費性支出
  if (Loan_purpose_ind == -1) Loan_purpose = -1;
  else {
     Loan_purpose = iLoan_purpose;
     if ((Loan_purpose_ind == -1) || (Loan_purpose < 1) || (Loan_purpose > 2)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1029)); code = DataErrorCode(DATA_ERR_1029);}
  }   
  // check education in "1: 研究所以上 2: 大學 3: 專科 4: 高中職 5: 中學以下 6: 其他"
  if (Education_ind == -1) Education = -1;
  else {
     Education = iEducation;
     if ((Education_ind == -1) || (Education < 1) || (Education > 6)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1030)); code = DataErrorCode(DATA_ERR_1030);}
  }
*/
  // check birthday 民國 yyymmdd
  if (Birthday_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}
  else {
     strcpy (Birthday, iBirthday);
     if (!validate_date(Birthday) || is_future(System_date, Birthday)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1003)); code = DataErrorCode(DATA_ERR_1003);}
  }
/*
  // check marrage status "1: 已婚 2: 其他"
  if (Marriage_status_ind == -1) Marriage_status = -1;
  else {
     Marriage_status = iMarriage_status;
     if ((Marriage_status_ind == -1) || (Marriage_status < 1) || (Marriage_status > 2)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1031)); code = DataErrorCode(DATA_ERR_1031);}
  }
*/
  // check annual income 新台幣萬元，最多三位數 (999)
  if (Annual_Income_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1004)); code = DataErrorCode(DATA_ERR_1004);}
  else {
     Annual_Income = iAnnual_Income;
     if ((Annual_Income < 0) || (Annual_Income > 9990000)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1005)); code = DataErrorCode(DATA_ERR_1005);}
  }
/*
  // check Home_ownership  "1: 自有(無設定) 2: 自有(設定予本行) 3: 自有(設定予他行) 4: 親屬所有
  // 5: 宿舍 6: 租賃 7: 其他"
  if (Home_ownership_ind == -1) Home_ownership = -1;
  else Home_ownership = iHome_ownership;

  if ((Home_ownership == -1) || (Home_ownership < 1) || (Home_ownership > 7)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1032)); code = DataErrorCode(DATA_ERR_1032);}
*/  
  // check Year_at_current_address現址已居住年數 最多二位數 (99)
  if (Year_at_current_address_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1006)); code = DataErrorCode(DATA_ERR_1006);}
  else {
     Year_at_current_address = iYear_at_current_address;
     if ((Year_at_current_address < 0) || (Year_at_current_address > 99)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1007)); code = DataErrorCode(DATA_ERR_1007);}
  }
  // check Year_at_current_job 服務年資 最多二位數 (99)
  if (Year_at_current_job_ind == -1)  {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1009)); code = DataErrorCode(DATA_ERR_1009);}
  else {
     Year_at_current_job = iYear_at_current_job;
     if ((Year_at_current_job < 0) || (Year_at_current_job > 99)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1010)); code = DataErrorCode(DATA_ERR_1010);}
  }
     
  // check car year 民國 (1 ~ 999)
  if (Car_year_ind == -1) Car_year = 0;
  else Car_year = iCar_year;

  if (is_future_year(System_date, Car_year)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1008)); code = DataErrorCode(DATA_ERR_1008);}

  // check product_type_code "1:簡易小額信貸 2:公教人員貸款 3:U利貸款 4:農家樂貸款 5:其他(只算壞帳機率)"
  if (Product_type_code_ind == -1) Product_type_code = 5;
  else Product_type_code = iProduct_type_code;

//  if ((Product_type_code == -1) || (Product_type_code < 1) || (Product_type_code > 4)) {
//     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1033)); code = DataErrorCode(DATA_ERR_1033);}

  
  // check apr_1, 0~12, 6.99% as 6.99   
  if (APR_1_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1011)); code = DataErrorCode(DATA_ERR_1011);}
  else {
     APR_1 = iAPR_1 / 100.0;
     if ( (APR_1 < 0.0) || (APR_1 > 0.12) ) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1012)); code = DataErrorCode(DATA_ERR_1012);}
  }

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_2_ind == -1) APR_2 = 0.0;
  else APR_2 = iAPR_2 / 100.0;

  if ((APR_2 < 0.0) || (APR_2 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1013)); code = DataErrorCode(DATA_ERR_1013);}

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_3_ind == -1) APR_3 = 0.0;
  else APR_3 = iAPR_3 / 100.0;

  if ((APR_3 < 0.0) || (APR_3 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1014)); code = DataErrorCode(DATA_ERR_1014);}

  max_apr = ((APR_1 ) > (APR_2) ? (APR_1) : (APR_2));
  max_apr = ((max_apr) > (APR_3) ? (max_apr) : (APR_3));

  // check term_1  1~84，月
  if (Term_1_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1015)); code = DataErrorCode(DATA_ERR_1015);}
  else {
     term_code = 0;
     Term_1 = iTerm_1;
     if (Term_1 < 1) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1016));
        term_code = code = DataErrorCode(DATA_ERR_1016);
     }
     if (Term_1 > 84) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1017));
        term_code = code = DataErrorCode(DATA_ERR_1017);
     }

     // check term_2  0~84，月
     if (Term_2_ind == -1) Term_2 = 0;
     else Term_2 = iTerm_2;
     if ((Term_2 < 0) || (Term_2 > 84)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1018));
        term_code = code = DataErrorCode(DATA_ERR_1018);
     }
   
     // check term_3  0~84，月 (期數一、二、三，加起來需>=6 & <=84)
     if (Term_3_ind == -1) Term_3 = 0;
     else Term_3 = iTerm_3;
     if ((Term_3 < 0) || (Term_3 > 84)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1019));
        term_code = code = DataErrorCode(DATA_ERR_1019);
     }
     if (term_code == 0) {
        periods = Term_1 + Term_2 + Term_3;
        if (periods < 6) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1020)); code = DataErrorCode(DATA_ERR_1020);}
        if (periods > 84) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1021)); code = DataErrorCode(DATA_ERR_1021);}
     }   
  }

 // check grace period  <= 24
  if (Grace_period_ind == -1)  {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1022)); code = DataErrorCode(DATA_ERR_1022);}
  else {
     Grace_period = iGrace_period;
     if (term_code == 0) {
        if ((Grace_period < 0) || (Grace_period >24)) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1023)); code = DataErrorCode(DATA_ERR_1023);}
        if (Grace_period > periods) {
           strcat(MESSAGE, DataErrorMsg(DATA_ERR_1024)); code = DataErrorCode(DATA_ERR_1024);}
     }
  }

  // check apply amount 0~200，新台幣萬元
  if (App_amt_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1025)); code = DataErrorCode(DATA_ERR_1025);}
  else {
     App_amt = iApp_amt;  
     if ((App_amt < 0) || (App_amt > 2000000)) {
        strcat(MESSAGE, DataErrorMsg(DATA_ERR_1026)); code = DataErrorCode(DATA_ERR_1026);}
  }
  //check Fee_1 開辦費 (金額) 新台幣元，最多五位數
  if (Fee_1_ind == -1) Fee_1 = 0;
  else Fee_1 = iFee_1;

  if (Fee_1  >= 100000) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1027)); code = DataErrorCode(DATA_ERR_1027);}

  //check Fee_2 開辦費 (百分比) <= 100%
  if (Fee_2_ind == -1) Fee_2 = 0.0;
  else Fee_2 = iFee_2 / 100.0;

  if (Fee_2 > 1.0) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1028)); code = DataErrorCode(DATA_ERR_1028);}

  Debug("Exit LoanApp.initial()");
  return(code);
}

//--------------------------------------------------------------------------------------------------
LoanApp::~LoanApp()
{
}

//--------------------------------------------------------------------------------------------------
char * LoanApp::Applicant_id()
{
 return(aID);
}

//--------------------------------------------------------------------------------------------------
char * LoanApp::Guarantor_id()
{
 return(gID);
}

//--------------------------------------------------------------------------------------------------
int LoanApp::get_fin_info()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*Financial fields*/
    float iFund_deposit_pct;
    float iFund_bank_pct;
    float iFund_self_pct;
    float iFund_free_pct;
    float iCOF_deposit;
    float iCOF_bank;
    float iROE;
    float iCommission;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code;

  Debug("Enter LoanApp.get_fin_info()");

  EXEC SQL
     select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit,
            COF_bank, ROE, Commission
     into :iFund_deposit_pct, :iFund_bank_pct, :iFund_self_pct, :iFund_free_pct, :iCOF_deposit,
          :iCOF_bank, :iROE, :iCommission
     from  TCB_FIN_INFO;
  EMB_SQL_CHECK("Select TCB_FIN_INFO .");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "TCB_FIN_INFO 無資料");
     return(EXIST_ERR_1101);
  }

  Fund_deposit_pct = iFund_deposit_pct / 100.0;
  Fund_bank_pct    = iFund_bank_pct / 100.0;
  Fund_self_pct    = iFund_self_pct / 100.0;
  Fund_free_pct    = iFund_free_pct / 100.0;
  COF_deposit      = iCOF_deposit / 100.0;
  COF_bank         = iCOF_bank / 100.0;
  ROE              = iROE / 100.0;
  Commission       = iCommission / 100.0;

  Debug("Exit LoanApp.get_fin_info()");
  return (0);
} //LoanApp::get_fin_info()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_loan_info()
{
  EXEC SQL BEGIN DECLARE SECTION;
    char lCase_Sn[20];
    /*Final loan fields*/
    char iSystem_date_final[8];
    char iSystem_time_final[7];
    long iApproval_final;
    char iAccount_No[21];
    char iOpen_date[8];
    long iLoan_amt;
    float iLoan_APR;
    long iLoan_term;
    long iFee_1_final;
    float iFee_2_final;

    short System_date_final_ind;
    short System_time_final_ind;
    short Approval_final_ind;
    short Account_No_ind;
    short Open_date_ind;
    short Loan_amt_ind;
    short Loan_APR_ind;
    short Loan_term_ind;
    short Fee_1_final_ind;
    short Fee_2_final_ind;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code = 0;

  Debug("Enter LoanApp.get_loan_info()");
  strcpy (lCase_Sn, case_sn);

  EXEC SQL
     select System_date_final, System_time_final, Approval_final, Account_No,
            Open_date, Loan_amt, Loan_APR, Loan_term, Fee_1, Fee_2
     into :iSystem_date_final:System_date_final_ind, :iSystem_time_final:System_time_final_ind,
          :iApproval_final:Approval_final_ind, :iAccount_No:Account_No_ind,
          :iOpen_date:Open_date_ind, :iLoan_amt:Loan_amt_ind, :iLoan_APR:Loan_APR_ind,
          :iLoan_term:Loan_term_ind, :iFee_1_final:Fee_1_final_ind, :iFee_2_final:Fee_2_final_ind
     from  app_info
     where case_sn = :lCase_Sn;
  EMB_SQL_CHECK("Select appInfo.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, DataErrorMsg(EXIST_ERR_1101));
     return(DataErrorCode(EXIST_ERR_1101));
  }

  if (System_date_final_ind == -1) strcpy(System_date_final, "");
  else strcpy (System_date_final, iSystem_date_final);
//  printf ("System_date_final=%s.\n", System_date_final);
    
  if (System_time_final_ind == -1) strcpy(System_time_final, "");
  else strcpy (System_time_final, iSystem_time_final);
//  printf ("System_time_final=%s.\n", System_time_final);
  
  if (Approval_final_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1104)); code = DataErrorCode(EXIST_ERR_1104);}
  else Approval_final = iApproval_final;
//  if (code == 0) printf ("Approval_final=%d.\n", Approval_final);

  if (Account_No_ind == -1) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1105)); code = DataErrorCode(EXIST_ERR_1105);}
  else strcpy(Account_No, iAccount_No);
//  if (code == 0) printf ("Account_No=%s.\n", Account_No);

  if (Loan_amt_ind == -1) Loan_amt = 0;
  else Loan_amt = iLoan_amt;
  if (Loan_amt <= 0) {
     strcat(MESSAGE, DataErrorMsg(EXIST_ERR_1103)); code = DataErrorCode(EXIST_ERR_1103);}
  App_amt = Loan_amt;   
//  printf ("Loan_amt=%d.\n", Loan_amt);
//  printf ("code=%d, msg=%s.\n", code, MESSAGE);
  Debug("Exit LoanApp.get_loan_info()");
  return (code);
}//LoanApp::get_loan_info()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_applicant_pb(double pb)
{
 applicantPB = pb;
} //LoanApp::set_applicant_pb()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_guarantor_pb(double pb)
{
 guarantorPB = pb;
} //LoanApp::set_guarantor_pb()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_applicant_pb_adj(double pb)
{
 applicantPB_adjust = pb;
} //LoanApp::set_applicant_pb_adj()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_guarantor_pass(int flag)
{
 Guarantor_pass = flag;
} //LoanApp::set_guarantor_pass()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_cutpoint(double cut)
{
 cutpoint = cut;
} //LoanApp::set_guarantor_pass()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_ps_status_a(int code, char *msg)
{
 ps_code_a = code;
 strcpy (ps_msg_a, msg);
} //LoanApp::set_ps_status_a()

//--------------------------------------------------------------------------------------------------
void LoanApp::set_ps_status_g(int code, char *msg)
{
 ps_code_g = code;
 strcpy (ps_msg_g, msg);
} //LoanApp::set_ps_status_g()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_product_type()
{
 return(Product_type_code);
} //LoanApp::get_product_type()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_apply_amount()
{
 return(App_amt);
} //LoanApp::get_apply_amount()

//--------------------------------------------------------------------------------------------------
int LoanApp::get_periods()
{
 return(periods);
} //LoanApp::get_periods()

//--------------------------------------------------------------------------------------------------
double LoanApp::get_max_apr()
{
 return(max_apr);
} //LoanApp::get_max_apr()

//--------------------------------------------------------------------------------------------------
char * LoanApp::get_birthday()
{
 return (Birthday);
} //LoanApp::get_birthday()

//--------------------------------------------------------------------------------------------------
char * LoanApp::get_sysdate()
{
 return (System_date);
} //LoanApp::get_sysdate()

//--------------------------------------------------------------------------------------------------
  EXEC SQL BEGIN DECLARE SECTION;
    /*app_result fields*/
    char  oCase_SN[13];
    char  osystem_time[14];
    float oApplicant_PB;
    float oGuarantor_PB;
    float oApplicant_PB_adj;
    long  oNPV;
    long  oPS_code;
    char  oPS_msg[257];
    long  oPS_code_g;
    char  oPS_msg_g[257];
    long  oGuarantor_pass;
    long  oApproval_code;
    char  oApproval_msg[513];
    float iApplicant_PB_adj;
    short Applicant_PB_adj_ind;

    float oFund_deposit_pct;
    float oFund_bank_pct;
    float oFund_self_pct;
    float oFund_free_pct;
    float oCOF_deposit;
    float oCOF_bank;
    float oROE;
    float oCommission;

    float oLowest_Rate_1;
    float oLowest_Rate_2;
    float oLowest_Rate_3;
    short oLowest_Rate_1_ind;
    short oLowest_Rate_2_ind;
    short oLowest_Rate_3_ind;
    double oCut;
    double oNetPresentValue;
    double oDeltaRate;
 EXEC SQL END DECLARE SECTION;

//--------------------------------------------------------------------------------------------------
int LoanApp::update_final_npv()
{
  struct sqlca sqlca;
  double npv_value;
  
  Debug("Enter LoanApp.update_final_npv()");

  strcpy(oCase_SN, case_sn);

  // get PB from app_result
  EXEC SQL
     select Applicant_PB_adj
     into :iApplicant_PB_adj:Applicant_PB_adj_ind
     from  app_result
     where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Get PB.");

  if (Applicant_PB_adj_ind == -1) return(0);    // if PB not set, we cannot calculate NPV
  else applicantPB_adjust = iApplicant_PB_adj;
  
  /* calculate NPV with no interest rate bias*/
  npv_value = calculate_npv(0.0);
  oNPV = static_cast<int>(rint(npv_value / 100) * 100);
  
// check if case_sn exist in the table app_result
  EXEC SQL
     update app_info
        set NPV_final=:oNPV
        where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update NPV.");

  Debug("Exit LoanApp.update_final_npv()");
  return (0);
} //LoanApp::update_final_npv()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_result_prescreen_failed()
{
  struct sqlca sqlca;
  char apply_date[10];
  
  Debug("Enter LoanApp.write_result_prescreen_failed()");

  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);

  strcpy(apply_date, System_date); // insert slash '/' as separator
  apply_date[3] = apply_date[6] = '/';
  apply_date[4] = System_date[3];
  apply_date[5] = System_date[4];
  apply_date[7] = System_date[5];
  apply_date[8] = System_date[6];
  apply_date[9] = '\0';

  if (ps_code_a == 3104 || ps_code_a == 3110)
     sprintf(oApproval_msg,
             "%s 申請，請人工授信(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，%s",
             apply_date, oPS_msg);
  else
     sprintf(oApproval_msg,
             "%s 申請，初評未達核准標準(請辦理第一類票據信用查詢，如有未清償註記之票據者，建議婉拒)，%s",
             apply_date, oPS_msg);

//  oCut = cutpoint;
// check if case_sn exist in the table app_result
  EXEC SQL
     select case_sn from app_result where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Write Result1.");
  if (sqlca.sqlcode != 100) { // case_sn exists in app_result, use update command
     EXEC SQL delete from  app_result where case_sn = :oCase_SN;
     EMB_SQL_CHECK("Delete PS failure..");
  }
  oFund_deposit_pct = Fund_deposit_pct * 100.0;
  oFund_bank_pct    = Fund_bank_pct * 100.0;
  oFund_self_pct    = Fund_self_pct * 100.0;
  oFund_free_pct    = Fund_free_pct * 100.0;
  oCOF_deposit      = COF_deposit * 100.0;
  oCOF_bank         = COF_bank * 100.0;
  oROE              = ROE * 100.0;
  oCommission       = Commission * 100.0;

  EXEC SQL
     insert into app_result(Case_SN, system_time, PS_code, PS_msg, Fund_deposit_pct,
                 Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                 Commission, Approval_code, Approval_msg) 
        values (:oCase_SN, :osystem_time, :oPS_code, :oPS_msg,:oFund_deposit_pct,
                :oFund_bank_pct, :oFund_self_pct, :oFund_free_pct, :oCOF_deposit, :oCOF_bank, :oROE, :oCommission,
                :oPS_code, :oApproval_msg);
  EMB_SQL_CHECK("Write PS failure.");

//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_prescreen_failed()");
  return (0);
} //LoanApp::write_result_prescreen_failed()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_result(int decision, int npv_value, int unsecured_amt)
{
  struct sqlca sqlca;
  char apply_date[10];
  char apr_msg[64], msg1[24]; 

  Debug("Enter LoanApp.write_result()");
  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oApplicant_PB = applicantPB;
  oApplicant_PB_adj = applicantPB_adjust;
  oNPV = npv_value;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oGuarantor_pass = Guarantor_pass;
  oApproval_code = decisionCode[decision];

  oFund_deposit_pct = Fund_deposit_pct * 100.0;
  oFund_bank_pct    = Fund_bank_pct * 100.0;
  oFund_self_pct    = Fund_self_pct * 100.0;
  oFund_free_pct    = Fund_free_pct * 100.0;
  oCOF_deposit      = COF_deposit * 100.0;
  oCOF_bank         = COF_bank * 100.0;
  oROE              = ROE * 100.0;
  oCommission       = Commission * 100.0;
  
  strcpy(apply_date, System_date); // insert slash '/' as separator
  apply_date[3] = apply_date[6] = '/';
  apply_date[4] = System_date[3];
  apply_date[5] = System_date[4];
  apply_date[7] = System_date[5];
  apply_date[8] = System_date[6];
  apply_date[9] = '\0';
// compose lowest interest rate message
  if (Term_1 > 0) {
     oLowest_Rate_1 = Lowest_rate_1 * 100;
     oLowest_Rate_1_ind = 0;
     sprintf(msg1, "損益兩平之參考利率為第一期：%5.2f%%", Lowest_rate_1*100);
     strcpy (apr_msg, msg1);
  }
  else 
     oLowest_Rate_1_ind = -1;
  if (Term_2 > 0) {
     oLowest_Rate_2 = Lowest_rate_2 * 100;
     oLowest_Rate_2_ind = 0;
     sprintf(msg1, "，第二期：%5.2f%%", Lowest_rate_2*100);
     strcat (apr_msg, msg1);
  }
  else 
     oLowest_Rate_2_ind = -1;
  if (Term_3 > 0) {
     oLowest_Rate_3 = Lowest_rate_3 * 100;
     oLowest_Rate_3_ind = 0;
     sprintf(msg1, "，第三期：%5.2f%%", Lowest_rate_3*100);
     strcat (apr_msg, msg1);
  }
  else 
     oLowest_Rate_3_ind = -1;
  
// write output message 
/*
  if (decision <= TYPE_II)
     sprintf(oApproval_msg, decisionMsg[decision], App_amt/10000, applicantPB_adjust*100, npv_value,
          apr_msg, apply_date, unsecured_amt /10000.0);
  else
     sprintf(oApproval_msg, decisionMsg[decision], App_amt/10000, applicantPB_adjust*100,
          apply_date, unsecured_amt /10000.0);
*/
  if (decision <= TYPE_II)
     sprintf(oApproval_msg, decisionMsg[decision], apply_date, App_amt/10000, applicantPB_adjust*100, npv_value,
          apr_msg);
  else
     sprintf(oApproval_msg, decisionMsg[decision], apply_date, App_amt/10000, applicantPB_adjust*100);
//  oCut = cutpoint;

// check if case_sn exist in the table app_result
  EXEC SQL
     select case_sn from app_result where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Write Result1.");
  if (sqlca.sqlcode != 100) { // case_sn exists in app_result, use update command
     EXEC SQL delete from  app_result where case_sn = :oCase_SN;
     EMB_SQL_CHECK("Delete Result.");
  }

  if (gID[0] != '\0' && gID[0] != ' ') { // with Guarantor
     oPS_code_g = ps_code_g;
     strcpy(oPS_msg_g, ps_msg_g);  
     if (oPS_code_g == 0) { // guarantor prescreen pass
        oGuarantor_PB = guarantorPB;
        EXEC SQL
           insert into  app_result(Case_SN, system_time, Applicant_PB, Guarantor_PB, Applicant_PB_adj,
                       NPV, PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                       Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                       Commission, Approval_code, Approval_msg, Lowest_Rate_1, Lowest_Rate_2, Lowest_Rate_3) 
              values (:oCase_SN, :osystem_time, :oApplicant_PB, :oGuarantor_PB, :oApplicant_PB_adj,
                      :oNPV, :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,:oFund_deposit_pct,
                      :oFund_bank_pct, :oFund_self_pct, :oFund_free_pct, :oCOF_deposit, :oCOF_bank, :oROE, :oCommission,
                      :oApproval_code, :oApproval_msg, :oLowest_Rate_1:oLowest_Rate_1_ind,
                      :oLowest_Rate_2:oLowest_Rate_2_ind, :oLowest_Rate_3:oLowest_Rate_3_ind);
        EMB_SQL_CHECK("Write Result1.");
     }
     else {  // guarantor prescreen fails
        EXEC SQL
           insert into  app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                       NPV, PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                       Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                       Commission, Approval_code, Approval_msg, Lowest_Rate_1, Lowest_Rate_2, Lowest_Rate_3) 
              values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                      :oNPV, :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,:oFund_deposit_pct,
                      :oFund_bank_pct, :oFund_self_pct, :oFund_free_pct, :oCOF_deposit, :oCOF_bank, :oROE, :oCommission,
                      :oApproval_code, :oApproval_msg, :oLowest_Rate_1:oLowest_Rate_1_ind,
                      :oLowest_Rate_2:oLowest_Rate_2_ind, :oLowest_Rate_3:oLowest_Rate_3_ind);
        EMB_SQL_CHECK("Write Result2.");
     } 
  }   
  else { // No guarantor
     EXEC SQL
        insert into  app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                    NPV, PS_code, PS_msg, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, Approval_msg, Lowest_Rate_1, Lowest_Rate_2, Lowest_Rate_3) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                    :oNPV, :oPS_code, :oPS_msg, :oGuarantor_pass,:oFund_deposit_pct,
                    :oFund_bank_pct, :oFund_self_pct, :oFund_free_pct, :oCOF_deposit, :oCOF_bank, :oROE, :oCommission,
                    :oApproval_code, :oApproval_msg, :oLowest_Rate_1:oLowest_Rate_1_ind,
                      :oLowest_Rate_2:oLowest_Rate_2_ind, :oLowest_Rate_3:oLowest_Rate_3_ind);
     EMB_SQL_CHECK("Write Result3.");
  }
/*
  EXEC SQL
     update  app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from  TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");
*/
//  EXEC SQL COMMIT;
//  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result()");
  return (0);
} //LoanApp::write_result()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_npv(double npv)
{
  struct sqlca sqlca;
  
  Debug("Enter LoanApp.write_npv()");

  strcpy(oCase_SN, case_sn);
  oNetPresentValue = npv;
  EXEC SQL
     update  pdaco_cal
        set npv = :oNetPresentValue
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update NPV.");


  Debug("Exit LoanApp.write_npv()");
  return (0);
} //LoanApp::LoanApp.write_npv()

//--------------------------------------------------------------------------------------------------
int LoanApp::write_delta_rate(double lowest_delta, double npv)
{
  struct sqlca sqlca;
  
  Debug("Enter LoanApp.write_delta_rate()");

  strcpy(oCase_SN, case_sn);
  oNetPresentValue = npv;
  oDeltaRate = lowest_delta;
  EXEC SQL
     update  pdaco_cal
        set reserve2 = :oDeltaRate,
            reserve3 = :oNetPresentValue
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Delta Rate.");


  Debug("Exit LoanApp.write_delta_rate()");
  return (0);
} //LoanApp::LoanApp.write_delta_rate()

//--------------------------------------------------------------------------------------------------
void LoanApp::npv_init()
{
  for (int i = 0; i < TERM + 4; i ++) {
     apr[i] = 0.0;
     open_attrition[i] = 0.0;
     voluntary_attrition[i] = 0.0;
     involuntary_attrition[i] = 0.0;
     m1_attrition[i] = 0.0;
     base_attrition[i] = 0.0;
     os_principal[i] = 0.0;
     principal_repayment[i] = 0.0;
     interest_repayment[i] = 0.0;
     interest_revenue[i] = 0.0;
     late_fee[i] = 0.0;
     early_closing_fee[i] = 0.0;
     interest_cost[i] = 0.0;
     account_management_cost[i] = 0.0;
     precollection_cost[i] = 0.0;
     collection_cost[i] = 0.0;
     working_capital[i] = 0.0;
     credit_loss[i] = 0.0;
  }
  district = 1;
  m1_recovery_ratio = 0.95;            // Late fee recovery ratio - 4 days
  m1_avg_late_days = 6;                // Average late days - 4 days
  m1_penalty_rate = 0.1;               // 違約率 - 4 days
  m6_recovery_ratio = 0.02;            // Late fee recovery ratio - 180+ days
  m6_avg_late_days = 180;              // Average late days - 180+ days
  m6_penalty_rate = 0.2;               // 違約率 - 180+ days
  early_closing_period = 0;            // 提早還款期間 -- move to app_info
  early_closing_fee_pct = 0.0;         // 提早還款費率
  early_closing_fee_collectable_ratio = 0.5; //  提早還款費可徵收之比率
  leverage_ratio = Fund_deposit_pct + Fund_bank_pct + Fund_free_pct; //舉債比率（％）
  cof = (COF_deposit * Fund_deposit_pct + COF_bank * Fund_bank_pct)/(Fund_deposit_pct + Fund_bank_pct + Fund_free_pct); //資金成本（％）
  roe = ROE;                           //股東權益報酬（％）
  acct_mgmt_cost = 3;                  //臨櫃繳款
  short_message_expense = 1.36;        //簡訊費用
  phone_expense_north = 39.0;          //電話催收費用-北區
  phone_expense_south = 39.0;          //電話催收費用-南區
  phone_expense_central = 39.0;        //電話催收費用-中區
  legal_exec_north = 963.0;            //法務費用-北區（執行名義）支付命令 + 假扣押裁定 + 1.1% * 申貸金額
  legal_query_north = 618.0;           //法務費用-北區（查詢所得&財產）
  legal_auction_north = 800.0;         //法務費用-北區（拍賣）
  legal_staff_north = 1500.0;          //法務費用-北區（法務人員）
  legal_exec_south= 963.0;             //法務費用-南區（執行名義）
  legal_query_south = 618.0;           //法務費用-南區（查詢所得&財產）
  legal_auction_south = 800.0;         //法務費用-南區（拍賣）
  legal_staff_south = 1500.0;          //法務費用-南區（法務人員）
  legal_exec_central= 963;             //法務費用-中區（執行名義）
  legal_query_central = 618.0;         //法務費用-中區（查詢所得&財產）
  legal_auction_central = 800.0;       //法務費用-中區（拍賣）
  legal_staff_central = 1500.0;        //法務費用-中區（法務人員）
  legal_detain_ratio_north = 0.0056;   //假扣押&強制執行-北區 (% of balance)
  legal_detain_ratio_south = 0.0056;   //假扣押&強制執行-南區 (% of balance)
  legal_detain_ratio_central = 0.0056; //假扣押&強制執行-中區 (% of balance)
  if (Product_type_code == 4)   // for product is 4:農家樂貸款  EAD=40%, others are 25%.
     recovery_ratio = 0.6;             //壞帳回收百分比, (資金損失 % (EAD) )
  else
     recovery_ratio = 0.75;            //壞帳回收百分比, (資金損失 % (EAD) )
  legal_action_period = 12.0;          // Legal action usually lasts 12 months before write-off
  pd = applicantPB_adjust;
  principal = App_amt;
}

//--------------------------------------------------------------------------------------------------
void LoanApp::set_apr(double delta_apr)
{
  int i, j;

  j = 0;
  apr[j] = 0.0;
  for (i = 0; i < Term_1; i++) 
      apr[++j] = (APR_1 + delta_apr < 0 ? 0 : APR_1 + delta_apr) / 12.0;   
  
  for (i = 0; i < Term_2; i++)
      apr[++j] = (APR_2 + delta_apr < 0 ? 0 : APR_2 + delta_apr) / 12.0;   
  
  for (i = 0; i < Term_3; i++) 
      apr[++j] = (APR_3 + delta_apr < 0 ? 0 : APR_3 + delta_apr) / 12.0;   

}

//--------------------------------------------------------------------------------------------------
void LoanApp::set_attrition(double delta_apr)
{
//  double monthly_pd = pd / 12.0;
  int cat, term;
  int pd_term;

  if (periods < 48) { // 3 year (4 * 12 month)
     if ((max_apr + delta_apr) <= 0.05)
        cat = 0;
     else if ((max_apr + delta_apr) > 0.05 && (max_apr + delta_apr) <= 0.09)
        cat = 1;
     else
        cat = 2;
     term = 36; // month
  } else if (periods >= 48 && periods < 72 ) { // 5 year (4*12 - 6*12 month)
     if ((max_apr + delta_apr) <= 0.05)
        cat = 3;
     else if ((max_apr + delta_apr) > 0.05 && (max_apr + delta_apr) <= 0.09)
        cat = 4;
     else
        cat = 5;
     term = 60; // month
  } else { //  7 year
     if ((max_apr + delta_apr) <= 0.05)
        cat = 6;
     else if ((max_apr + delta_apr) > 0.05 && (max_apr + delta_apr) <= 0.09)
        cat = 7;
     else
        cat = 8;
     term = 120; // month
  }

  if (periods < 7)
     pd_term = 0;
  else if (periods > 84)
     pd_term = 7;
  else
     pd_term = (periods + 6) / 12;     // rounding

  for (int i = 0; i < term; i++)
      base_attrition[i] = Attrition_Table[cat][i];

  for (int i = 0; i < periods; i++) {
      if (pd_term == 0)
          PD_attrition[i] = pd * (i + 1) / (periods + 1) / 6;
          /* (2*PD*periods)/(12*(periods+1)*(i+1)/periods */
      else
         if (i < PDterm_coeff[pd_term][0])
            PD_attrition[i] = pd * (i + 1) / PDterm_coeff[pd_term][0] / PDterm_coeff[pd_term][1];
         else
            PD_attrition[i] = pd * PD_FACTOR / PDterm_coeff[pd_term][1];
  }    

  open_attrition[0] = 1.0;
  voluntary_attrition[0] = involuntary_attrition[0] = m1_attrition[0] = 0.0;
  for (int i = 1; i <= periods; i++) {
      voluntary_attrition[i] = open_attrition[i-1] * base_attrition[i-1];
      involuntary_attrition[i] = open_attrition[i-1] * PD_attrition[i-1];
      open_attrition[i] = open_attrition[i-1] - voluntary_attrition[i] - involuntary_attrition[i];
      m1_attrition[i] = involuntary_attrition[i] * m1_to_m7_ratio;
  }
}

//--------------------------------------------------------------------------------------------------
void LoanApp::set_amortize()
{
  os_principal [0] = principal;
  interest_repayment [0] = 0.0;
  principal_repayment [0] = 0.0;
//  monthly_repayment [0] = 0.0;
  int GracePeriod = ((Grace_period == periods)? Grace_period - 1: Grace_period);
  double fix_payment = principal / (periods - GracePeriod);

  for (int i = 1; i<= periods; i++) {
      interest_repayment[i] = os_principal[i-1] * apr[i];
      if (i > GracePeriod)
         principal_repayment [i] = fix_payment;
      else
         principal_repayment [i] = 0.0;
      os_principal [i] = os_principal[i-1] - principal_repayment[i];
//      monthly_repayment[i] = principal_repayment[i] + interest_repayment[i];
  }
}

//--------------------------------------------------------------------------------------------------
void LoanApp::set_annuity()
{
  int GracePeriod = ((Grace_period == periods)? Grace_period - 1: Grace_period);
  int after_grace_period = periods - GracePeriod;
  double repayment = principal / periods;     // assume apr = 0.0%
  int remaining_period;

  os_principal [0] = principal;
  interest_repayment [0] = 0.0;
  principal_repayment [0] = 0.0;
 
  for (int i = 1; i <= periods; i++) {
     if (apr[i] != apr[i-1]) {
        remaining_period = periods - i + 1;
        remaining_period = (remaining_period > after_grace_period ? after_grace_period : remaining_period);
        if (apr[i] == 0.0)
           repayment = os_principal[i-1] / remaining_period;
        else
           repayment = PMT(apr[i], remaining_period, -os_principal[i-1], 0.0, ptEndOfPeriod);
     }
     interest_repayment[i] = os_principal[i-1] * apr[i];
     if (i > GracePeriod)
        principal_repayment[i] = repayment - interest_repayment[i];
     else
        principal_repayment[i] = 0.0;

     os_principal[i] = os_principal[i-1] - principal_repayment[i];

  }
}

//--------------------------------------------------------------------------------------------------
double LoanApp::calculate_npv(double delta_apr)
{
  double revenue, cost, wc;
  double Interest_Revenue, Late_Fee, Early_Closing_Fee = 0.0, Application_Fee = 0.0;
  double Other_Fee = 0.0, Interest_Cost, Acct_Mgmt_Cost, PreCollection_Cost;
  double Collection_Cost, Working_Capital, Credit_Loss, Commission_Fee;

  npv_init();
  set_apr(delta_apr);
  set_attrition(delta_apr);
  set_annuity();
  Commission_Fee = Commission * principal;
  if (Commission_Fee < 0) Commission_Fee = 0;
  Interest_Revenue = set_interest_revenue();
  Late_Fee = set_late_fee();
//  Early_Closing_Fee = set_early_closing_fee();
  Application_Fee = Fee_1;
  Other_Fee = Fee_2 * principal;
  Interest_Cost = set_interest_cost();
  Acct_Mgmt_Cost = set_account_management_cost();
  PreCollection_Cost = set_precollection_cost();
  Collection_Cost = set_collection_cost();
  Working_Capital = set_working_capital();
  Credit_Loss = set_credit_loss();
  total_npv = (Interest_Revenue + Late_Fee + Early_Closing_Fee + Application_Fee
               + Other_Fee)                            // Revenue
              - (Interest_Cost + Acct_Mgmt_Cost + PreCollection_Cost
               + Collection_Cost + Commission_Fee)         // Cost
              + (Working_Capital + Credit_Loss);       // Working Capital

#ifdef NPV_FLOWS
     fstream outf;
    
     outf.open("NPV_flows.txt", ios::app | ios::out);  // Open for ouput and append
    
     outf << "Case SN: " << case_sn << "   IDN: " << aID << "   NPV: " << total_npv << endl;
     outf << "TERM       APR  Open_Atr   Vol_Atr Invol_Atr    M1_Atr  Base_Atr        "
          << "OsPrinL        P_Repay        I_Repay         IntRev          LateF         "
          << "EarlyF        IntCost       AcctCost         PreCol        Collect             "
          << "WC        CreLoss" << endl;
     outf << "========================================================================================================="
          << "======================================================================"
          << "======================================================================" << endl;
     outf <<  showpoint
              << setw(79) << setprecision(8) << Application_Fee
              << setw(15) << setprecision(8) << Other_Fee
              << setw(15) << setprecision(8) << Commission_Fee
              << setw(15) << setprecision(8) << Interest_Revenue
              << setw(15) << setprecision(8) << Late_Fee
              << setw(15) << setprecision(8) << Early_Closing_Fee
              << setw(15) << setprecision(8) << Interest_Cost
              << setw(15) << setprecision(8) << Acct_Mgmt_Cost
              << setw(15) << setprecision(8) << PreCollection_Cost
              << setw(15) << setprecision(8) << Collection_Cost
              << setw(15) << setprecision(8) << Working_Capital
              << setw(15) << setprecision(8) << Credit_Loss
              << endl;
     for (int i = 0; i < periods + 4; i++) {
         outf << setprecision(8) << showpoint
              << setw(4)  << i
              << setw(10) << setprecision(4) << apr[i]
              << setw(10) << setprecision(4) << open_attrition[i]
              << setw(10) << setprecision(4) << voluntary_attrition[i]
              << setw(10) << setprecision(4) << involuntary_attrition[i]
              << setw(10) << setprecision(4) << m1_attrition[i]
              << setw(10) << setprecision(4) << base_attrition[i]
              << setw(15) << setprecision(8) << os_principal[i]
              << setw(15) << setprecision(8) << principal_repayment[i]
              << setw(15) << setprecision(8) << interest_repayment[i]
              << setw(15) << setprecision(8) << interest_revenue[i]
              << setw(15) << setprecision(8) << late_fee[i]
              << setw(15) << setprecision(8) << early_closing_fee[i]
              << setw(15) << setprecision(8) << interest_cost[i]
              << setw(15) << setprecision(8) << account_management_cost[i]
              << setw(15) << setprecision(8) << precollection_cost[i]
              << setw(15) << setprecision(8) << collection_cost[i]
              << setw(15) << setprecision(8) << working_capital[i]
              << setw(15) << setprecision(8) << credit_loss[i]
              << endl;
     }
#endif

  return (total_npv);
}

//--------------------------------------------------------------------------------------------------
double LoanApp::set_interest_revenue()
{
  for (int i = 1; i <= periods; i++)
     interest_revenue[i] = os_principal[i-1] * apr[i] * open_attrition[i];

  return (NPV(roe / 12.0, interest_revenue + 1, periods, ptEndOfPeriod)
          + interest_revenue[0]);
}

//--------------------------------------------------------------------------------------------------
double LoanApp::set_late_fee()
{
  for (int i = 1; i <= periods; i++)
     late_fee[i] = os_principal[i-1] * apr[i] * YearMonths / YearDays *
                  (m1_attrition[i] * m1_recovery_ratio * m1_avg_late_days * m1_penalty_rate +
                   involuntary_attrition[i] * m6_recovery_ratio * m6_avg_late_days * m6_penalty_rate);

  return (NPV(roe / 12.0, late_fee + 1, periods, ptEndOfPeriod)
          + late_fee[0]);
}

//--------------------------------------------------------------------------------------------------
double LoanApp::set_early_closing_fee()
{
  for (int i = 1; i <= periods; i++)
     if (i > early_closing_period)
        early_closing_fee [i] = 0.0;
     else
        early_closing_fee [i] = os_principal[i-1] * voluntary_attrition[i] * early_closing_fee_pct
        		        * early_closing_fee_collectable_ratio;

  return (NPV(roe / 12.0, early_closing_fee + 1, periods, ptEndOfPeriod)
          + early_closing_fee[0]);
}
// Cost
// Interest Cost:
//--------------------------------------------------------------------------------------------------
double LoanApp::set_interest_cost()
{
  for (int i = 1; i <= periods; i++)
     interest_cost[i] = os_principal[i-1] * open_attrition[i-1] * leverage_ratio * cof / YearMonths;
  return (NPV(roe / 12.0, interest_cost + 1, periods, ptEndOfPeriod)
          + interest_cost[0]);
}

// Account Management Cost
//--------------------------------------------------------------------------------------------------
double LoanApp::set_account_management_cost()
{
  for (int i = 1; i <= periods; i++)
     account_management_cost[i] = acct_mgmt_cost * open_attrition[i-1];
  return (NPV(roe / 12.0, account_management_cost + 1, periods, ptEndOfPeriod)
          + account_management_cost[0]);
}

// Pre-collection Cost
/* 4 days late will send message to customer.
   30 days late will call to customer.
   30 days late is 2 payments behind.
*/
//--------------------------------------------------------------------------------------------------
double LoanApp::set_precollection_cost()
{
  double monthly_pd = pd / YearMonths;
  double m1Open = monthly_pd * m1_to_m7_ratio;
  double d4Open = m1Open * m1_to_m7_ratio;
  double phone_expense;

  switch (district) {
    case 1: phone_expense =  phone_expense_north;  break;
    case 2: phone_expense =  phone_expense_central;  break;
    case 3: phone_expense =  phone_expense_south;  break;
  }
  for (int i = 1; i <= periods + 1; i++)
     if (i < 2)
        precollection_cost[i] = 0.0;
     else {
       if (os_principal[i-2] > 0)
          precollection_cost[i] = short_message_expense * open_attrition[i-2] * d4Open +
                             phone_expense * open_attrition[i-2] * m1Open;
       else
          precollection_cost[i] = 0.0;
     }
  return (NPV(roe / 12.0, precollection_cost + 1, periods+1, ptEndOfPeriod)
          + precollection_cost[0]);
}
// Collection Cost (legal)
/* 90+ days delinquent will tirgger legal action to collect outstanding principal
   90+ days delinquent is 4 payments behind
*/
//--------------------------------------------------------------------------------------------------
double LoanApp::set_collection_cost()
{
  double monthly_pd = pd / YearMonths;
  double legal_expense;
  double legal_detain_ratio;

  switch (district) {
    case 1: legal_expense = legal_exec_north + legal_query_north
                            + legal_auction_north + legal_staff_north;
            legal_detain_ratio = legal_detain_ratio_north;
            break;
    case 2: legal_expense =  legal_exec_central + legal_query_central
                            + legal_auction_central + legal_staff_central;
            legal_detain_ratio = legal_detain_ratio_central;
            break;
    case 3: legal_expense =  legal_exec_south + legal_query_south
                            + legal_auction_south + legal_staff_south;
            legal_detain_ratio = legal_detain_ratio_south;
            break;
  }
  for (int i = 1; i <= periods + 3 ; i++)
     if (i < 4)
        collection_cost [i] = 0.0;
     else {
       if (os_principal[i-4] > 0)
          collection_cost[i] = open_attrition[i-4] * monthly_pd *
                       (legal_expense + os_principal[i-4] * legal_detain_ratio);
       else
          collection_cost[i] = 0.0;
     }
  return (NPV(roe / 12.0, collection_cost + 1, periods+3, ptEndOfPeriod)
          + collection_cost[0]);
}

// Working Capacital
/*
    working_capital [i] = (os_principal[i-1]* open_attrition[i-1] -
                           os_principal[i] * open_attrition[i]) *
                           (os_principal[i-1]* open_attrition[i-1] * leverage_ratio -
                           os_principal[i] * open_attrition[i] * leverage_ratio)
*/
//--------------------------------------------------------------------------------------------------
double LoanApp::set_working_capital()
{
 working_capital [0] = -os_principal[0] * (1 - leverage_ratio);
 for (int i = 1; i <= periods; i++) {
    working_capital [i] = (os_principal[i-1]* open_attrition[i-1] -
                           os_principal[i] * open_attrition[i]) *
                           (1- leverage_ratio);
 }
  return (NPV(roe / 12.0, working_capital + 1, periods, ptEndOfPeriod)
          + working_capital[0]);
}

// Credit loss:
double LoanApp::set_credit_loss()
{
 double discount_rate = 1 / pow((1 + roe / YearMonths),legal_action_period);
 credit_loss [0] = 0.0;
 for (int i = 1; i <= periods; i++) {
    credit_loss [i] = -os_principal[i-1]* involuntary_attrition[i] *
                      (1 - (1 - recovery_ratio) * discount_rate);
 }
  return (NPV(roe / 12.0, credit_loss + 1, periods, ptEndOfPeriod)
          + credit_loss[0]);
}
//--------------------------------------------------------------------------------------------------
double LoanApp::get_npv ()
{
 return total_npv;
}
//--------------------------------------------------------------------------------------------------
double LoanApp::find_lowest_rate (double offset, double delta_r)
{
 double npv, target_r, offset_r;
  
 target_r = offset + delta_r;

 npv = calculate_npv(target_r);

 if (trace) {
     fstream outf;
    
     outf.open("NPV_trace.txt", ios::app | ios::out);  // Open for ouput and append
     outf << "Case SN: " << case_sn << " offset: " << offset 
          << " delta: " << delta_r << " NPV: " << npv << endl;
 }
 if ((delta_r < 0.000001 && delta_r > -0.000001) ||            // abs(delta_r) < 0.000001
     (npv >= ApprovedNPV && npv <= (ApprovedNPV + Allowance)))  // or  2000 =< npv <= 2010
    return (ceil(target_r * 100000) / 100000.0); // carry to 4th decimal
//    return ((static_cast<int>((target_r + 0.0001) * 10000)) / 10000.0); // carry to 4th decimal
 else if (npv > (ApprovedNPV + Allowance)) {
    if (delta_r > 0)
       offset_r = offset;
    else
       offset_r = offset + delta_r;
    return (find_lowest_rate(offset_r, delta_r / 2.0));
 }
 else if(npv < ApprovedNPV) {
    if (delta_r > 0)
       offset_r = offset + delta_r;
    else
       offset_r = offset;
    return (find_lowest_rate(offset_r, delta_r / 2.0));
 }
}
//--------------------------------------------------------------------------------------------------
void LoanApp::set_npv (double npv_value)
{
 total_npv = npv_value;
}
//--------------------------------------------------------------------------------------------------
void LoanApp::set_lowest_rate (double delta_rate)
{
 if (Term_1 > 0)
    Lowest_rate_1 = (APR_1 + delta_rate < 0 ? 0 : APR_1 + delta_rate);
 else 
    Lowest_rate_1 = 0.0;
 if (Term_2 > 0)
    Lowest_rate_2 = (APR_2 + delta_rate < 0 ? 0 : APR_2 + delta_rate);
 else 
    Lowest_rate_2 = 0.0;
 if (Term_3 > 0)
    Lowest_rate_3 = (APR_3 + delta_rate < 0 ? 0 : APR_3 + delta_rate);
 else 
    Lowest_rate_3 = 0.0;
}
//--------------------------------------------------------------------------------------------------
