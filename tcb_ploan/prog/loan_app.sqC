/****************************************************************************
** Licensed Materials - Property of DAC
**
** (C) COPYRIGHT Decision Analytics Consulting 2005
** All Rights Reserved.
**
*****************************************************************************
** SOURCE FILE NAME: LoanApp.sqC
**
**
****************************************************************************/
#include <string.h>
#include <sqlenv.h>
#include <sqlutil.h>
#include "utilemb.h"
#if ((__cplusplus >= 199711L) && !defined DB2HP) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std;
#else
   #include <iostream.h>
#endif
#include "loan_app.h"
#include "error.h"
#include "functions.h"

extern char MESSAGE[1024];
Invalid_Msg tcbMsg[] = {
   {1001, "生日超出有效範圍。"},
   {1002, "年所得收入超出999萬。"},
   {1003, "現址已居住年數超出99年。"},
   {1004, "車籍資料(年份)超出有效範圍。"},
   {1005, "服務年資超出99年。"},
   {1006, "利率 (第一期)超出12%。"},
   {1007, "利率 (第二期)超出12%。"},
   {1008, "利率 (第三期)超出12%。"},
   {1009, "期數 (第一期)超出84個月。"},
   {1010, "期數 (第二期)超出84個月。"},
   {1011, "期數 (第三期)超出84個月。"},
   {1012, "寬限期大於總期數。"},
   {1013, "申貸金額超出200萬。"},
   {1014, "開辦費 (金額)超出10萬。"},
   {2001, "申貸編號不存在於APP_INFO。"},
   {2002, "申貸編號不存在於APP_RESULT。"},
   {2003, "撥貸金額必須大於零。"}
};


LoanApp::LoanApp(char *caseSN)
{
 strcpy (case_sn, caseSN);
}

int LoanApp::initial()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*app_info fields*/
    char iCase_Sn[20];
    char iApplicant_Id[12];
    char iGuantantor_Id[12];
    long iLoan_purpose;
    long iEducation;
    char iBirthday[8];
    long iMarriage_status;
    long iAnnual_Income;
    long iHome_ownership;
    long iYear_at_current_address;
    long iYear_at_current_job;
    long iCar_year;
    long iProduct_type_code;
    long iApp_amt;
    long iTerm_1;
    long iTerm_2;
    long iTerm_3;
    double iAPR_1;
    double iAPR_2;
    double iAPR_3;
    long iGrace_period;
    long iFee_1;
    double iFee_2;

    /*indicators*/
    short GID_ind;
    short Loan_purpose_ind;
    short Education_ind;
    short Birthday_ind;
    short Marriage_status_ind;
    short Annual_Income_ind;
    short Home_ownership_ind;
    short Year_at_current_address_ind;
    short Year_at_current_job_ind;
    short Car_year_ind;
    short Product_type_code_ind;
    short App_amt_ind;
    short Term_1_ind;
    short Term_2_ind;
    short Term_3_ind;
    short APR_1_ind;
    short APR_2_ind;
    short APR_3_ind;
    short Grace_period_ind;
    short Fee_1_ind;
    short Fee_2_ind;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code = 0;

  strcpy (iCase_Sn, case_sn);
  Debug("Enter LoanApp.initial()");

  EXEC SQL
     select Applicant_ID, Guarantor_ID, Loan_purpose, education, Birthday, Marriage_status, Car_year,
            Annual_Income, Home_ownership, Year_at_current_address, Year_at_current_job,
            Product_type_code, App_amt, Term_1, Term_2, Term_3, APR_1, APR_2, APR_3, grace_period,
            Fee_1, Fee_2
     into :iApplicant_Id, :iGuantantor_Id:GID_ind, :iLoan_purpose:Loan_purpose_ind, :iEducation:Education_ind,
          :iBirthday:Birthday_ind, :iMarriage_status:Marriage_status_ind, :iCar_year:Car_year_ind,
          :iAnnual_Income:Annual_Income_ind, :iHome_ownership:Home_ownership_ind,
          :iYear_at_current_address:Year_at_current_address_ind, :iYear_at_current_job:Year_at_current_job_ind,
          :iProduct_type_code:Product_type_code_ind, :iApp_amt:App_amt_ind, :iTerm_1:Term_1_ind,
          :iTerm_2:Term_2_ind, :iTerm_3:Term_3_ind, :iAPR_1:APR_1_ind, :iAPR_2:APR_2_ind, :iAPR_3:APR_3_ind,
          :iGrace_period:Grace_period_ind, :iFee_1:Fee_1_ind, :iFee_2:Fee_2_ind
     from db2inst1.app_info
     where case_sn = :iCase_Sn;
  EMB_SQL_CHECK("Select appInfo.");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "申貸編號不存在於APP_INFO");
     return(2001);
  }
  strcpy (aID, iApplicant_Id);

  if (GID_ind == -1) strcpy(gID, "");
  else strcpy (gID, iGuantantor_Id);

  // check loan purpose in 1: 其他家計週轉金; 2: 消費性支出
  if (Loan_purpose_ind == -1) Loan_purpose = -1;
  else Loan_purpose = iLoan_purpose;

  if ((Loan_purpose_ind == -1) || (Loan_purpose < 1) || (Loan_purpose > 2)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}
     
  // check education in "1: 研究所以上 2: 大學 3: 專科 4: 高中職 5: 中學以下 6: 其他"
  if (Education_ind == -1) Education = -1;
  else Education = iEducation;

  if ((Education_ind == -1) || (Education < 1) || (Education > 6)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}

  // check birthday 民國 yyymmdd
  if (Birthday_ind == -1) strcpy(Birthday, "");
  else strcpy (Birthday, iBirthday);
  if (!validate_date(Birthday)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1001)); code = DataErrorCode(DATA_ERR_1001);}

  // check marrage status "1: 已婚 2: 其他"
  if (Marriage_status_ind == -1) Marriage_status = -1;
  else Marriage_status = iMarriage_status;

  if ((Marriage_status_ind == -1) || (Marriage_status < 1) || (Marriage_status > 2)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}

  // check annual income 新台幣萬元，最多三位數 (999)
  if (Annual_Income_ind == -1) Annual_Income = 0;
  else Annual_Income = iAnnual_Income * 10000;

  if ((Annual_Income < 0) || (Annual_Income > 9990000)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}

  // check Home_ownership  "1: 自有(無設定) 2: 自有(設定予本行) 3: 自有(設定予他行) 4: 親屬所有
  // 5: 宿舍 6: 租賃 7: 其他"
  if (Home_ownership_ind == -1) Home_ownership = -1;
  else Home_ownership = iHome_ownership;

  if ((Home_ownership == -1) || (Home_ownership < 1) || (Home_ownership > 7)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}
  
  // check Year_at_current_address現址已居住年數 最多二位數 (99)
  if (Year_at_current_address_ind == -1) Year_at_current_address = 0;
  else Year_at_current_address = iYear_at_current_address;

  if ((Year_at_current_address < 0) || (Year_at_current_address > 99)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1003)); code = DataErrorCode(DATA_ERR_1003);}

  // check Year_at_current_job 服務年資 最多二位數 (99)
  if (Year_at_current_job_ind == -1) Year_at_current_job = 0;
  else Year_at_current_job = iYear_at_current_job;

  if ((Year_at_current_job < 0) || (Year_at_current_job > 99)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1005)); code = DataErrorCode(DATA_ERR_1005);}
  // check car year 民國 (1 ~ 999)
  if (Car_year_ind == -1) Car_year = 0;
  else Car_year = iCar_year;

  if ((Car_year < 0) || (Car_year > 999)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1004)); code = DataErrorCode(DATA_ERR_1004);}

  // check product_type_code "1: 簡易小額信貸 2: 個人信貸產品A 3: 個人信貸產品B 4: 其他(只算壞帳機率)"
  if (Product_type_code_ind == -1) Product_type_code = -1;
  else Product_type_code = iProduct_type_code;

  if ((Product_type_code == -1) || (Product_type_code < 1) || (Product_type_code > 4)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1002)); code = DataErrorCode(DATA_ERR_1002);}

  
  // check apply amount 0~200，新台幣萬元
  if (App_amt_ind == -1) App_amt = 0;
  else App_amt = iApp_amt * 10000;

  if ((App_amt <= 0) || (App_amt > 2000000)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1013)); code = DataErrorCode(DATA_ERR_1013);}

  // check term_1  1~84，月
  if (Term_1_ind == -1) Term_1 = 0;
  else Term_1 = iTerm_1;

  // check term_2  0~84，月
  if (Term_2_ind == -1) Term_2 = 0;
  else Term_2 = iTerm_2;

  // check term_3  0~84，月 (期數一、二、三，加起來需>=6 & <=84)
  if (Term_3_ind == -1) Term_3 = 0;
  else Term_3 = iTerm_3;

  if ((Term_1 < 1) || (Term_1 > 84)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1009)); code = DataErrorCode(DATA_ERR_1009);}

  if ((Term_2 < 0) || (Term_2 > 84)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1010)); code = DataErrorCode(DATA_ERR_1010);}

  if ((Term_3 < 0) || (Term_3 > 84)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1011)); code = DataErrorCode(DATA_ERR_1011);}

  periods = Term_1 + Term_2 + Term_3;

  if (periods < 6 || periods > 84) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1011)); code = DataErrorCode(DATA_ERR_1011);}
  
  // check apr_1, 0~12, 6.99% as 6.99   
  if (APR_1_ind == -1) APR_1 = 0.0;
  else APR_1 = iAPR_1 / 100.0;

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_2_ind == -1) APR_2 = 0.0;
  else APR_2 = iAPR_2 / 100.0;

  // check apr_2, 0~12, 6.99% as 6.99   
  if (APR_3_ind == -1) APR_3 = 0.0;
  else APR_3 = iAPR_3 / 100.0;

  if ( (APR_1 < 0.0) || (APR_1 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1006)); code = DataErrorCode(DATA_ERR_1006);}

  if ((APR_2 < 0.0) || (APR_2 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1007)); code = DataErrorCode(DATA_ERR_1007);}

  if ((APR_3 < 0.0) || (APR_3 > 0.12) ) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1008)); code = DataErrorCode(DATA_ERR_1008);}

  max_apr = ((APR_1 ) > (APR_2) ? (APR_1) : (APR_2));
  max_apr = ((max_apr) > (APR_3) ? (max_apr) : (APR_3));

  if (Grace_period_ind == -1) Grace_period = 0;
  else Grace_period = iGrace_period;

  if ((Grace_period < 0) || (Grace_period >= periods)) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1012)); code = DataErrorCode(DATA_ERR_1012);}

  //check Fee_1 開辦費 (金額) 新台幣元，最多五位數
  if (Fee_1_ind == -1) Fee_1 = 0;
  else Fee_1 = iFee_1;

  //check Fee_2 開辦費 (百分比) 新台幣元，最多五位數
  if (Fee_2_ind == -1) Fee_2 = 0.0;
  else Fee_2 = iFee_2 / 100.0;

  if (Fee_1  >= 100000) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1014)); code = DataErrorCode(DATA_ERR_1014);}
  if ((App_amt * Fee_2) >= 100000) {
     strcat(MESSAGE, DataErrorMsg(DATA_ERR_1014)); code = DataErrorCode(DATA_ERR_1014);}

  Debug("Exit LoanApp.initial()");
  return(code);
}

LoanApp::~LoanApp()
{
}

char * LoanApp::Applicant_id()
{
 return(aID);
}

char * LoanApp::Guanrantor_id()
{
 return(gID);
}

int LoanApp::get_fin_info()
{
  EXEC SQL BEGIN DECLARE SECTION;
    /*Financial fields*/
    double iFund_deposit_pct;
    double iFund_bank_pct;
    double iFund_self_pct;
    double iFund_free_pct;
    double iCOF_deposit;
    double iCOF_bank;
    double iROE;
    double iCommission;
 EXEC SQL END DECLARE SECTION;
  struct sqlca sqlca;
  int code;

  Debug("Enter LoanApp.get_fin_info()");

  EXEC SQL
     select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit,
            COF_bank, ROE, Commission
     into :iFund_deposit_pct, :iFund_bank_pct, :iFund_self_pct, :iFund_free_pct, :iCOF_deposit,
          :iCOF_bank, :iROE, :iCommission
     from db2inst1.TCB_FIN_INFO;
  EMB_SQL_CHECK("Select TCB_FIN_INFO .");

  if (sqlca.sqlcode == 100) {
     strcpy(MESSAGE, "TCB_FIN_INFO 無資料");
     return(2001);
  }

  Fund_deposit_pct = iFund_deposit_pct;
  Fund_bank_pct    = iFund_bank_pct;
  Fund_self_pct    = iFund_self_pct;
  Fund_free_pct    = iFund_free_pct;
  COF_deposit      = iCOF_deposit;
  COF_bank         = iCOF_bank;
  ROE              = iROE;
  Commission       = iCommission;

  Debug("Exit LoanApp.get_fin_info()");
  return (0);
}

void LoanApp::set_applicant_pb(double pb)
{
 applicantPB = pb;
} //LoanApp::set_applicant_pb()

void LoanApp::set_guarantor_pb(double pb)
{
 guarantorPB = pb;
} //LoanApp::set_guarantor_pb()

void LoanApp::set_applicant_pb_adj(double pb)
{
 applicantPB_adjust = pb;
} //LoanApp::set_applicant_pb_adj()

void LoanApp::set_guarantor_pass(int flag)
{
 Guarantor_pass = flag;
} //LoanApp::set_guarantor_pass()

void LoanApp::set_cutpoint(double cut)
{
 cutpoint = cut;
} //LoanApp::set_guarantor_pass()

void LoanApp::set_ps_status_a(int code, char *msg)
{
 ps_code_a = code;
 strcpy (ps_msg_a, msg);
} //LoanApp::set_ps_status_a()

void LoanApp::set_ps_status_g(int code, char *msg)
{
 ps_code_g = code;
 strcpy (ps_msg_g, msg);
} //LoanApp::set_ps_status_g()

int LoanApp::get_product_type()
{
 return(Product_type_code);
} //LoanApp::get_product_type()

int LoanApp::get_apply_amount()
{
 return(App_amt);
} //LoanApp::get_apply_amount()

int LoanApp::get_periods()
{
 return(periods);
} //LoanApp::get_periods()

double LoanApp::get_max_apr()
{
 return(max_apr);
} //LoanApp::get_max_apr()

  EXEC SQL BEGIN DECLARE SECTION;
    /*app_result fields*/
    char  oCase_SN[13];
    char  osystem_time[14];
    double oApplicant_PB;
    double oGuarantor_PB;
    double oApplicant_PB_adj;
    long  oNPV;
    long  oPS_code;
    char  oPS_msg[257];
    long  oPS_code_g;
    char  oPS_msg_g[257];
    long  oGuarantor_pass;
    long  oApproval_code;
    char  oApproval_msg[513];
    double oLowest_Rate_1;
    double oLowest_Rate_2;
    double oLowest_Rate_3;
    double oCut;
 EXEC SQL END DECLARE SECTION;

int LoanApp::write_result_prescreen_failed()
{
  struct sqlca sqlca;
  
  Debug("Enter LoanApp.write_result_prescreen_failed()");

  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
//  oNPV = 0;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oApproval_code = 0;
//  get_decision_msg(Approval_msg);
  oCut = cutpoint;
  
  EXEC SQL
     insert into db2inst1.app_result(Case_SN, system_time, PS_code, PS_msg, Fund_deposit_pct,
                 Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                 Commission, Approval_code, cut) 
        values (:oCase_SN, :osystem_time, :oPS_code, :oPS_msg,
                 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                 :oApproval_code, :oCut);
  EMB_SQL_CHECK("Write PS failure.");

  EXEC SQL
     update db2inst1.app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from db2inst1.TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_prescreen_failed()");
  return (0);
} //LoanApp::write_result_prescreen_failed()

int LoanApp::write_result_others()
{
  struct sqlca sqlca;

  Debug("Enter LoanApp.write_result_others()");
  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oApplicant_PB = applicantPB;
  oApplicant_PB_adj = applicantPB_adjust;
//  oNPV = 0;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oGuarantor_pass = Guarantor_pass;
  oApproval_code = 0;
//  get_decision_msg(Approval_msg);
  oCut = cutpoint;

  if (gID[0] != '\0') {
     oGuarantor_PB = guarantorPB;
     oPS_code_g = ps_code_g;
     strcpy(oPS_msg_g, ps_msg_g);  
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Guarantor_PB, Applicant_PB_adj,
                    PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oGuarantor_PB, :oApplicant_PB_adj,
                   :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,
                   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                   :oApproval_code, :oCut);
     EMB_SQL_CHECK("Write others1.");
  } 
  else {
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                    PS_code, PS_msg, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                    :oPS_code, :oPS_msg, :oGuarantor_pass,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    :oApproval_code, :oCut);
     EMB_SQL_CHECK("Write others2.");
  }
  
  EXEC SQL
     update db2inst1.app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from db2inst1.TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_others()");
  return (0);
} //LoanApp::write_result_others()

int LoanApp::write_result_declined()
{
  struct sqlca sqlca;

  Debug("Enter LoanApp.write_result_declined()");
  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oApplicant_PB = applicantPB;
  oApplicant_PB_adj = applicantPB_adjust;
//  oNPV = 0;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oGuarantor_pass = Guarantor_pass;
  oApproval_code = 0;
//  get_decision_msg(Approval_msg);
  oCut = cutpoint;

  Info("Case_SN=%s.\n", oCase_SN);
  Info("system_time=%s.\n", osystem_time);
  Info("Applicant_PB=%f.\n", oApplicant_PB);
  Info("Applicant_PB_adj=%f.\n", oApplicant_PB_adj);
  Info("PS_code=%d.\n", oPS_code);
  Info("PS_msg=%s.\n", oPS_msg);
  Info("Guarantor_pass=%d.\n", oGuarantor_pass);
  Info("Approval_code=%d.\n", oApproval_code);
  

  if (gID[0] != '\0') {
     oGuarantor_PB = guarantorPB;
     oPS_code_g = ps_code_g;
     strcpy(oPS_msg_g, ps_msg_g);  
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Guarantor_PB, Applicant_PB_adj,
                    PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oGuarantor_PB, :oApplicant_PB_adj,
                   :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,
                   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                   :oApproval_code, :oCut);
     EMB_SQL_CHECK("Write declined1.");
  } 
  else {
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                    PS_code, PS_msg, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                    :oPS_code, :oPS_msg, :oGuarantor_pass,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    :oApproval_code, :oCut);
     Info("SQLCODE=%d.\n", sqlca.sqlcode);
     EMB_SQL_CHECK("Write declined2.");
  }
  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  EXEC SQL
     update db2inst1.app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from db2inst1.TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_declined()");
  return (0);
} //LoanApp::write_result_declined()

int LoanApp::write_result_approved()
{
  struct sqlca sqlca;

  Debug("Enter LoanApp.write_result_approved()");
  strcpy(oCase_SN, case_sn);
  strcpy(osystem_time, CurrTime_MinGuo());
  oApplicant_PB = applicantPB;
  oApplicant_PB_adj = applicantPB_adjust;
//  oNPV = 0;
  oPS_code = ps_code_a;
  strcpy(oPS_msg, ps_msg_a);
  oGuarantor_pass = Guarantor_pass;
  oApproval_code = 0;
//  get_decision_msg(Approval_msg);
  oCut = cutpoint;

  if (gID[0] != '\0') {
     oGuarantor_PB = guarantorPB;
     oPS_code_g = ps_code_g;
     strcpy(oPS_msg_g, ps_msg_g);  
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Guarantor_PB, Applicant_PB_adj,
                    PS_code, PS_msg, PS_code_g, PS_msg_g, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oGuarantor_PB, :oApplicant_PB_adj,
                   :oPS_code, :oPS_msg, :oPS_code_g, :oPS_msg_g, :oGuarantor_pass,
                   0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                   :oApproval_code, :oCut);
     EMB_SQL_CHECK("Write approved1.");
  } 
  else {
     EXEC SQL
        insert into db2inst1.app_result(Case_SN, system_time, Applicant_PB, Applicant_PB_adj,
                    PS_code, PS_msg, Guarantor_pass, Fund_deposit_pct,
                    Fund_bank_pct, Fund_self_pct, Fund_free_pct, COF_deposit, COF_bank, ROE,
                    Commission, Approval_code, cut) 
           values (:oCase_SN, :osystem_time, :oApplicant_PB, :oApplicant_PB_adj,
                    :oPS_code, :oPS_msg, :oGuarantor_pass,
                    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                    :oApproval_code, :oCut);
     EMB_SQL_CHECK("Write approved2.");
  }

  EXEC SQL
     update db2inst1.app_result
        set (Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
             COF_deposit, COF_bank, ROE, Commission) = 
             (select Fund_deposit_pct, Fund_bank_pct, Fund_self_pct, Fund_free_pct,
		     COF_deposit, COF_bank, ROE, Commission
	      from db2inst1.TCB_FIN_INFO)
	where case_sn = :oCase_SN;
  EMB_SQL_CHECK("Update Financial.");

  EXEC SQL COMMIT;
  EMB_SQL_CHECK("COMMIT");

  Debug("Exit LoanApp.write_result_approved()");
  return (0);
} //LoanApp::write_result_approved()
