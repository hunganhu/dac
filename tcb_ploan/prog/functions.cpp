/****************************************************************************
** Licensed Materials - Property of DAC
**
** (C) COPYRIGHT Decision Analytics Consulting 2004
** All Rights Reserved.
**
*****************************************************************************
**
** SOURCE FILE NAME: function.cpp
**
** Description:
**
**
**
**
****************************************************************************/
#include <string.h>
#if ((__cplusplus >= 199711L) && !defined DB2HP) || \
    (DB2LINUX && (__LP64__ || (__GNUC__ >= 3)) )
   #include <iostream>
   using namespace std;
#else
   #include <iostream.h>
#endif
#include "functions.h"

#define IS_LETTER(x)  (((x) <='z' && (x) >= 'a') || ((x) <='Z' && (x) >= 'A'))

/*
Risk cut points are determined by the values of apr, term, and loan amount:
APR	Term	Loan Amt
2.00%	12	 50000
2.50%	24	100000
3.00%	36	150000
3.50%	48	200000
4.00%	60	250000
4.50%	72	300000
5.00%	84	350000
5.50%		400000
6.00%		450000
6.50%		500000
7.00%		550000
7.50%		600000
8.00%
8.50%
9.00%
9.50%
10.00%
10.50%
11.00%
11.50%
12.00%
*/
float risk_cut[12][7][21] =  // loan_amt, term, apr
{
 { //[0] 50000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0050, 0.0100, 0.0150, 0.0200}, // 12
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475}, // 24
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0325, 0.0350, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550}, // 36
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575}, // 48
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0275, 0.0325, 0.0350, 0.0400, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600}, // 60
   {0.0000, 0.0000, 0.0000, 0.0025, 0.0075, 0.0100, 0.0125, 0.0150, 0.0200, 0.0225, 0.0250, 0.0300, 0.0325, 0.0375, 0.0400, 0.0450, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625}, // 72
   {0.0000, 0.0000, 0.0000, 0.0050, 0.0075, 0.0100, 0.0150, 0.0175, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0400, 0.0450, 0.0475, 0.0525, 0.0550, 0.0600, 0.0625}  // 84

 },

 { //[1] 100000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0550, 0.0625, 0.0675}, // 12
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750}, // 24
   {0.0000, 0.0000, 0.0000, 0.0025, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750}, // 36
   {0.0000, 0.0000, 0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750}, // 48
   {0.0000, 0.0000, 0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0525, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750}, // 60
   {0.0000, 0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0725}, // 72
   {0.0000, 0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725}  // 84
 },

 { //[2] 150000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0750, 0.0800, 0.0850}, // 12
   {0.0000, 0.0000, 0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850}, // 24
   {0.0000, 0.0000, 0.0050, 0.0075, 0.0125, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0775, 0.0825}, // 36
   {0.0000, 0.0025, 0.0050, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775, 0.0825}, // 48
   {0.0000, 0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800}, // 60
   {0.0000, 0.0050, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775}, // 72
   {0.0000, 0.0050, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725, 0.0750}  // 84
 },

 { //[3] 200000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0000, 0.0000, 0.0075, 0.0125, 0.0175, 0.0225, 0.0275, 0.0350, 0.0400, 0.0450, 0.0500, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0950}, // 12
   {0.0000, 0.0000, 0.0050, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900}, // 24
   {0.0000, 0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0875}, // 36
   {0.0000, 0.0025, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0725, 0.0750, 0.0800, 0.0850}, // 48
   {0.0000, 0.0050, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825}, // 60
   {0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0275, 0.0325, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0625, 0.0675, 0.0700, 0.0750, 0.0775}, // 72
   {0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0275, 0.0325, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750, 0.0775}  // 84
 },

 { //[4] 250000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0000, 0.0050, 0.0100, 0.0175, 0.0225, 0.0275, 0.0325, 0.0400, 0.0450, 0.0500, 0.0550, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0900, 0.0950, 0.1000}, // 12
   {0.0000, 0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0500, 0.0550, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925}, // 24
   {0.0000, 0.0050, 0.0075, 0.0125, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900}, // 36
   {0.0000, 0.0050, 0.0100, 0.0125, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0875}, // 48
   {0.0000, 0.0050, 0.0100, 0.0125, 0.0175, 0.0225, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800, 0.0850}, // 60
   {0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0400, 0.0450, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0675, 0.0725, 0.0750, 0.0800}, // 72
   {0.0025, 0.0050, 0.0100, 0.0125, 0.0175, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0475, 0.0525, 0.0550, 0.0600, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800}  // 84
 },

 { //[5] 300000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0025, 0.0075, 0.0150, 0.0200, 0.0250, 0.0300, 0.0375, 0.0425, 0.0475, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0825, 0.0875, 0.0925, 0.0975, 0.1050}, // 12
   {0.0000, 0.0025, 0.0075, 0.0125, 0.0175, 0.0225, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950}, // 24
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0550, 0.0600, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0900}, // 36
   {0.0025, 0.0050, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0825, 0.0875}, // 48
   {0.0025, 0.0050, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775, 0.0800, 0.0850}, // 60
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775, 0.0800}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0325, 0.0375, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725, 0.0750, 0.0800}  // 84
 },

 { //[6] 350000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0000, 0.0050, 0.0100, 0.0175, 0.0225, 0.0275, 0.0325, 0.0400, 0.0450, 0.0500, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0850, 0.0900, 0.0950, 0.1000, 0.1075}, // 12
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925, 0.0975}, // 24
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925}, // 36
   {0.0025, 0.0050, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0500, 0.0525, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800, 0.0850, 0.0875}, // 48
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0850}, // 60
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0625, 0.0650, 0.0700, 0.0725, 0.0775, 0.0800}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0675, 0.0725, 0.0775, 0.0800}  // 84
 },

 { //[7] 400000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0025, 0.0075, 0.0125, 0.0175, 0.0250, 0.0300, 0.0350, 0.0400, 0.0475, 0.0525, 0.0575, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0925, 0.0975, 0.1025, 0.1100}, // 12
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0925, 0.0975}, // 24
   {0.0025, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0875, 0.0925}, // 36
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0725, 0.0750, 0.0800, 0.0850, 0.0900}, // 48
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0875}, // 60
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0800}  // 84
 },

 { //[8] 450000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0025, 0.0075, 0.0150, 0.0200, 0.0250, 0.0300, 0.0375, 0.0425, 0.0475, 0.0550, 0.0600, 0.0650, 0.0700, 0.0775, 0.0825, 0.0875, 0.0925, 0.1000, 0.1050, 0.1100}, // 12
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950, 0.1000}, // 24
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0925}, // 36
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0800, 0.0850, 0.0900}, // 48
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0775, 0.0825, 0.0875}, // 60
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750, 0.0775, 0.0825}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0250, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0525, 0.0575, 0.0625, 0.0650, 0.0700, 0.0725, 0.0775, 0.0800}  // 84
 },

 { //[9] 500000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0025, 0.0100, 0.0150, 0.0200, 0.0275, 0.0325, 0.0375, 0.0425, 0.0500, 0.0550, 0.0600, 0.0675, 0.0725, 0.0775, 0.0825, 0.0900, 0.0950, 0.1000, 0.1075, 0.1125}, // 12
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950, 0.1000}, // 24
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950}, // 36
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0600, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0850, 0.0900}, // 48
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0600, 0.0650, 0.0700, 0.0750, 0.0775, 0.0825, 0.0875}, // 60
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0775, 0.0825}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0175, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0725, 0.0775, 0.0800}  // 84
 },

 { //[10] 550000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0050, 0.0100, 0.0150, 0.0225, 0.0275, 0.0325, 0.0400, 0.0450, 0.0500, 0.0550, 0.0625, 0.0675, 0.0725, 0.0800, 0.0850, 0.0900, 0.0950, 0.1025, 0.1075, 0.1125}, // 12
   {0.0025, 0.0075, 0.0125, 0.0175, 0.0225, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950, 0.1000}, // 24
   {0.0025, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0725, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950}, // 36
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0625, 0.0675, 0.0725, 0.0775, 0.0825, 0.0875, 0.0900}, // 48
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0600, 0.0675, 0.0700, 0.0750, 0.0800, 0.0825, 0.0875}, // 60
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0775, 0.0825}, // 72
   {0.0025, 0.0075, 0.0100, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0450, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825}  // 84
 },

 { //[11] 600000
   /*2.00%  2.50%   3.00%   3.50%   4.00%   4.50%   5.00%   5.50%   6.00%   6.50%   7.00%   7.50%   8.00%   8.50%   9.00%   9.50%   10.00%  10.50%  11.00%  11.50%  12.00%*/
   {0.0000, 0.0050, 0.0100, 0.0175, 0.0225, 0.0275, 0.0350, 0.0400, 0.0450, 0.0500, 0.0575, 0.0625, 0.0675, 0.0750, 0.0800, 0.0850, 0.0900, 0.0975, 0.1025, 0.1075, 0.1150}, // 12
   {0.0025, 0.0075, 0.0125, 0.0175, 0.0225, 0.0275, 0.0325, 0.0375, 0.0425, 0.0475, 0.0525, 0.0550, 0.0600, 0.0650, 0.0700, 0.0750, 0.0800, 0.0850, 0.0900, 0.0950, 0.1000}, // 24
   {0.0025, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0350, 0.0400, 0.0450, 0.0475, 0.0525, 0.0575, 0.0625, 0.0675, 0.0725, 0.0775, 0.0800, 0.0850, 0.0900, 0.0950}, // 36
   {0.0025, 0.0075, 0.0125, 0.0175, 0.0200, 0.0250, 0.0300, 0.0325, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0600, 0.0650, 0.0700, 0.0725, 0.0775, 0.0825, 0.0875, 0.0900}, // 48
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0250, 0.0275, 0.0325, 0.0375, 0.0400, 0.0450, 0.0500, 0.0525, 0.0575, 0.0600, 0.0675, 0.0700, 0.0750, 0.0800, 0.0825, 0.0875}, // 60
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0400, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0675, 0.0700, 0.0750, 0.0775, 0.0825}, // 72
   {0.0025, 0.0075, 0.0125, 0.0150, 0.0200, 0.0225, 0.0275, 0.0300, 0.0350, 0.0375, 0.0425, 0.0475, 0.0500, 0.0550, 0.0575, 0.0625, 0.0650, 0.0700, 0.0750, 0.0775, 0.0825}  // 84
 }
};

//--------------------------------------------------------------------------------------------------
float get_risk_cut_point(int loan_amt, int term, double max_apr)
{
 int i, j, k;
 double apr;

// printf ("%d,%d,%.9lf, ", loan_amt, term, max_apr);
 i = j = k = 0;
 apr = max_apr + 0.000000001;  // add a very small number to avoid the rounding when convert to float

 if (apr < 0.02) i = -1;
 else if (apr < 0.025) i = 0;
 else if (apr < 0.03)  i = 1;
 else if (apr < 0.035) i = 2;
 else if (apr < 0.04)  i = 3;
 else if (apr < 0.045) i = 4;
 else if (apr < 0.05)  i = 5;
 else if (apr < 0.055) i = 6;
 else if (apr < 0.06)  i = 7;
 else if (apr < 0.065) i = 8;
 else if (apr < 0.07)  i = 9;
 else if (apr < 0.075) i = 10;
 else if (apr < 0.08)  i = 11;
 else if (apr < 0.085) i = 12;
 else if (apr < 0.09)  i = 13;
 else if (apr < 0.095) i = 14;
 else if (apr < 0.1)   i = 15;
 else if (apr < 0.105) i = 16;
 else if (apr < 0.11)  i = 17;
 else if (apr < 0.115) i = 18;
 else if (apr < 0.12)  i = 19;
 else i = 20;

 if (term < 12) j = -1;
 else if (term < 24) j = 0;
 else if (term < 36) j = 1;
 else if (term < 48) j = 2;
 else if (term < 60) j = 3;
 else if (term < 72) j = 4;
 else if (term < 84) j = 5;
 else j = 6;

 if (loan_amt <  50000) k = -1;
 else if (loan_amt < 100000) k = 0;
 else if (loan_amt < 150000) k = 1;
 else if (loan_amt < 200000) k = 2;
 else if (loan_amt < 250000) k = 3;
 else if (loan_amt < 300000) k = 4;
 else if (loan_amt < 350000) k = 5;
 else if (loan_amt < 400000) k = 6;
 else if (loan_amt < 450000) k = 7;
 else if (loan_amt < 500000) k = 8;
 else if (loan_amt < 550000) k = 9;
 else if (loan_amt < 600000) k = 10;
 else k = 11;

// printf ("%d,%d,%.9lf,cut[%d][%d][%d]= ", loan_amt, term, apr, k, j, i);
 if ( i == -1 || j == -1 || k == -1)
    return(0.0);
 else
    return(risk_cut[k][j][i]);
}

//--------------------------------------------------------------------------------------------------
void print_cut_point()
{
  int i, j, k;

  for (k = 0; k < 12; k++)
     for (j = 0; j < 7; j++)
        for (i = 0; i < 21; i++)
           printf ("cut[%d][%d][%4.2f%%]= %5.4f\n",
            (k+1)*500000, (j+1)*12,  (2.0+i*0.5), risk_cut[k][j][i]);

}

//--------------------------------------------------------------------------------------------------
static char daytab[2][13] = {
 {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
 {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
};

int validate_date(char *date)  //format of date is yyymmdd
{
 int year, month, day, idate;
 int leap;

 if (date[0] == '\0') return 0;

 idate = atoi(date);
 year = idate / 10000;
 month = (idate % 10000) / 100;
 day = idate % 100;
 year += 1911;

 leap = (year%4 == 0 && year%100 != 0 || year%400 == 0);
 if (month > 12) return 0;
 if (day > daytab[leap][month]) return 0;

 return(1);
}

//--------------------------------------------------------------------------------------------------
int is_future0(char *date)  //format of date is yyymmdd
{
 time_t timer;
 struct tm *tblock;
 int year, month, day, idate;
 int leap;
 int curr_year, curr_mon, curr_day;

 if (date[0] == '\0') return 0;

 idate = atoi(date);
 year = idate / 10000;
 month = (idate % 10000) / 100;
 day = idate % 100;

 timer = time(NULL);
 tblock = localtime(&timer);
 curr_year = tblock->tm_year-11;
 curr_mon  = tblock->tm_mon+1;
 curr_day  = tblock->tm_mday;

 if (year > curr_year) return (1);
 else if (year < curr_year) return (0);
 else if (month > curr_mon) return (1);
 else if (month < curr_mon) return (0);
 else if (day > curr_day) return (1);
 else return (0);

}

int is_future(char *sysdate, char *date)  //format of date is yyymmdd
{
 time_t timer;
 struct tm *tblock;
 int year, month, day, idate;
 int leap;
 int curr_year, curr_mon, curr_day;

 if (date[0] == '\0') return 0;

 idate = atoi(date);
 year = idate / 10000;
 month = (idate % 10000) / 100;
 day = idate % 100;

 idate = atoi(sysdate);
 curr_year = idate / 10000;
 curr_mon  = (idate % 10000) / 100;
 curr_day  = idate % 100;

 if (year > curr_year) return (1);
 else if (year < curr_year) return (0);
 else if (month > curr_mon) return (1);
 else if (month < curr_mon) return (0);
 else if (day > curr_day) return (1);
 else return (0);

}
//--------------------------------------------------------------------------------------------------
int is_future_year0(int year)  //format of year is yyy
{
 time_t timer;
 struct tm *tblock;
 int curr_year;

 timer = time(NULL);
 tblock = localtime(&timer);
 curr_year = tblock->tm_year-11;

 if (year > curr_year) return (1);
 else return (0);
}

//--------------------------------------------------------------------------------------------------
int is_future_year(char *sysdate, int year)  //format of year is yyy
{
 time_t timer;
 struct tm *tblock;
 int curr_year, idate;

 idate = atoi(sysdate);
 curr_year = idate / 10000;

 if (year > curr_year) return (1);
 else return (0);
}
//--------------------------------------------------------------------------------------------------
char *CurrTime_MinGuo ()
{
 time_t timer;
 struct tm *tblock;
 static char buf[20];

 timer = time(NULL);
 tblock = localtime(&timer);
 sprintf (buf, "%03d%02d%02d%02d%02d%02d", tblock->tm_year-11, tblock->tm_mon+1,
          tblock->tm_mday, tblock->tm_hour, tblock->tm_min, tblock->tm_sec);
 return (buf);
}

//--------------------------------------------------------------------------------------------------
int age0 (char *date)
{
 time_t timer;
 struct tm *tblock;
 static char buf[20];
 int curr_year, curr_mon, curr_day;
 int birth_year, birth_mon, birth_day, idate;
 int year, month, day;

 if (date[0] == '\0') return -1000;

 idate = atoi(date);
 birth_year = idate / 10000;
 birth_mon = (idate % 10000) / 100;
 birth_day = idate % 100;

 timer = time(NULL);
 tblock = localtime(&timer);
 curr_year = tblock->tm_year-11;
 curr_mon  = tblock->tm_mon+1;
 curr_day  = tblock->tm_mday;

 day = curr_day - birth_day;

 if (day < 0)
    month = curr_mon - birth_mon - 1;
 else
    month = curr_mon - birth_mon;

 if (month < 0)
    year = curr_year - birth_year - 1;
 else
    year = curr_year - birth_year;

 return (year);
}

//--------------------------------------------------------------------------------------------------
int age (char *sysdate, char *date)
{
 static char buf[20];
 int curr_year, curr_mon, curr_day;
 int birth_year, birth_mon, birth_day, idate;
 int year, month, day;

 if (date[0] == '\0') return -1000;

 idate = atoi(date);
 birth_year = idate / 10000;
 birth_mon = (idate % 10000) / 100;
 birth_day = idate % 100;
// printf ("birth year=%d, month=%d, day=%d.\n", birth_year, birth_mon, birth_day);

 idate = atoi(sysdate);

 curr_year = idate / 10000;
 curr_mon  = (idate % 10000) / 100;
 curr_day  = idate % 100;
// printf ("current year=%d, month=%d, day=%d.\n", curr_year, curr_mon, curr_day);
 day = curr_day - birth_day;

 if (day < 0)
    month = curr_mon - birth_mon - 1;
 else
    month = curr_mon - birth_mon;

 if (month < 0)
    year = curr_year - birth_year - 1;
 else
    year = curr_year - birth_year;
// printf ("year=%d, month=%d, day=%d.\n", year, month, day);

 return (year);
}

//--------------------------------------------------------------------------------------------------
int foreigner(char *idn)
{
 if (IS_LETTER(idn[0]) && (idn[1]== '1' || idn[1] == '2'))
    return(0);
 else
    return(1);
}

//--------------------------------------------------------------------------------------------------
