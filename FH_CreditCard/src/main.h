//---------------------------------------------------------------------------

#ifndef mainH
#define mainH

#define CONNECTION_STRING  "FILE NAME=./AdoConnect.udl"
#define NSTEPS (sizeof step / sizeof step[0])
#define DEBUG  if (Debug) fprintf
//---------------------------------------------------------------------------
char * CurrDateTime ();

enum SQLCodes { Drop_Input_Table,
                Create_Input_Table,
                Create_Proc_Load_Input_Table,
                Execute_Proc_Load_Input_Table,
                Drop_Proc_Load_Input_Table,
                Create_Index_u_statementMonth_idn_on_Input,
                Create_Index_i_statementMonth_on_Input,
                Create_Index_i_idn_on_Input,

                Calculate_Month_Since,
                Create_Proc_Assign_ALL_PayCode,
                Execute_Proc_Assign_ALL_PayCode,
                Drop_Proc_Assign_ALL_PayCode,

                Create_Proc_Assign_SegCode,
                Execute_Proc_Assign_SegCode,
                Drop_Proc_Assign_SegCode,

                Create_Proc_Assign_AccountAge,
                Execute_Proc_Assign_AccountAge,
                Drop_Proc_Assign_AccountAge,

                Drop_Vars_Table,
                Create_Vars_Table,
                Create_Proc_Load_Vars_Table,
                Execute_Proc_Load_Vars_Table,
                Drop_Proc_Load_Vars_Table,
                Create_Index_u_idn_on_Vars,

                Create_Proc_Calculate_Variables_Scores,
                Execute_Proc_Calculate_Variables_Scores,
                Drop_Proc_Calculate_Variables_Scores,

                Update_Propensity,
		Update_Twentile,
                Update_PD_For_Flag_12,
                Update_PD_For_Flag_11,
                Update_PD_For_Flag_10,
                Update_Risk_Group,
                Update_Risk_Level_For_Flag_10_11_12,

                Create_Proc_Generate_Profile,
                Execute_Proc_Generate_Profile,
                Drop_Proc_Generate_Profile,

                Create_Proc_Generate_Score,
                Execute_Proc_Generate_Score,
                Drop_Proc_Generate_Score,

                End_of_SQL};

int step[] = {
 Drop_Input_Table,
 Create_Input_Table,
 Drop_Proc_Load_Input_Table,
 Create_Proc_Load_Input_Table,
 Execute_Proc_Load_Input_Table,
 Drop_Proc_Load_Input_Table,
 Create_Index_u_statementMonth_idn_on_Input,
 Create_Index_i_statementMonth_on_Input,
 Create_Index_i_idn_on_Input,
 Calculate_Month_Since,
 Drop_Proc_Assign_ALL_PayCode,
 Create_Proc_Assign_ALL_PayCode,
 Execute_Proc_Assign_ALL_PayCode,
 Drop_Proc_Assign_ALL_PayCode,
 Drop_Proc_Assign_SegCode,
 Create_Proc_Assign_SegCode,
 Execute_Proc_Assign_SegCode,
 Drop_Proc_Assign_SegCode,
 Drop_Proc_Assign_AccountAge,
 Create_Proc_Assign_AccountAge,
 Execute_Proc_Assign_AccountAge,
 Drop_Proc_Assign_AccountAge,
 Drop_Vars_Table,
 Create_Vars_Table,
 Drop_Proc_Load_Vars_Table,
 Create_Proc_Load_Vars_Table,
 Execute_Proc_Load_Vars_Table,
 Drop_Proc_Load_Vars_Table,
 Create_Index_u_idn_on_Vars,
 Drop_Proc_Calculate_Variables_Scores,
 Create_Proc_Calculate_Variables_Scores,
 Execute_Proc_Calculate_Variables_Scores,
 Drop_Proc_Calculate_Variables_Scores,
 Update_Propensity,
 Update_Twentile,
 Update_PD_For_Flag_12,
 Update_PD_For_Flag_11,
 Update_PD_For_Flag_10,
 Update_Risk_Group,
 Drop_Proc_Generate_Profile,
 Create_Proc_Generate_Profile,
 Execute_Proc_Generate_Profile,
 Drop_Proc_Generate_Profile,
 Drop_Proc_Generate_Score,
 Create_Proc_Generate_Score,
 Execute_Proc_Generate_Score,
 Drop_Proc_Generate_Score,
 Drop_Input_Table,
 Drop_Vars_Table,
 End_of_SQL
};

char *SQLNames[]= {"Drop_Input_Table",
                "Create_Input_Table",
                "Create_Proc_Load_Input_Table",
                "Execute_Proc_Load_Input_Table",
                "Drop_Proc_Load_Input_Table",
                "Create_Index_u_statementMonth_idn_on_Input",
                "Create_Index_i_statementMonth_on_Input",
                "Create_Index_i_idn_on_Input",
                "Calculate_Month_Since",
                "Create_Proc_Assign_ALL_PayCode",
                "Execute_Proc_Assign_ALL_PayCode",
                "Drop_Proc_Assign_ALL_PayCode",
                "Create_Proc_Assign_SegCode",
                "Execute_Proc_Assign_SegCode",
                "Drop_Proc_Assign_SegCode",
                "Create_Proc_Assign_AccountAge",
                "Execute_Proc_Assign_AccountAge",
                "Drop_Proc_Assign_AccountAge",
                "Drop_Vars_Table",
                "Create_Vars_Table",
                "Create_Proc_Load_Vars_Table",
                "Execute_Proc_Load_Vars_Table",
                "Drop_Proc_Load_Vars_Table",
                "Create_Index_u_idn_on_Vars",
                "Create_Proc_Calculate_Variables_Scores",
                "Execute_Proc_Calculate_Variables_Scores",
                "Drop_Proc_Calculate_Variables_Scores",
                "Update_Propensity",
                "Update_Twentile",
 		"Update_PD_For_Flag_12",
                "Update_PD_For_Flag_11",
                "Update_PD_For_Flag_10",
                "Update_Risk_Group",
                "Update_Risk_Level_For_Flag_10_11_12",
                "Create_Proc_Generate_Profile",
                "Execute_Proc_Generate_Profile",
                "Drop_Proc_Generate_Profile",
                "Create_Proc_Generate_Score",
                "Execute_Proc_Generate_Score",
                "Drop_Proc_Generate_Score"
 };


char *SQLCommands[] = {
/* Drop_Input_Table */
" if exists (select * from dbo.sysobjects where id = object_id(N'[source_adv]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"    drop table source_adv;"
" if exists (select * from dbo.sysobjects where id = object_id(N'[account_adv]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"    drop table account_adv;",

/* Create_Input_Table */
" CREATE TABLE [source_adv] ("
"        [Statement_month] [varchar] (8) NULL,"
"        [Account_Status] [varchar] (3) NULL,"
"        [Inactive_date_for_status_6] [float] NULL,"
"        [Credit_Limit] [float] NULL,"
"        [Purchase_Average_Daily_Balance] [float] NULL,"
"        [Cash_Average_Daily_Balance] [float] NULL,"
"        [Purchase_amount] [float] NULL,"
"        [Purchase_count] [float] NULL,"
"        [Cash_amount] [float] NULL,"
"        [Cash_Advance_count] [float] NULL,"
"        [Interest_charge] [float] NULL,"
"        [Late_Fee_Assessed] [float] NULL,"
"        [Payment_Amount] [float] NULL,"
"        [Minimum_Payment] [float] NULL,"
"        [__cycles_Past_Due] [float] NULL,"
"        [Total_bal_on_bill] [float] NULL,"
"        [PayCode] [char](1) NULL,"
"        [flag] [int] NULL,"
"        [month_since] [int] NULL,"
"        [age] [int] NULL,"
"        [idn] [char] (11) NULL"
" );"
" CREATE TABLE [account_adv] ("
"        [account_open_date] [float] NULL,"
"        [gender] [varchar] (1) NULL,"
"        [Home_ownership] [varchar] (1) NULL,"
"        [Educational_Level] [varchar] (1) NULL,"
"        [Marital_status] [varchar] (1) NULL,"
"        [idn] [char] (11) NULL"
" );",

/* Create_Proc_Load_Input_Table */
/*
  The sql code is changed according to the request of FUHWA that DAC module is run with the specific
  cycle date and generate new risk group cutting.
  1. Load input account and statement data in the cycle date
  2. create new 2 output tables credit_card_monthly_pd_riskgroup and credit_card_monthly_profile_riskgroup
  3. generate new risk group cutting.
*/
" CREATE PROCEDURE Load_Input_Table"
" (@cycle_date varchar(8))"
" AS"
" declare @target_month varchar(8)"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @dd int"
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" set @dd = cast (@cycle_date as int) % 100"
" if @dd = 1"
"  begin"
"    if @mm <= 1"
"       begin"
"          set @mm = @mm - 1 + 12"
"          set @yyyy = @yyyy - 1"
"       end"
"    else"
"       set @mm = @mm - 1"
"  end"
" set @target_month = cast ((@yyyy * 100 + @mm) as char(6))"
" "
" insert into account_adv ([account_open_date], [gender], [home_ownership], [educational_level], [Marital_status], [idn])"
"  select [account open date], [gender], [home ownership], [educational level], [Marital status], [Customer id]"
"  from account"
"  where [cycle date] = @cycle_date "
" declare month_cur CURSOR local scroll static for"
"    select top 13 [statement month]"
"      from statement"
"      where [statement month] <= @target_month"
"      group by [statement month]"
"      order by [statement month] desc;"
" open month_cur"
" declare @month varchar(8)"
" fetch next from month_cur into @month"
" while (@@fetch_status = 0)"
"  begin"
"     insert into source_adv (Statement_month, Account_Status, Inactive_date_for_status_6, Credit_Limit, Purchase_Average_Daily_Balance,"
"       Cash_Average_Daily_Balance, Purchase_amount, Purchase_count, Cash_amount, Cash_Advance_count, Interest_charge,"
"       Late_Fee_Assessed, Payment_Amount, Minimum_Payment, __cycles_Past_Due, Total_bal_on_bill, idn)"
"     select [Statement month], [Account Status], [Inactive date for status 6], [Credit Limit], [Purchase Average Daily Balance],"
"       [Cash Average Daily Balance], [Purchase amount], [Purchase count], [Cash amount], [Cash Advance count], [Interest charge],"
"       [Late Fee Assessed], [Payment Amount], [Minimum Payment], [# cycles Past Due], [Total bal on bill], [Customer id]"
"     from statement"
"     where [statement month] = @month"
"       and [Customer id] in (select idn from account_adv)"
"     fetch next from month_cur into @month"
"  end"
" close month_cur"
" deallocate month_cur",


/* Execute_Proc_Load_Input_Table */
"EXEC Load_Input_Table :v1",

/* Drop_Proc_Load_Input_Table */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Load_Input_Table]')"
" and OBJECTPROPERTY(id, N'IsProcedure') = 1)"
"drop procedure [Load_Input_Table]",

/* Create_Index_u_statementMonth_idn_on_Input */
" create unique index u_statementMonth_idn on source_adv (statement_month, idn);",
/* Create_Index_i_statementMonth_on_Input */
" create index i_statementMonth on source_adv (statement_month);",
/* Create_Index_i_idn_on_Input */
" create index i_idn on source_adv (idn);",

/* Calculate_Month_Since  */
"    update source_adv"
"    set month_since ="
"      (cast (substring(statement_month,1,4) as int) - 1911) * 12 +"
"       cast (substring(statement_month,5,2) as int);",


/*  Create_Proc_Assign_ALL_PayCode */
" CREATE PROCEDURE Assign_ALL_PayCode"
" AS"
" declare month_cur CURSOR local scroll static for"
"    select distinct statement_month"
"      from source_adv"
"      order by statement_month asc;"
" open month_cur"
" declare @month varchar(8)"
" fetch next from month_cur into @month"
" fetch next from month_cur into @month"
" while (@@fetch_status = 0)"
"  begin"
" update source_adv set paycode = 'A'"
" from source_adv as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 and"
"                    minimum_payment = 0 and"
"                    (purchase_average_daily_balance + cash_average_daily_balance <> 0 or"
"                    purchase_amount + cash_amount <> 0) );"
" update source_adv set paycode = 'X'"
" from source_adv as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 and"
"                    minimum_payment = 0 and"
"                    purchase_average_daily_balance + cash_average_daily_balance = 0 and"
"                    purchase_amount + cash_amount = 0 );"
" update source_adv set paycode = 'X'"
" from source_adv as a"
" where statement_month = @month and"
"      not exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 );"
" update source_adv set paycode = 'F'"
" from source_adv as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount = 0);"
" update source_adv set paycode = 'E'"
" from source_adv as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount <  minimum_payment);"
" update source_adv set paycode = 'D'"
" from source_adv as a"
" where statement_month = @month and"
"      interest_charge > 0 and"
"      late_fee_assessed > 0 and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source_adv set paycode = 'C'"
" from source_adv as a"
" where statement_month = @month and"
"      interest_charge > 0 and"
"      late_fee_assessed <= 0 and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source_adv set paycode = 'B'"
" from source_adv as a"
" where statement_month = @month and"
"      interest_charge <= 0 and"
"      late_fee_assessed > 0 and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source_adv set paycode = 'A'"
" from source_adv as a"
" where statement_month = @month and"
"      interest_charge <= 0 and"
"      late_fee_assessed <= 0 and"
"      exists ( select idn"
"              from source_adv as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
"     fetch next from month_cur into @month"
"  end"
" close month_cur"
" deallocate month_cur",

/* Execute_Proc_Assign_ALL_PayCode */
"EXEC Assign_ALL_PayCode",

/* Drop_Proc_Assign_ALL_PayCode */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Assign_ALL_PayCode]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Assign_ALL_PayCode];",

/* CREATE PROCEDURE Assign_SegCode */
" CREATE PROCEDURE Assign_SegCode"
" (@cycle_date varchar(8))"
" AS"
" declare @target_month varchar(6)"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @dd int"
" declare @six_month_ago varchar(10)"
" declare @next_month varchar(10)"
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" set @dd = cast (@cycle_date as int) % 100"
" if @dd = 1"
"  begin"
"    if @mm <= 1"
"       begin"
"          set @mm = @mm - 1 + 12"
"          set @yyyy = @yyyy - 1"
"       end"
"    else"
"       set @mm = @mm - 1"
"  end"
" set @target_month = cast ((@yyyy * 100 + @mm) as char(6))"
" "
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = (@yyyymm - @yyyymm % 100 ) / 100"
" set @mm = @yyyymm % 100"
" if  @mm <= 6"
" begin"
"  set @mm = @mm - 6 + 12"
"  set @yyyy = @yyyy - 1"
" end"
" else"
"  set @mm = @mm - 6"
" set @six_month_ago = cast (((@yyyy * 100 + @mm) * 100 + @dd) as char(8))"
" set @next_month = @cycle_date"
" "
" update source_adv"
" set flag = 8"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date] >=@six_month_ago and"
"       paycode in ('E', 'F');"
" update source_adv"
" set flag = 7"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date] >=@six_month_ago and"
"       paycode not in ('E', 'F');"
" update source_adv"
" set flag = 9"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"      ( account_status=6 and (inactive_date_for_status_6 <@next_month or inactive_date_for_status_6 is null ));"
" update source_adv"
" set flag = 10"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 = (select SUM(interest_charge)"
"            from source_adv c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since) and"
"       12<= (select count(*)"
"             from source_adv c"
"             where b.idn = c.idn and"
"                   c.month_since between b.month_since - 11 and b.month_since and"
"                   paycode='X');"
" update source_adv"
" set flag = 11"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 = (select SUM(interest_charge)"
"            from source_adv c"
"            where b.idn = c.idn and"
"            c.month_since between b.month_since - 11 and b.month_since) and"
"       12> (select count(*)"
"            from source_adv c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since and"
"                  paycode='X');"
" update source_adv"
" set flag = 12"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 < (select SUM(interest_charge)"
"            from source_adv c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since);"
" update source_adv"
" set flag = 0"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode in ('E', 'F');"
" update source_adv"
" set flag = 1"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 1;"
" update source_adv"
" set flag = 2"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 2;"
" update source_adv"
" set flag = 3"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 3;"
" update source_adv"
" set flag = 4"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 4;"
" update source_adv"
" set flag = 5"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 5;"
" update source_adv"
" set flag = 6"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account_Open_Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due >=6;"
" update source_adv"
" set flag = (case when __cycles_past_due = 1 then 1"
"             when __cycles_past_due = 2 then 2"
"             when __cycles_past_due = 3 then 3"
"             when __cycles_past_due = 4 then 4"
"             when __cycles_past_due = 5 then 5"
"             when __cycles_past_due >= 6 then 6"
"             end)"
" where statement_month = @target_month"
"   and flag = 12"
"   and __cycles_past_due >0",

/* Execute_Proc_Assign_SegCode */
"EXEC Assign_SegCode :v1",

/* Drop_Proc_Assign_SegCode */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Assign_SegCode]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Assign_SegCode];",

/* CREATE PROCEDURE Assign_AccountAge */
/* Old definition of account age, different of current cycle date from account
   open date.
" CREATE PROCEDURE Assign_AccountAge"
" (@cycle_date varchar(8))"
" AS"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @dd int"
" declare @six_month_ago varchar(10)"
" declare @twelve_month_ago varchar(10)"
" declare @twentyfour_month_ago varchar(10)"
" declare @target_month varchar(6)"
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" set @dd = cast (@cycle_date as int) % 100"
" if @dd = 1"
"  begin"
"    if @mm <= 1"
"       begin"
"          set @mm = @mm - 1 + 12"
"          set @yyyy = @yyyy - 1"
"       end"
"    else"
"       set @mm = @mm - 1"
"  end"
" set @target_month = cast ((@yyyy * 100 + @mm) as char(6))"
" "
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" if  @mm <= 6"
" begin"
"  set @mm = @mm - 6 + 12"
"  set @yyyy = @yyyy - 1"
" end"
" else"
"  set @mm = @mm - 6"
" set @six_month_ago = cast (((@yyyy * 100 + @mm) * 100 + @dd) as char(8))"
""
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = (@yyyymm - @yyyymm % 100 ) / 100"
" set @mm = @yyyymm % 100"
" set @twelve_month_ago = cast (((@yyyy - 1) * 100 + @mm) * 100 + @dd as char(8))"
" set @twentyfour_month_ago = cast (((@yyyy - 2) * 100 + @mm) * 100 + @dd as char(8))"
" "
" update source_adv"
" set age = 0"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[account_open_date] >= @six_month_ago;"
" update source_adv"
" set age = 1"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[account_open_date] >=@twelve_month_ago and"
"       a.[account_open_date] <@six_month_ago;"
" update source_adv"
" set age = 2"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[account_open_date] >=@twentyfour_month_ago and"
"       a.[account_open_date] <@twelve_month_ago;"
" update source_adv"
" set age = 3"
" from account_adv a, source_adv b"
" where a.[idn] = b.idn"
"   and b.statement_month=@target_month"
"   and a.[account_open_date] <@twentyfour_month_ago",
*/
/* New definition of account age of an account, number of statements issued
   The number of statements of each account is re-calculated to avoid the
   situation that the job is rerun for the same cycle date.
*/
" CREATE PROCEDURE Assign_AccountAge"
" (@cycle_date varchar(8))"
" AS"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @dd int"
" declare @six_month_ago varchar(10)"
" declare @twelve_month_ago varchar(10)"
" declare @twentyfour_month_ago varchar(10)"
" declare @target_month varchar(6)"
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" set @dd = cast (@cycle_date as int) % 100"
" if @dd = 1"
"  begin"
"    if @mm <= 1"
"       begin"
"          set @mm = @mm - 1 + 12"
"          set @yyyy = @yyyy - 1"
"       end"
"    else"
"       set @mm = @mm - 1"
"  end"
" set @target_month = cast ((@yyyy * 100 + @mm) as char(6))"
" "
" select [customer id], count(*) as num_stmt"
" into #statement_count"
" from statement"
" where [statement month] <= @target_month"
" group by [customer id]"
" update source_adv"
" set age = (case when b.num_stmt <= 6  then 0"
"                 when b.num_stmt <= 12 then 1"
"                 when b.num_stmt <= 24 then 2"
"                 else 3 end)"
" from source_adv a, #statement_count b"
" where a.idn = b.[customer id]"
"   and a.statement_month = @target_month;",



/* Execute_Proc_Assign_AccountAge */
"EXEC Assign_AccountAge :v1",

/* Drop_Proc_Assign_AccountAge */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Assign_AccountAge]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Assign_AccountAge];",


/* Drop_Vars_Table */
" if exists (select * from dbo.sysobjects where id = object_id(N'[vars_adv]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
" drop table [vars_adv];",

/* Create_Vars_Table */
" CREATE TABLE [vars_adv] ("
"        [Statement_month] [varchar] (8) NULL,"
"        [idn] [char] (11) NULL,"
"        [PayCode] [char] (1) NULL,"
"        [flag] [int] NULL,"
"        [age] [int] NULL,"
"        [month_since] [int] NULL,"
"        [beg_adb] [float] NULL,"
"        [beg_rev_adb] [float] NULL,"
"        [beg_revolver] [int] NULL,"
"        [propensity] [int] NULL,"
"        [segment] [int] NULL,"
"        [gender] [varchar] (1) NULL,"
"        [educational_level] [varchar] (1) NULL,"
"        [home_ownership] [varchar] (1) NULL,"
"        [marital_status] [varchar] (1) NULL,"
"        [gender_tran] [decimal](16, 8) default 0.0,"
"        [edu_tran] [decimal] (16, 8) default 0.0,"
"        [edu_tran2] [decimal] (16, 8) default 0.0,"
"        [ownership1] [decimal] (16, 8) default 0.0,"
"        [index2] [decimal] (16, 8) default 0.0,"
"        [marriage_t] [decimal] (16, 8) default 0.0,"
"        [marriage_i2] [decimal] (16, 8) default 0.0,"
"        [AMFS001_06] [decimal] (16, 8) default 0.0,"
"        [AMFS001_06_z] [decimal] (16, 8) default 0.0,"
"        [AMFS004_12] [decimal] (16, 8) default 0.0,"
"        [AMFS004_12_tran] [decimal] (16, 8) default 0.0,"
"        [AMFS014_03] [decimal] (16, 8) default 0.0,"
"        [AMFS014_03_q] [decimal] (16, 8) default 0.0,"
"        [AMFS014_12] [decimal] (16, 8) default 0.0,"
"        [AMFS014_12_tran] [decimal] (16, 8) default 0.0,"
"        [AMFS016_03] [decimal] (16, 8) default 0.0,"
"        [AMFS016_09] [decimal] (16, 8) default 0.0,"
"        [AMFS016_03_tran] [decimal] (16, 8) default 0.0,"
"        [AMMS035_06] [decimal] (16, 8) default 0.0,"
"        [AMMS035_06_r] [decimal] (16, 8) default 0.0,"
"        [AMMS035_06_r_tran] [decimal] (16, 8) default 0.0,"
"        [AMMS060_12] [decimal] (16, 8) default 0.0,"
"        [AMMS060_12_q] [decimal] (16, 8) default 0.0,"
"        [AMMS061_03] [decimal] (16, 8) default 0.0,"
"        [AMMS061_06] [decimal] (16, 8) NULL default 0.0,"
"        [AMMT061_43] [decimal] (16, 8) NULL default 0.0,"
"        [AMMT061_43_tran] [decimal] (16, 8) default 0.0,"
"        [AMMS066_09] [decimal] (16, 8) default 0.0,"
"        [AMMS066_09_tran] [decimal] (16, 8) default 0.0,"
"        [score] [float] NULL,"
"        [risk_level] [char] (1) NULL,"
"        [pd] [decimal] (7, 4) NULL,"
"        [risk_group] [int]  NULL"
" );",

/* Load_Vars_Table */
/* Create_Proc_Load_Vars_Table */
" CREATE PROCEDURE Load_Vars_Table"
" (@cycle_date varchar(8))"
" AS"
" declare @target_month varchar(6)"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @dd int"
" set @yyyymm = cast (substring(@cycle_date, 1, 6) as int)"
" set @yyyy = cast (substring(@cycle_date, 1, 4) as int)"
" set @mm = @yyyymm % 100"
" set @dd = cast (@cycle_date as int) % 100"
" if @dd = 1"
"  begin"
"    if @mm <= 1"
"       begin"
"          set @mm = @mm - 1 + 12"
"          set @yyyy = @yyyy - 1"
"       end"
"    else"
"       set @mm = @mm - 1"
"  end"
" set @target_month = cast ((@yyyy * 100 + @mm) as char(6))"
" insert into vars_adv (statement_month, idn, paycode, flag, age, month_since, beg_adb, beg_revolver)"
" select statement_month, idn, paycode, flag, age, month_since,"
"  Purchase_Average_Daily_Balance+Cash_Average_Daily_Balance, (case when interest_charge > 0 then 1 else 0 end)"
" from source_adv"
" where statement_month=@target_month;",

/* Execute_Proc_Load_Vars_Table */
" EXEC Load_Vars_Table :v1",

/* Drop_Proc_Load_Vars_Table */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Load_Vars_Table]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Load_Vars_Table];",


/* Create_Index_u_idn_on_Vars */
" create unique index u_idn on vars_adv (idn);",

/*  Create_Proc_Calculate_Variables_Scores */
" CREATE PROCEDURE Calculate_Variables_Scores"
" AS"
" update vars_adv"
" set gender= a.gender,"
"     educational_level = a.educational_level,"
"     home_ownership = a.home_ownership,"
"     marital_status = a.marital_status,"
"     beg_rev_adb = beg_adb * beg_revolver"
" from  account_adv a"
" where vars_adv.idn=a.idn;"
" update vars_adv"
" set AMMS035_06="
" (select  AVG(credit_limit - total_bal_on_bill) /  AVG(credit_limit)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 5 and vars_adv.month_since)"
" where flag in (11, 12) and age = 1;"
" update vars_adv"
" set AMMS035_06_r = (case when AMMS035_06 >= 0 then SQRT(AMMS035_06)"
"                         else NULL"
"                    end)"
" where flag in (11, 12) and age = 1;"
" update vars_adv"
" set AMFS016_03="
" (select  count(*)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn"
"    and a.month_since between vars_adv.month_since - 2 and vars_adv.month_since"
"    and a.Late_Fee_Assessed > 0)"
" where flag in (11, 12) and age = 1;"
" update vars_adv"
" set AMFS016_03_tran = (case"
"                           when AMFS016_03 > 2 then 2"
"                           else AMFS016_03"
"                        end),"
"     AMMS035_06_r_tran = (case when AMMS035_06_r is NULL then 0"
"                            when AMMS035_06_r > 1 then 1"
"                            else AMMS035_06_r"
"                          end),"
"     gender_tran = (case when gender = 1 then 1"
"                     else 0"
"                   end),"
"     edu_tran = (case when educational_level not in ('1','2','3') then 1"
"                   else 0"
"                 end),"
"     ownership1 = (case when home_ownership = 1 then 1"
"                     else 0"
"                   end)"
" where flag in (11, 12) and age = 1;"
" update vars_adv"
" set AMMS061_03 ="
" (select  (SUM(purchase_average_daily_balance + cash_average_daily_balance) / SUM(credit_limit)) / 3"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        paycode in ('C', 'D', 'E', 'F') and"
"        a.month_since between vars_adv.month_since - 2 and vars_adv.month_since)"
" where flag in (11, 12) and age in (2, 3)"
"   and exists (select  *  from  source_adv a"
"               where vars_adv.idn=a.idn and"
"                     paycode in ('C', 'D', 'E', 'F') and"
"                     a.month_since between vars_adv.month_since - 2 and vars_adv.month_since);"
" update vars_adv"
" set AMMS061_06="
" (select  (SUM(purchase_average_daily_balance + cash_average_daily_balance) / SUM(credit_limit)) / 6"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        paycode in ('C', 'D', 'E', 'F') and"
"        a.month_since between vars_adv.month_since - 5 and vars_adv.month_since)"
" where flag in (11, 12) and age in (2, 3)"
"   and exists (select  *  from  source_adv a"
"               where vars_adv.idn=a.idn and"
"                     paycode in ('C', 'D', 'E', 'F') and"
"                     a.month_since between vars_adv.month_since - 5 and vars_adv.month_since);"
" update vars_adv"
" set AMFS004_12="
" (select  count(*)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 11 and vars_adv.month_since and"
"        a.cash_amount > 0)"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set AMMS060_12="
" (select  AVG(purchase_average_daily_balance + cash_average_daily_balance) / AVG(credit_limit)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        paycode in ('C', 'D', 'E', 'F') and"
"        a.month_since between vars_adv.month_since - 11 and vars_adv.month_since)"
" where flag in (11, 12) and age in (2, 3)"
"   and exists (select *"
"               from  source_adv a"
"               where vars_adv.idn=a.idn and"
"                     paycode in ('C', 'D', 'E', 'F') and"
"                     a.month_since between vars_adv.month_since - 11 and vars_adv.month_since);"
" update vars_adv"
" set AMMS066_09="
" (select  max(payment_amount / total_bal_on_bill)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 9 and vars_adv.month_since - 1 and"
"        a.total_bal_on_bill > 0)"
" where flag in (11, 12) and age in (2, 3)"
"   and exists (select *"
"               from  source_adv a"
"               where vars_adv.idn=a.idn and"
"                     a.month_since between vars_adv.month_since - 9 and vars_adv.month_since - 1 and"
"                     a.total_bal_on_bill > 0);"
" update vars_adv"
" set AMFS014_12="
" (select  count(*)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 11 and vars_adv.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set AMFS014_03="
" (select  count(*)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 2 and vars_adv.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set AMFS001_06="
" (select  SUM(Cash_Advance_count)"
"  from  source_adv"
"  where vars_adv.idn=idn and"
"           month_since between vars_adv.month_since - 5 and vars_adv.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and age in (2, 3) and exists (select *"
"  from  source_adv"
"  where vars_adv.idn=idn and"
"           month_since between vars_adv.month_since - 5 and vars_adv.month_since and"
"           cash_advance_count > 0);"
" update vars_adv"
" set amfs016_09="
" (select  count(*)"
"  from  source_adv a"
"  where vars_adv.idn=a.idn and"
"        a.month_since between vars_adv.month_since - 8 and vars_adv.month_since and"
"        a.late_fee_assessed > 0)"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set AMFS004_12_tran = (case when AMFS004_12 > 4 then 4"
"                          else AMFS004_12"
"                        end),"
"     AMMT061_43 = AMMS061_03 - (AMMS061_06 - AMMS061_03),"
"     AMMS060_12_q = AMMS060_12 * AMMS060_12,"
"     AMMS066_09_tran= (case when AMMS066_09 > 2.4 then 2.4"
"                            else AMMS066_09"
"                       end),"
"     AMFS014_03_q = AMFS014_03 * AMFS014_03,"
"     AMFS001_06_z = (case when AMFS001_06 = 0 then 1"
"                          else 0"
"                     end),"
"     edu_tran2 = (case when educational_level not in ('1','2','3','4') then 1"
"                   else 0"
"                 end),"
"     marriage_t = (case when marital_status = '1' then 1"
"                     when marital_status = '2' then 2"
"                     else 3"
"                   end),"
"     index2 = (case when age = 2 then 1"
"                 else 0"
"               end)"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set marriage_i2= marriage_t * index2,"
"     AMMT061_43_tran= (case when AMMT061_43 < 0 then 0.02"
"                            else AMMT061_43"
"                         end)"
" where flag in (11, 12) and age in (2, 3);"
" update vars_adv"
" set score = 0.0566"
"           + AMMT061_43_tran * 0.17151"
"           + AMFS014_12 * 0.0191"
"           + AMFS004_12_tran * 0.02875"
"           + AMMS060_12_q * 0.09258"
"           + AMMS066_09_tran * -0.04762"
"           + edu_tran2* 0.02766"
"           + AMFS014_03_q * 0.03393"
"           + AMFS001_06_z * -0.047"
"           + AMFS016_09 * 0.01189"
"           + marriage_i2 * 0.014"
" where flag in (11, 12) and age in (2, 3);"
"update vars_adv"
" set score = 0.38056"
"           + AMMS035_06_r_tran * -0.42027"
"           + AMFS016_03_tran * 0.06839"
"           + gender_tran * 0.04519"
"           + edu_tran * 0.03736"
"           + ownership1 * -0.02698"
" where flag in (11, 12) and age = 1;",

/* Execute_Proc_Calculate_Variables_Scores */
"EXEC Calculate_Variables_Scores",

/* Drop_Proc_Calculate_Variables_Scores */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Calculate_Variables_Scores]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Calculate_Variables_Scores];",

/* Update_Propensity */
" update vars_adv"
" set propensity ="
"   case"
"     when beg_rev_adb  = 0     then 0"
"     when beg_rev_adb <= 3833  then 1"
"     when beg_rev_adb <= 8000  then 2"
"     when beg_rev_adb <= 12054 then 3"
"     when beg_rev_adb <= 16031 then 4"
"     when beg_rev_adb <= 20117 then 5"
"     when beg_rev_adb <= 24243 then 6"
"     when beg_rev_adb <= 27451 then 7"
"     when beg_rev_adb <= 32446 then 8"
"     when beg_rev_adb <= 40298 then 9"
"     when beg_rev_adb <= 46801 then 10"
"     when beg_rev_adb <= 64703 then 11"
"     else                           12"
"   end"
" where age = 1 and flag=12;"
" update vars_adv"
" set propensity ="
"   case"
"     when beg_rev_adb  = 0     then 0"
"     when beg_rev_adb <= 3498  then 1"
"     when beg_rev_adb <= 8695  then 2"
"     when beg_rev_adb <= 14359 then 3"
"     when beg_rev_adb <= 20032 then 4"
"     when beg_rev_adb <= 24805 then 5"
"     when beg_rev_adb <= 28767 then 6"
"     when beg_rev_adb <= 36865 then 7"
"     when beg_rev_adb <= 44588 then 8"
"     when beg_rev_adb <= 61624 then 9"
"     else                          10"
"   end"
" where age = 2 and flag=12;"
" update vars_adv"
" set propensity ="
"   case"
"     when beg_rev_adb  = 0     then 0"
"     when beg_rev_adb <= 5052  then 1"
"     when beg_rev_adb <= 12113 then 2"
"     when beg_rev_adb <= 19294 then 3"
"     when beg_rev_adb <= 25725 then 4"
"     when beg_rev_adb <= 32025 then 5"
"     when beg_rev_adb <= 39791 then 6"
"     when beg_rev_adb <= 49948 then 7"
"     when beg_rev_adb <= 63510 then 8"
"     when beg_rev_adb <= 91082 then 9"
"     else                          10"
"   end"
" where age = 3 and flag=12;",

/* Update_Twentile */
" update vars_adv"
" set segment = (case"
"    when score is null then 0"
"    when score <= -0.02979 then 1"
"    when score <= -0.02413 then 2"
"    when score <= -0.01737 then 3"
"    when score <= -0.00374 then 4"
"    when score <= 0.00622 then 5"
"    when score <= 0.01586 then 6"
"    when score <= 0.02082 then 7"
"    when score <= 0.0305 then 8"
"    when score <= 0.04235 then 9"
"    when score <= 0.04968 then 10"
"    when score <= 0.06221 then 11"
"    when score <= 0.07735 then 12"
"    when score <= 0.09516 then 13"
"    when score <= 0.11905 then 14"
"    when score <= 0.14482 then 15"
"    when score <= 0.17466 then 16"
"    when score <= 0.21126 then 17"
"    when score <= 0.25251 then 18"
"    when score <= 0.31023 then 19"
"    else  20"
"  end)"
" where flag in (11, 12) and age = 1;"
" update vars_adv"
" set segment = (case"
"    when score is null then 0"
"    when score <= -0.03745 then 1"
"    when score <= -0.02793 then 2"
"    when score <= -0.01876 then 3"
"    when score <= -0.01002 then 4"
"    when score <= -0.00393 then 5"
"    when score <= 0.00423 then 6"
"    when score <= 0.01198 then 7"
"    when score <= 0.02187 then 8"
"    when score <= 0.03142 then 9"
"    when score <= 0.04497 then 10"
"    when score <= 0.06176 then 11"
"    when score <= 0.0806 then 12"
"    when score <= 0.10071 then 13"
"    when score <= 0.12308 then 14"
"    when score <= 0.14673 then 15"
"    when score <= 0.1701 then 16"
"    when score <= 0.19599 then 17"
"    when score <= 0.22703 then 18"
"    when score <= 0.28059 then 19"
"    else  20"
"   end)"
" where flag in (11, 12) and age in (2, 3);",


/* Update_PD_For_Flag_12 */
" update vars_adv"
"  set pd = (case"
"      when segment = 1 then 0.0004"
"      when segment = 2 then 0.0012"
"      when segment = 3 then 0.002"
"      when segment = 4 then 0.0028"
"      when segment = 5 then 0.0038"
"      when segment = 6 then 0.0048"
"      when segment = 7 then 0.0057"
"      when segment = 8 then 0.0068"
"      when segment = 9 then 0.0079"
"      when segment = 10 then 0.009"
"      when segment = 11 then 0.011"
"      when segment = 12 then 0.013"
"      when segment = 13 then 0.016"
"      when segment = 14 then 0.021"
"      when segment = 15 then 0.028"
"      when segment = 16 then 0.039"
"      when segment = 17 then 0.058"
"      when segment = 18 then 0.092"
"      when segment = 19 then 0.15"
"      when segment = 20 then 0.3"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 0"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0014"
"    when segment = 2 then 0.0024"
"    when segment = 3 then 0.0035"
"    when segment = 4 then 0.0047"
"    when segment = 5 then 0.0059"
"    when segment = 6 then 0.0072"
"    when segment = 7 then 0.0084"
"    when segment = 8 then 0.0098"
"    when segment = 9 then 0.011"
"    when segment = 10 then 0.013"
"    when segment = 11 then 0.014"
"    when segment = 12 then 0.017"
"    when segment = 13 then 0.02"
"    when segment = 14 then 0.026"
"    when segment = 15 then 0.033"
"    when segment = 16 then 0.045"
"    when segment = 17 then 0.064"
"    when segment = 18 then 0.099"
"    when segment = 19 then 0.16"
"    when segment = 20 then 0.3"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 1"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0024"
"    when segment = 2 then 0.0037"
"    when segment = 3 then 0.0051"
"    when segment = 4 then 0.0065"
"    when segment = 5 then 0.0081"
"    when segment = 6 then 0.0097"
"    when segment = 7 then 0.011"
"    when segment = 8 then 0.013"
"    when segment = 9 then 0.015"
"    when segment = 10 then 0.016"
"    when segment = 11 then 0.018"
"    when segment = 12 then 0.021"
"    when segment = 13 then 0.025"
"    when segment = 14 then 0.031"
"    when segment = 15 then 0.039"
"    when segment = 16 then 0.051"
"    when segment = 17 then 0.071"
"    when segment = 18 then 0.11"
"    when segment = 19 then 0.17"
"    when segment = 20 then 0.31"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 2"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0035"
"    when segment = 2 then 0.005"
"    when segment = 3 then 0.0066"
"    when segment = 4 then 0.0083"
"    when segment = 5 then 0.01"
"    when segment = 6 then 0.012"
"    when segment = 7 then 0.014"
"    when segment = 8 then 0.016"
"    when segment = 9 then 0.018"
"    when segment = 10 then 0.02"
"    when segment = 11 then 0.022"
"    when segment = 12 then 0.026"
"    when segment = 13 then 0.03"
"    when segment = 14 then 0.036"
"    when segment = 15 then 0.044"
"    when segment = 16 then 0.057"
"    when segment = 17 then 0.077"
"    when segment = 18 then 0.11"
"    when segment = 19 then 0.18"
"    when segment = 20 then 0.32"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 3"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0045"
"    when segment = 2 then 0.0063"
"    when segment = 3 then 0.0082"
"    when segment = 4 then 0.01"
"    when segment = 5 then 0.012"
"    when segment = 6 then 0.015"
"    when segment = 7 then 0.017"
"    when segment = 8 then 0.019"
"    when segment = 9 then 0.021"
"    when segment = 10 then 0.024"
"    when segment = 11 then 0.026"
"    when segment = 12 then 0.03"
"    when segment = 13 then 0.034"
"    when segment = 14 then 0.041"
"    when segment = 15 then 0.05"
"    when segment = 16 then 0.062"
"    when segment = 17 then 0.083"
"    when segment = 18 then 0.12"
"    when segment = 19 then 0.18"
"    when segment = 20 then 0.33"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 4"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0055"
"    when segment = 2 then 0.0076"
"    when segment = 3 then 0.0097"
"    when segment = 4 then 0.012"
"    when segment = 5 then 0.015"
"    when segment = 6 then 0.017"
"    when segment = 7 then 0.019"
"    when segment = 8 then 0.022"
"    when segment = 9 then 0.025"
"    when segment = 10 then 0.027"
"    when segment = 11 then 0.03"
"    when segment = 12 then 0.034"
"    when segment = 13 then 0.039"
"    when segment = 14 then 0.046"
"    when segment = 15 then 0.055"
"    when segment = 16 then 0.068"
"    when segment = 17 then 0.089"
"    when segment = 18 then 0.13"
"    when segment = 19 then 0.19"
"    when segment = 20 then 0.33"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 5"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0065"
"    when segment = 2 then 0.0089"
"    when segment = 3 then 0.011"
"    when segment = 4 then 0.014"
"    when segment = 5 then 0.017"
"    when segment = 6 then 0.019"
"    when segment = 7 then 0.022"
"    when segment = 8 then 0.025"
"    when segment = 9 then 0.028"
"    when segment = 10 then 0.031"
"    when segment = 11 then 0.034"
"    when segment = 12 then 0.038"
"    when segment = 13 then 0.044"
"    when segment = 14 then 0.051"
"    when segment = 15 then 0.061"
"    when segment = 16 then 0.074"
"    when segment = 17 then 0.095"
"    when segment = 18 then 0.13"
"    when segment = 19 then 0.2"
"    when segment = 20 then 0.34"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 6"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0076"
"    when segment = 2 then 0.01"
"    when segment = 3 then 0.013"
"    when segment = 4 then 0.016"
"    when segment = 5 then 0.019"
"    when segment = 6 then 0.022"
"    when segment = 7 then 0.025"
"    when segment = 8 then 0.028"
"    when segment = 9 then 0.031"
"    when segment = 10 then 0.035"
"    when segment = 11 then 0.038"
"    when segment = 12 then 0.043"
"    when segment = 13 then 0.048"
"    when segment = 14 then 0.056"
"    when segment = 15 then 0.066"
"    when segment = 16 then 0.08"
"    when segment = 17 then 0.1"
"    when segment = 18 then 0.14"
"    when segment = 19 then 0.2"
"    when segment = 20 then 0.35"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 7"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0086"
"    when segment = 2 then 0.011"
"    when segment = 3 then 0.014"
"    when segment = 4 then 0.018"
"    when segment = 5 then 0.021"
"    when segment = 6 then 0.024"
"    when segment = 7 then 0.028"
"    when segment = 8 then 0.031"
"    when segment = 9 then 0.035"
"    when segment = 10 then 0.038"
"    when segment = 11 then 0.042"
"    when segment = 12 then 0.047"
"    when segment = 13 then 0.053"
"    when segment = 14 then 0.061"
"    when segment = 15 then 0.071"
"    when segment = 16 then 0.086"
"    when segment = 17 then 0.11"
"    when segment = 18 then 0.15"
"    when segment = 19 then 0.21"
"    when segment = 20 then 0.35"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 8"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0096"
"    when segment = 2 then 0.013"
"    when segment = 3 then 0.016"
"    when segment = 4 then 0.019"
"    when segment = 5 then 0.023"
"    when segment = 6 then 0.027"
"    when segment = 7 then 0.03"
"    when segment = 8 then 0.034"
"    when segment = 9 then 0.038"
"    when segment = 10 then 0.042"
"    when segment = 11 then 0.046"
"    when segment = 12 then 0.051"
"    when segment = 13 then 0.058"
"    when segment = 14 then 0.066"
"    when segment = 15 then 0.077"
"    when segment = 16 then 0.091"
"    when segment = 17 then 0.11"
"    when segment = 18 then 0.15"
"    when segment = 19 then 0.22"
"    when segment = 20 then 0.36"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 9"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.011"
"    when segment = 2 then 0.014"
"    when segment = 3 then 0.018"
"    when segment = 4 then 0.021"
"    when segment = 5 then 0.025"
"    when segment = 6 then 0.029"
"    when segment = 7 then 0.033"
"    when segment = 8 then 0.037"
"    when segment = 9 then 0.042"
"    when segment = 10 then 0.046"
"    when segment = 11 then 0.05"
"    when segment = 12 then 0.056"
"    when segment = 13 then 0.062"
"    when segment = 14 then 0.071"
"    when segment = 15 then 0.082"
"    when segment = 16 then 0.097"
"    when segment = 17 then 0.12"
"    when segment = 18 then 0.16"
"    when segment = 19 then 0.23"
"    when segment = 20 then 0.37"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 10"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.012"
"    when segment = 2 then 0.015"
"    when segment = 3 then 0.019"
"    when segment = 4 then 0.023"
"    when segment = 5 then 0.027"
"    when segment = 6 then 0.032"
"    when segment = 7 then 0.036"
"    when segment = 8 then 0.04"
"    when segment = 9 then 0.045"
"    when segment = 10 then 0.049"
"    when segment = 11 then 0.054"
"    when segment = 12 then 0.06"
"    when segment = 13 then 0.067"
"    when segment = 14 then 0.076"
"    when segment = 15 then 0.088"
"    when segment = 16 then 0.1"
"    when segment = 17 then 0.13"
"    when segment = 18 then 0.17"
"    when segment = 19 then 0.23"
"    when segment = 20 then 0.38"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 11"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.013"
"    when segment = 2 then 0.017"
"    when segment = 3 then 0.021"
"    when segment = 4 then 0.025"
"    when segment = 5 then 0.03"
"    when segment = 6 then 0.034"
"    when segment = 7 then 0.039"
"    when segment = 8 then 0.044"
"    when segment = 9 then 0.048"
"    when segment = 10 then 0.053"
"    when segment = 11 then 0.058"
"    when segment = 12 then 0.064"
"    when segment = 13 then 0.072"
"    when segment = 14 then 0.081"
"    when segment = 15 then 0.093"
"    when segment = 16 then 0.11"
"    when segment = 17 then 0.13"
"    when segment = 18 then 0.17"
"    when segment = 19 then 0.24"
"    when segment = 20 then 0.38"
"    else  0"
"  end)"
" where flag = 12 and age = 1 and propensity = 12"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0004"
"    when segment = 3 then 0.0009"
"    when segment = 4 then 0.0018"
"    when segment = 5 then 0.0026"
"    when segment = 6 then 0.0036"
"    when segment = 7 then 0.0048"
"    when segment = 8 then 0.006"
"    when segment = 9 then 0.0075"
"    when segment = 10 then 0.009"
"    when segment = 11 then 0.01"
"    when segment = 12 then 0.012"
"    when segment = 13 then 0.013"
"    when segment = 14 then 0.014"
"    when segment = 15 then 0.016"
"    when segment = 16 then 0.017"
"    when segment = 17 then 0.018"
"    when segment = 18 then 0.02"
"    when segment = 19 then 0.026"
"    when segment = 20 then 0.11"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 0"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0004"
"    when segment = 3 then 0.0012"
"    when segment = 4 then 0.0023"
"    when segment = 5 then 0.0033"
"    when segment = 6 then 0.0046"
"    when segment = 7 then 0.0061"
"    when segment = 8 then 0.0076"
"    when segment = 9 then 0.0095"
"    when segment = 10 then 0.011"
"    when segment = 11 then 0.013"
"    when segment = 12 then 0.015"
"    when segment = 13 then 0.017"
"    when segment = 14 then 0.018"
"    when segment = 15 then 0.02"
"    when segment = 16 then 0.021"
"    when segment = 17 then 0.023"
"    when segment = 18 then 0.025"
"    when segment = 19 then 0.033"
"    when segment = 20 then 0.13"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 1"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0004"
"    when segment = 3 then 0.0014"
"    when segment = 4 then 0.0028"
"    when segment = 5 then 0.004"
"    when segment = 6 then 0.0055"
"    when segment = 7 then 0.0073"
"    when segment = 8 then 0.0092"
"    when segment = 9 then 0.011"
"    when segment = 10 then 0.014"
"    when segment = 11 then 0.016"
"    when segment = 12 then 0.018"
"    when segment = 13 then 0.02"
"    when segment = 14 then 0.022"
"    when segment = 15 then 0.024"
"    when segment = 16 then 0.026"
"    when segment = 17 then 0.028"
"    when segment = 18 then 0.03"
"    when segment = 19 then 0.039"
"    when segment = 20 then 0.15"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 2"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0004"
"    when segment = 3 then 0.0017"
"    when segment = 4 then 0.0033"
"    when segment = 5 then 0.0046"
"    when segment = 6 then 0.0065"
"    when segment = 7 then 0.0086"
"    when segment = 8 then 0.011"
"    when segment = 9 then 0.013"
"    when segment = 10 then 0.016"
"    when segment = 11 then 0.019"
"    when segment = 12 then 0.021"
"    when segment = 13 then 0.024"
"    when segment = 14 then 0.026"
"    when segment = 15 then 0.028"
"    when segment = 16 then 0.031"
"    when segment = 17 then 0.033"
"    when segment = 18 then 0.036"
"    when segment = 19 then 0.046"
"    when segment = 20 then 0.17"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 3"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0004"
"    when segment = 3 then 0.0019"
"    when segment = 4 then 0.0038"
"    when segment = 5 then 0.0053"
"    when segment = 6 then 0.0075"
"    when segment = 7 then 0.0099"
"    when segment = 8 then 0.012"
"    when segment = 9 then 0.015"
"    when segment = 10 then 0.019"
"    when segment = 11 then 0.022"
"    when segment = 12 then 0.024"
"    when segment = 13 then 0.027"
"    when segment = 14 then 0.03"
"    when segment = 15 then 0.032"
"    when segment = 16 then 0.035"
"    when segment = 17 then 0.038"
"    when segment = 18 then 0.041"
"    when segment = 19 then 0.053"
"    when segment = 20 then 0.19"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 4"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0007"
"    when segment = 3 then 0.0022"
"    when segment = 4 then 0.0043"
"    when segment = 5 then 0.006"
"    when segment = 6 then 0.0084"
"    when segment = 7 then 0.011"
"    when segment = 8 then 0.014"
"    when segment = 9 then 0.017"
"    when segment = 10 then 0.021"
"    when segment = 11 then 0.024"
"    when segment = 12 then 0.028"
"    when segment = 13 then 0.031"
"    when segment = 14 then 0.034"
"    when segment = 15 then 0.037"
"    when segment = 16 then 0.04"
"    when segment = 17 then 0.043"
"    when segment = 18 then 0.046"
"    when segment = 19 then 0.06"
"    when segment = 20 then 0.22"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 5"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0007"
"    when segment = 3 then 0.0024"
"    when segment = 4 then 0.0047"
"    when segment = 5 then 0.0067"
"    when segment = 6 then 0.0094"
"    when segment = 7 then 0.012"
"    when segment = 8 then 0.016"
"    when segment = 9 then 0.019"
"    when segment = 10 then 0.023"
"    when segment = 11 then 0.027"
"    when segment = 12 then 0.031"
"    when segment = 13 then 0.034"
"    when segment = 14 then 0.037"
"    when segment = 15 then 0.041"
"    when segment = 16 then 0.044"
"    when segment = 17 then 0.047"
"    when segment = 18 then 0.051"
"    when segment = 19 then 0.067"
"    when segment = 20 then 0.25"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 6"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0008"
"    when segment = 3 then 0.0027"
"    when segment = 4 then 0.0052"
"    when segment = 5 then 0.0074"
"    when segment = 6 then 0.01"
"    when segment = 7 then 0.014"
"    when segment = 8 then 0.017"
"    when segment = 9 then 0.021"
"    when segment = 10 then 0.026"
"    when segment = 11 then 0.03"
"    when segment = 12 then 0.034"
"    when segment = 13 then 0.038"
"    when segment = 14 then 0.041"
"    when segment = 15 then 0.045"
"    when segment = 16 then 0.049"
"    when segment = 17 then 0.052"
"    when segment = 18 then 0.057"
"    when segment = 19 then 0.074"
"    when segment = 20 then 0.28"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 7"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0009"
"    when segment = 3 then 0.0029"
"    when segment = 4 then 0.0057"
"    when segment = 5 then 0.0081"
"    when segment = 6 then 0.011"
"    when segment = 7 then 0.015"
"    when segment = 8 then 0.019"
"    when segment = 9 then 0.023"
"    when segment = 10 then 0.028"
"    when segment = 11 then 0.033"
"    when segment = 12 then 0.037"
"    when segment = 13 then 0.041"
"    when segment = 14 then 0.045"
"    when segment = 15 then 0.049"
"    when segment = 16 then 0.053"
"    when segment = 17 then 0.057"
"    when segment = 18 then 0.062"
"    when segment = 19 then 0.082"
"    when segment = 20 then 0.32"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 8"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.001"
"    when segment = 3 then 0.0032"
"    when segment = 4 then 0.0062"
"    when segment = 5 then 0.0088"
"    when segment = 6 then 0.012"
"    when segment = 7 then 0.016"
"    when segment = 8 then 0.02"
"    when segment = 9 then 0.025"
"    when segment = 10 then 0.03"
"    when segment = 11 then 0.035"
"    when segment = 12 then 0.04"
"    when segment = 13 then 0.045"
"    when segment = 14 then 0.049"
"    when segment = 15 then 0.053"
"    when segment = 16 then 0.058"
"    when segment = 17 then 0.062"
"    when segment = 18 then 0.067"
"    when segment = 19 then 0.09"
"    when segment = 20 then 0.37"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 9"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0019"
"    when segment = 2 then 0.0025"
"    when segment = 3 then 0.0049"
"    when segment = 4 then 0.0082"
"    when segment = 5 then 0.011"
"    when segment = 6 then 0.015"
"    when segment = 7 then 0.019"
"    when segment = 8 then 0.024"
"    when segment = 9 then 0.029"
"    when segment = 10 then 0.034"
"    when segment = 11 then 0.04"
"    when segment = 12 then 0.045"
"    when segment = 13 then 0.05"
"    when segment = 14 then 0.054"
"    when segment = 15 then 0.059"
"    when segment = 16 then 0.064"
"    when segment = 17 then 0.068"
"    when segment = 18 then 0.074"
"    when segment = 19 then 0.1"
"    when segment = 20 then 0.42"
"    else  0"
"  end)"
" where flag = 12 and age = 2 and propensity = 10"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0004"
"    when segment = 2 then 0.0011"
"    when segment = 3 then 0.0017"
"    when segment = 4 then 0.0023"
"    when segment = 5 then 0.0029"
"    when segment = 6 then 0.0035"
"    when segment = 7 then 0.0041"
"    when segment = 8 then 0.0047"
"    when segment = 9 then 0.0053"
"    when segment = 10 then 0.0058"
"    when segment = 11 then 0.0064"
"    when segment = 12 then 0.007"
"    when segment = 13 then 0.0075"
"    when segment = 14 then 0.0082"
"    when segment = 15 then 0.009"
"    when segment = 16 then 0.01"
"    when segment = 17 then 0.013"
"    when segment = 18 then 0.02"
"    when segment = 19 then 0.039"
"    when segment = 20 then 0.11"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 0"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0005"
"    when segment = 2 then 0.0015"
"    when segment = 3 then 0.0023"
"    when segment = 4 then 0.0031"
"    when segment = 5 then 0.004"
"    when segment = 6 then 0.0048"
"    when segment = 7 then 0.0056"
"    when segment = 8 then 0.0064"
"    when segment = 9 then 0.0071"
"    when segment = 10 then 0.0078"
"    when segment = 11 then 0.0086"
"    when segment = 12 then 0.0094"
"    when segment = 13 then 0.01"
"    when segment = 14 then 0.011"
"    when segment = 15 then 0.012"
"    when segment = 16 then 0.014"
"    when segment = 17 then 0.017"
"    when segment = 18 then 0.024"
"    when segment = 19 then 0.046"
"    when segment = 20 then 0.12"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 1"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0006"
"    when segment = 2 then 0.0018"
"    when segment = 3 then 0.0029"
"    when segment = 4 then 0.0039"
"    when segment = 5 then 0.005"
"    when segment = 6 then 0.006"
"    when segment = 7 then 0.007"
"    when segment = 8 then 0.008"
"    when segment = 9 then 0.0089"
"    when segment = 10 then 0.0099"
"    when segment = 11 then 0.011"
"    when segment = 12 then 0.012"
"    when segment = 13 then 0.013"
"    when segment = 14 then 0.014"
"    when segment = 15 then 0.015"
"    when segment = 16 then 0.017"
"    when segment = 17 then 0.021"
"    when segment = 18 then 0.029"
"    when segment = 19 then 0.053"
"    when segment = 20 then 0.14"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 2"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0007"
"    when segment = 2 then 0.0022"
"    when segment = 3 then 0.0035"
"    when segment = 4 then 0.0047"
"    when segment = 5 then 0.0061"
"    when segment = 6 then 0.0073"
"    when segment = 7 then 0.0085"
"    when segment = 8 then 0.0097"
"    when segment = 9 then 0.011"
"    when segment = 10 then 0.012"
"    when segment = 11 then 0.013"
"    when segment = 12 then 0.014"
"    when segment = 13 then 0.015"
"    when segment = 14 then 0.017"
"    when segment = 15 then 0.018"
"    when segment = 16 then 0.02"
"    when segment = 17 then 0.025"
"    when segment = 18 then 0.034"
"    when segment = 19 then 0.061"
"    when segment = 20 then 0.15"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 3"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0009"
"    when segment = 2 then 0.0026"
"    when segment = 3 then 0.0041"
"    when segment = 4 then 0.0056"
"    when segment = 5 then 0.0071"
"    when segment = 6 then 0.0085"
"    when segment = 7 then 0.01"
"    when segment = 8 then 0.011"
"    when segment = 9 then 0.013"
"    when segment = 10 then 0.014"
"    when segment = 11 then 0.015"
"    when segment = 12 then 0.017"
"    when segment = 13 then 0.018"
"    when segment = 14 then 0.02"
"    when segment = 15 then 0.021"
"    when segment = 16 then 0.024"
"    when segment = 17 then 0.029"
"    when segment = 18 then 0.039"
"    when segment = 19 then 0.069"
"    when segment = 20 then 0.17"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 4"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.001"
"    when segment = 2 then 0.003"
"    when segment = 3 then 0.0047"
"    when segment = 4 then 0.0064"
"    when segment = 5 then 0.0082"
"    when segment = 6 then 0.0098"
"    when segment = 7 then 0.011"
"    when segment = 8 then 0.013"
"    when segment = 9 then 0.015"
"    when segment = 10 then 0.016"
"    when segment = 11 then 0.018"
"    when segment = 12 then 0.019"
"    when segment = 13 then 0.021"
"    when segment = 14 then 0.022"
"    when segment = 15 then 0.024"
"    when segment = 16 then 0.027"
"    when segment = 17 then 0.033"
"    when segment = 18 then 0.044"
"    when segment = 19 then 0.077"
"    when segment = 20 then 0.19"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 5"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0018"
"    when segment = 2 then 0.0041"
"    when segment = 3 then 0.0061"
"    when segment = 4 then 0.008"
"    when segment = 5 then 0.0099"
"    when segment = 6 then 0.012"
"    when segment = 7 then 0.014"
"    when segment = 8 then 0.016"
"    when segment = 9 then 0.017"
"    when segment = 10 then 0.019"
"    when segment = 11 then 0.021"
"    when segment = 12 then 0.023"
"    when segment = 13 then 0.024"
"    when segment = 14 then 0.026"
"    when segment = 15 then 0.028"
"    when segment = 16 then 0.032"
"    when segment = 17 then 0.038"
"    when segment = 18 then 0.05"
"    when segment = 19 then 0.087"
"    when segment = 20 then 0.21"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 6"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0027"
"    when segment = 2 then 0.0052"
"    when segment = 3 then 0.0074"
"    when segment = 4 then 0.0095"
"    when segment = 5 then 0.012"
"    when segment = 6 then 0.014"
"    when segment = 7 then 0.016"
"    when segment = 8 then 0.018"
"    when segment = 9 then 0.02"
"    when segment = 10 then 0.022"
"    when segment = 11 then 0.024"
"    when segment = 12 then 0.026"
"    when segment = 13 then 0.028"
"    when segment = 14 then 0.03"
"    when segment = 15 then 0.032"
"    when segment = 16 then 0.036"
"    when segment = 17 then 0.042"
"    when segment = 18 then 0.056"
"    when segment = 19 then 0.097"
"    when segment = 20 then 0.23"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 7"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0035"
"    when segment = 2 then 0.0063"
"    when segment = 3 then 0.0087"
"    when segment = 4 then 0.011"
"    when segment = 5 then 0.014"
"    when segment = 6 then 0.016"
"    when segment = 7 then 0.018"
"    when segment = 8 then 0.02"
"    when segment = 9 then 0.023"
"    when segment = 10 then 0.025"
"    when segment = 11 then 0.027"
"    when segment = 12 then 0.029"
"    when segment = 13 then 0.031"
"    when segment = 14 then 0.034"
"    when segment = 15 then 0.036"
"    when segment = 16 then 0.04"
"    when segment = 17 then 0.048"
"    when segment = 18 then 0.063"
"    when segment = 19 then 0.11"
"    when segment = 20 then 0.26"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 8"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0043"
"    when segment = 2 then 0.0074"
"    when segment = 3 then 0.01"
"    when segment = 4 then 0.013"
"    when segment = 5 then 0.015"
"    when segment = 6 then 0.018"
"    when segment = 7 then 0.02"
"    when segment = 8 then 0.023"
"    when segment = 9 then 0.025"
"    when segment = 10 then 0.028"
"    when segment = 11 then 0.03"
"    when segment = 12 then 0.032"
"    when segment = 13 then 0.035"
"    when segment = 14 then 0.037"
"    when segment = 15 then 0.04"
"    when segment = 16 then 0.045"
"    when segment = 17 then 0.053"
"    when segment = 18 then 0.07"
"    when segment = 19 then 0.12"
"    when segment = 20 then 0.28"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 9"
" update vars_adv"
"  set pd = (case"
"    when segment = 1 then 0.0052"
"    when segment = 2 then 0.0085"
"    when segment = 3 then 0.011"
"    when segment = 4 then 0.014"
"    when segment = 5 then 0.017"
"    when segment = 6 then 0.02"
"    when segment = 7 then 0.023"
"    when segment = 8 then 0.025"
"    when segment = 9 then 0.028"
"    when segment = 10 then 0.03"
"    when segment = 11 then 0.033"
"    when segment = 12 then 0.036"
"    when segment = 13 then 0.038"
"    when segment = 14 then 0.041"
"    when segment = 15 then 0.044"
"    when segment = 16 then 0.049"
"    when segment = 17 then 0.058"
"    when segment = 18 then 0.077"
"    when segment = 19 then 0.13"
"    when segment = 20 then 0.31"
"    else  0"
"  end)"
" where flag = 12 and age = 3 and propensity = 10",

/* Update_PD_For_Flag_11 */
" update vars_adv"
"  set pd = (case"
"   when segment <= 10 then 0.0005"
"   when segment <= 20 then 0.0031"
"   else 0"
"  end)"
" where flag = 11 and age = 1"
" update vars_adv"
"  set pd = (case"
"   when segment <= 10 then 0.0004"
"   when segment <= 20 then 0.0094"
"   else 0"
"  end)"
" where flag = 11 and age in (2, 3)",

/* Update_PD_For_Flag_10 */
" update vars_adv"
" set pd = 0.0004"
" where flag = 10;",

/* Update_Risk_Group */
"update vars_adv"
"  set risk_group ="
"    (case"
"        when pd is null and flag in (0,1,2,3,4,5,6,8) then 97"
"        when pd is null and flag in (7) then 99"
"        when pd is null and flag = 9 then 98"
"        when pd <= 0.0011 and flag = 11 then 1"
"        when pd <= 0.0011 and flag = 10 then 2"
"        when pd <= 0.0011 and flag = 12 then 3"
"        when pd <= 0.0047 then 4"
"        when pd <= 0.0100 then 5"
"        when pd <= 0.0180 then 6"
"        when pd <= 0.0340 then 7"
"        when pd <= 0.0440 then 8"
"        when pd <= 0.0530 then 9"
"        when pd <= 0.0660 then 10"
"        when pd <= 0.0810 then 11"
"        when pd <= 0.1000 then 12"
"        when pd <= 0.1400 then 13"
"        when pd <= 0.2300 then 14"
"        when pd <= 0.3600 then 15"
"        else 16"
"     end)",

/*The risk level L/M/H is replaced by risk group. */
/* Update_Risk_Level_For_Flag_10_11_12 */
" update vars_adv"
" set risk_level = case"
"   When pd <= 0.02 then 'L'"
"   When pd <= 0.15 then 'M'"
"   else 'H'"
" end"
" where flag in (10, 11, 12);",

/* Create_Proc_Generate_Profile */
" CREATE PROCEDURE Generate_Profile"
" (@cycle_date varchar(8))"
" AS"
" if  NOT exists (select * from dbo.sysobjects where id = object_id(N'[credit_card_monthly_profile_riskgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"   begin"
"     CREATE TABLE [credit_card_monthly_profile_riskgroup] ("
"         [cycle_date] [varchar] (8) NOT NULL,"
"         [risk_group] [int] NULL,"
"         [group_count] [int] NULL"
"     );"
"     alter table credit_card_monthly_profile_riskgroup add constraint p_profile_stmtmonth primary key (cycle_date);"
"   end"
" delete from credit_card_monthly_profile_riskgroup where cycle_date = @cycle_date;"
" insert into credit_card_monthly_profile_riskgroup (cycle_date, risk_group, group_count)"
"  select @cycle_date, risk_group, count(*)"
"  from vars_adv"
"  group by risk_group",

/* Execute_Proc_Generate_Profile */
"EXEC Generate_Profile :v1",

/* Drop_Proc_Generate_Profile */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Generate_Profile]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Generate_Profile];",

/*  Create_Proc_Generate_Score */
" CREATE PROCEDURE Generate_Score"
"  (@cycle_date varchar(8))"
" AS"
" if  NOT exists (select * from dbo.sysobjects where id = object_id(N'[credit_card_monthly_pd_riskgroup]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"   begin"
"     CREATE TABLE [credit_card_monthly_pd_riskgroup] ("
"         [cycle_date] [char] (8) NOT NULL,"
"         [Customer_id] [char] (11) NOT NULL,"
"         [pd] [decimal] (7,4) NULL,"
"         [risk_group] [int] NULL"
"     );"
"     alter table credit_card_monthly_pd_riskgroup add constraint p_PD_month_CustID primary key (cycle_date, Customer_id);"
"   end"
" delete from credit_card_monthly_pd_riskgroup where cycle_date = @cycle_date;"
" insert into credit_card_monthly_pd_riskgroup (cycle_date, Customer_id, pd, risk_group)"
"  select @cycle_date, idn, pd, risk_group"
"  from vars_adv;",

/* Execute_Proc_Generate_Score */
"EXEC Generate_Score :v1",

/* Drop_Proc_Generate_Score */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Generate_Score]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Generate_Score];"
 };

#endif
