//---------------------------------------------------------------------------

#ifndef mainH
#define mainH

#define CONNECTION_STRING  "FILE NAME=./AdoConnect.udl"
#define NSTEPS (sizeof step / sizeof step[0])
#define DEBUG  if (Debug) fprintf
//---------------------------------------------------------------------------
char * CurrDateTime ();

enum SQLCodes { Drop_Input_Table,
                Create_Input_Table,
                Create_Proc_Load_Input_Table,
                Execute_Proc_Load_Input_Table,
                Drop_Proc_Load_Input_Table,
                Create_Index_u_statementMonth_idn_on_Input,
                Create_Index_i_statementMonth_on_Input,
                Create_Index_i_idn_on_Input,

                Calculate_Month_Since,
                Create_Proc_Assign_ALL_PayCode,
                Execute_Proc_Assign_ALL_PayCode,
                Drop_Proc_Assign_ALL_PayCode,

                Create_Proc_Assign_SegCode,
                Execute_Proc_Assign_SegCode,
                Drop_Proc_Assign_SegCode,

                Drop_Vars_Table,
                Create_Vars_Table,
                Load_Vars_Table,
                Create_Index_u_idn_on_Vars,

                Create_Proc_Calculate_Variables_Scores,
                Execute_Proc_Calculate_Variables_Scores,
                Drop_Proc_Calculate_Variables_Scores,

                Update_PD_For_Flag_12,
                Update_PD_For_Flag_11,
                Update_PD_For_Flag_10,
                Update_Risk_Level_For_Flag_10_11_12,

                Create_Proc_Generate_Profile,
                Execute_Proc_Generate_Profile,
                Drop_Proc_Generate_Profile,

                Create_Proc_Generate_Score,
                Execute_Proc_Generate_Score,
                Drop_Proc_Generate_Score,

                End_of_SQL};

int step[] = {
 Drop_Input_Table,
 Create_Input_Table,
 Drop_Proc_Load_Input_Table,
 Create_Proc_Load_Input_Table,
 Execute_Proc_Load_Input_Table,
 Drop_Proc_Load_Input_Table,
 Create_Index_u_statementMonth_idn_on_Input,
 Create_Index_i_statementMonth_on_Input,
 Create_Index_i_idn_on_Input,
 Calculate_Month_Since,
 Drop_Proc_Assign_ALL_PayCode,
 Create_Proc_Assign_ALL_PayCode,
 Execute_Proc_Assign_ALL_PayCode,
 Drop_Proc_Assign_ALL_PayCode,
 Drop_Proc_Assign_SegCode,
 Create_Proc_Assign_SegCode,
 Execute_Proc_Assign_SegCode,
 Drop_Proc_Assign_SegCode,
 Drop_Vars_Table,
 Create_Vars_Table,
 Load_Vars_Table,
 Create_Index_u_idn_on_Vars,
 Drop_Proc_Calculate_Variables_Scores,
 Create_Proc_Calculate_Variables_Scores,
 Execute_Proc_Calculate_Variables_Scores,
 Drop_Proc_Calculate_Variables_Scores,
 Update_PD_For_Flag_12,
 Update_PD_For_Flag_11,
 Update_PD_For_Flag_10,
 Update_Risk_Level_For_Flag_10_11_12,
 Drop_Proc_Generate_Profile,
 Create_Proc_Generate_Profile,
 Execute_Proc_Generate_Profile,
 Drop_Proc_Generate_Profile,
 Drop_Proc_Generate_Score,
 Create_Proc_Generate_Score,
 Execute_Proc_Generate_Score,
 Drop_Proc_Generate_Score,
// Drop_Input_Table,
// Drop_Vars_Table,
 End_of_SQL
};

char *SQLNames[]= {"Drop_Input_Table",
                "Create_Input_Table",
                "Create_Proc_Load_Input_Table",
                "Execute_Proc_Load_Input_Table",
                "Drop_Proc_Load_Input_Table",
                "Create_Index_u_statementMonth_idn_on_Input",
                "Create_Index_i_statementMonth_on_Input",
                "Create_Index_i_idn_on_Input",
                "Calculate_Month_Since",
                "Create_Proc_Assign_ALL_PayCode",
                "Execute_Proc_Assign_ALL_PayCode",
                "Drop_Proc_Assign_ALL_PayCode",
                "Create_Proc_Assign_SegCode",
                "Execute_Proc_Assign_SegCode",
                "Drop_Proc_Assign_SegCode",
                "Drop_Vars_Table",
                "Create_Vars_Table",
                "Load_Vars_Table",
                "Create_Index_u_idn_on_Vars",
                "Create_Proc_Calculate_Variables_Scores",
                "Execute_Proc_Calculate_Variables_Scores",
                "Drop_Proc_Calculate_Variables_Scores",
                "Update_PD_For_Flag_12",
                "Update_PD_For_Flag_11",
                "Update_PD_For_Flag_10",
                "Update_Risk_Level_For_Flag_10_11_12",
                "Create_Proc_Generate_Profile",
                "Execute_Proc_Generate_Profile",
                "Drop_Proc_Generate_Profile",
                "Create_Proc_Generate_Score",
                "Execute_Proc_Generate_Score",
                "Drop_Proc_Generate_Score"
 };


char *SQLCommands[] = {
/* Drop_Input_Table */
"if exists (select * from dbo.sysobjects where id = object_id(N'[source]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"  drop table source;",

/* Create_Input_Table */
" CREATE TABLE [source] ("
"        [Statement_month] [varchar] (8) NULL ,"
"        [Account_Status] [varchar] (3) NULL ,"
"        [Inactive_date_for_status_6] [float] NULL ,"
"        [Credit_Limit] [float] NULL ,"
"        [Purchase_Average_Daily_Balance] [float] NULL ,"
"        [Cash_Average_Daily_Balance] [float] NULL ,"
"        [Purchase_amount] [float] NULL ,"
"        [Purchase_count] [float] NULL ,"
"        [Cash_amount] [float] NULL ,"
"        [Cash_Advance_count] [float] NULL ,"
"        [Interest_charge] [float] NULL ,"
"        [Late_Fee_Assessed] [float] NULL ,"
"        [Payment_Amount] [float] NULL ,"
"        [Minimum_Payment] [float] NULL ,"
"        [__cycles_Past_Due] [float] NULL ,"
"        [Total_bal_on_bill] [float] NULL ,"
"        [PayCode] [char](1) NULL,"
"        [flag] [int] NULL,"
"        [month_since] [int] NULL,"
"        [masked_id] [float] NULL,"  /* masked_id, delete before delivery*/
"        [idn] [char] (16) NULL"
");",

/* Create_Proc_Load_Input_Table */
" CREATE PROCEDURE Load_Input_Table"
" (@target_month varchar(8))"
" AS"
" declare month_cur CURSOR local scroll static for"
"    select top 13 [statement month]"
"      from statement"
"      where [statement month] <= @target_month"
"      group by [statement month]"
"      order by [statement month] asc;"
" open month_cur "
" declare @month varchar(8) "
" fetch next from month_cur into @month "
" while (@@fetch_status = 0)"
"  begin"                 /* masked_id, delete before delivery*/
"     insert into source (Statement_month, Account_Status, Inactive_date_for_status_6, Credit_Limit, Purchase_Average_Daily_Balance,"
"       Cash_Average_Daily_Balance, Purchase_amount, Purchase_count, Cash_amount, Cash_Advance_count, Interest_charge,"
"       Late_Fee_Assessed, Payment_Amount, Minimum_Payment, __cycles_Past_Due, Total_bal_on_bill, idn, masked_id)"
"     select [Statement month], [Account Status], [Inactive date for status 6], [Credit Limit], [Purchase Average Daily Balance],"
"       [Cash Average Daily Balance], [Purchase amount], [Purchase count], [Cash amount], [Cash Advance count], [Interest charge],"
"       [Late Fee Assessed], [Payment Amount], [Minimum Payment], [# cycles Past Due], [Total bal on bill], [Customer id], masked_id"
"     from statement"
"     where [statement month] = @month"
"     fetch next from month_cur into @month"
"  end"
" close month_cur "
" deallocate month_cur ",

/* Execute_Proc_Load_Input_Table */
"EXEC Load_Input_Table :v1",

/* Drop_Proc_Load_Input_Table */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Load_Input_Table]')"
" and OBJECTPROPERTY(id, N'IsProcedure') = 1)"
"drop procedure [Load_Input_Table]",

/* Create_Index_u_statementMonth_idn_on_Input */
" create unique index u_statementMonth_idn on source (statement_month, idn);",
/* Create_Index_i_statementMonth_on_Input */
" create index i_statementMonth on source (statement_month);",
/* Create_Index_i_idn_on_Input */
" create index i_idn on source (idn);",

/* Calculate_Month_Since  */
"    update source"
"    set month_since ="
"      (cast (substring(statement_month,1,4) as int) - 1911) * 12 +"
"       cast (substring(statement_month,5,2) as int);",


/*  Create_Proc_Assign_ALL_PayCode */
" CREATE PROCEDURE Assign_ALL_PayCode"
" AS"
" declare month_cur CURSOR local scroll static for"
"    select distinct statement_month"
"      from source"
"      order by statement_month asc;"
" open month_cur"
" declare @month varchar(8)"
" fetch next from month_cur into @month"
" fetch next from month_cur into @month"
" while (@@fetch_status = 0)"
"  begin"
" update source set paycode = 'A'"
" from source as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 and"
"                    minimum_payment = 0 and"
"                    (purchase_average_daily_balance + cash_average_daily_balance <> 0 or"
"                    purchase_amount + cash_amount <> 0) );"
" update source set paycode = 'X'"
" from source as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 and"
"                    minimum_payment = 0 and"
"                    purchase_average_daily_balance + cash_average_daily_balance = 0 and"
"                    purchase_amount + cash_amount = 0 );"
" update source set paycode = 'X'"
" from source as a"
" where statement_month = @month and"
"      not exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1 );"
" update source set paycode = 'F'"
" from source as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount = 0);"
" update source set paycode = 'E'"
" from source as a"
" where statement_month = @month and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount <  minimum_payment);"
" update source set paycode = 'D'"
" from source as a"
" where statement_month = @month and"
"      interest_charge > 0 and"
"      late_fee_assessed > 0 and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source set paycode = 'C'"
" from source as a"
" where statement_month = @month and"
"      interest_charge > 0 and"
"      late_fee_assessed <= 0 and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source set paycode = 'B'"
" from source as a"
" where statement_month = @month and"
"      interest_charge <= 0 and"
"      late_fee_assessed > 0 and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
" update source set paycode = 'A'"
" from source as a"
" where statement_month = @month and"
"      interest_charge <= 0 and"
"      late_fee_assessed <= 0 and"
"      exists ( select idn"
"              from source as b"
"              where a.idn = b.idn and"
"                    month_since = a.month_since - 1  and"
"                    minimum_payment <> 0 and"
"                    payment_amount <> 0 and"
"                    payment_amount >= minimum_payment);"
"     fetch next from month_cur into @month"
"  end"
" close month_cur"
" deallocate month_cur",

/* Execute_Proc_Assign_ALL_PayCode */
"EXEC Assign_ALL_PayCode",

/* Drop_Proc_Assign_ALL_PayCode */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Assign_ALL_PayCode]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Assign_ALL_PayCode];",

/* CREATE PROCEDURE Assign_SegCode */
" CREATE PROCEDURE Assign_SegCode"
" (@target_month varchar(6))"
" AS"
" declare @yyyymm int"
" declare @yyyy int"
" declare @mm int"
" declare @next_month varchar(10)"
" declare @six_month_ago varchar(10)"
" set @yyyymm = cast (@target_month as int)"
" set @yyyy = (@yyyymm - @yyyymm % 100 ) / 100"
" set @mm = @yyyymm % 100"
" if  @mm + 1 > 12"
" begin"
"  set @mm = @mm + 1 - 12"
"  set @yyyy = @yyyy + 1"
" end"
" else"
"  set @mm = @mm + 1"
" set @next_month = cast ((@yyyy * 100 + @mm) as char(6)) + '01'"
" set @yyyymm = cast (@target_month as int)"
" set @yyyy = (@yyyymm - @yyyymm % 100 ) / 100"
" set @mm = @yyyymm % 100"
" if  @mm < 6"
" begin"
"  set @mm = @mm - 5 + 12"
"  set @yyyy = @yyyy - 1"
" end"
" else"
"  set @mm = @mm - 5"
" set @six_month_ago = cast ((@yyyy * 100 + @mm) as char(6)) + '01'"
" "
" update source"
" set flag = 8"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date] >=@six_month_ago and"
"       paycode in ('E', 'F');"
" update source"
" set flag = 7"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date] >=@six_month_ago and"
"       paycode not in ('E', 'F');"
" update source"
" set flag = 9"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"      ( account_status=6 and (inactive_date_for_status_6 <@next_month or inactive_date_for_status_6 is null ));"
" update source"
" set flag = 10"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 = (select SUM(interest_charge)"
"            from source c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since) and"
"       12<= (select count(*)"
"             from source c"
"             where b.idn = c.idn and"
"                   c.month_since between b.month_since - 11 and b.month_since and"
"                   paycode='X');"
" update source"
" set flag = 11"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 = (select SUM(interest_charge)"
"            from source c"
"            where b.idn = c.idn and"
"            c.month_since between b.month_since - 11 and b.month_since) and"
"       12> (select count(*)"
"            from source c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since and"
"                  paycode='X');"
" update source"
" set flag = 12"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode NOT in ('E', 'F') and"
"       0 < (select SUM(interest_charge)"
"            from source c"
"            where b.idn = c.idn and"
"                  c.month_since between b.month_since - 11 and b.month_since);"
" update source"
" set flag = 0"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       paycode in ('E', 'F');"
" update source"
" set flag = 1"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 1;"
" update source"
" set flag = 2"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 2;"
" update source"
" set flag = 3"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 3;"
" update source"
" set flag = 4"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 4;"
" update source"
" set flag = 5"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due = 5;"
" update source"
" set flag = 6"
" from account a, source b"
" where a.[Customer id] = b.idn and"
"       b.statement_month=@target_month and"
"       a.[Account Open Date]<@six_month_ago and"
"       NOT (account_status=6 and inactive_date_for_status_6 <@next_month) and"
"       flag = 0 and __cycles_past_due >=6;",

/* Execute_Proc_Assign_SegCode */
"EXEC Assign_SegCode :v1",

/* Drop_Proc_Assign_SegCode */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Assign_SegCode]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Assign_SegCode];",


/* Drop_Vars_Table */
" if exists (select * from dbo.sysobjects where id = object_id(N'[vars]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
" drop table [vars];",

/* Create_Vars_Table */
"CREATE TABLE [vars] ("
"        [Statement_month] [varchar] (8)NOT NULL,"
"        [idn] [char] (16) NOT NULL,"
"        [masked_id] [float] NULL,"  /* masked_id, delete before delivery*/
"        [PayCode] [char] (1) NOT NULL,"
"        [flag] [int] NOT NULL,"
"        [month_since] [int] NOT NULL,"
"        [AMFS001_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS001_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS001_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFT001_41] [decimal](13, 5) NULL default 0.0,"
"        [AMFT001_41_z] [decimal](13, 5) NULL default 0.0,"
"        [AMFS003_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS003_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFS003_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFT003_32] [decimal](13, 5) NULL default 0.0,"
"        [AMFT003_32_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFT003_32_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS005_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS005_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS005_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFT005_41] [decimal](13, 5) NULL default 0.0,"
"        [AMFT005_41_z] [decimal](13, 5) NULL default 0.0,"
"        [AMFS008_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS008_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFS008_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFT008_42] [decimal](13, 5) NULL default 0.0,"
"        [AMFT008_42_z] [decimal](13, 5) NULL default 0.0,"
"        [AMFS012_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS012_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS012_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFT012_42] [decimal](13, 5) NULL default 0.0,"
"        [AMFT012_42_z] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_03_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_03_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS013_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFT013_21] [decimal](13, 5) NULL default 0.0,"
"        [AMFT013_21_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_06_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_06_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS014_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFT014_31] [decimal](13, 5) NULL default 0.0,"
"        [AMFT014_31_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFT014_31_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS016_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS016_03_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFS016_06] [decimal](13, 5) NULL default 0.0,"
"        [AMFS016_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFT016_32] [decimal](13, 5) NULL default 0.0,"
"        [AMFT016_32_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS022_03] [decimal](13, 5) NULL default 0.0,"
"        [AMFS022_09] [decimal](13, 5) NULL default 0.0,"
"        [AMFS022_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFT022_41] [decimal](13, 5) NULL default 0.0,"
"        [AMFT022_41_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFT022_41_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMFS023_12] [decimal](13, 5) NULL default 0.0,"
"        [AMFS023_12_q] [decimal](13, 5) NULL default 0.0,"
"        [AMFS023_12_q_T] [decimal](13, 5) NULL default 0.0,"
"        [AMMS036_06] [decimal](13, 5) NULL default 0.0,"
"        [AMMS036_06_T] [decimal](13, 5) NULL default 0.0,"
"        [AMMS081_06] [decimal](13, 5) NULL default 0.0,"
"        [AMMS081_09] [decimal](13, 5) NULL default 0.0,"
"        [AMMS081_12] [decimal](13, 5) NULL default 0.0,"
"        [AMMT081_21] [decimal](13, 5) NULL default 0.0,"
"        [AMMT081_21_z] [decimal](13, 5) NULL default 0.0,"
"        [score] [float] NULL default 0.0,"
"        [pd] [float] NULL,"
"        [risk_twentile] [int] NULL,"
"        [risk_level] [char] (1) NULL"
" );",


/* Load_Vars_Table */
" insert into vars (statement_month, idn, paycode, flag, month_since, masked_id)"
" select statement_month, idn, paycode, flag, month_since, masked_id"
" from source"
" where statement_month=:v1;",

/* Create_Index_u_idn_on_Vars */
" create unique index u_idn on vars (idn);",

/*  Create_Proc_Calculate_Variables_Scores */
" CREATE PROCEDURE Calculate_Variables_Scores"
" AS"
" update vars"
" set amfs013_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.paycode in ('F'))"
" where flag in (11, 12);"
" update vars"
" set amfs013_06="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 5 and vars.month_since and"
"        a.paycode in ('F'))"
" where flag in (11, 12);"
" update vars"
" set amfs013_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 8 and vars.month_since and"
"        a.paycode in ('F'))"
" where flag in (11, 12);"
" update vars"
" set amfs013_12="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 11 and vars.month_since and"
"        a.paycode in ('F'))"
" where flag in (11, 12);"
" update vars"
" set AMFS014_06="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since- 5 and vars.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12);"
" update vars"
" set AMFS014_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12);"
" update vars"
" set AMFS014_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 8 and vars.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12);"
" update vars"
" set AMFS014_12="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 11 and vars.month_since and"
"        a.paycode in ('E', 'F'))"
" where flag in (11, 12);"
" update vars"
" set amfs016_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.late_fee_assessed > 0)"
" where flag in (11, 12);"
" update vars"
" set amfs016_06="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 5 and vars.month_since and"
"        a.late_fee_assessed > 0)"
" where flag in (11, 12);"
" update vars"
" set amfs016_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 8 and vars.month_since and"
"        a.late_fee_assessed > 0)"
" where flag in (11, 12);"
" update vars"
" set AMMS036_06="
" (select  AVG((credit_limit - total_bal_on_bill) / credit_limit)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 5 and vars.month_since)"
" where flag in (11, 12) and exists (select * from source where vars.idn=idn and"
"       month_since between vars.month_since - 5 and vars.month_since);"
" update vars"
" set AMFS023_12="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 11 and vars.month_since and"
"        a.interest_charge > 0 and"
"        a.purchase_amount + a.cash_amount = 0)"
" where flag in (11, 12);"
" update vars"
" set AMFS012_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.paycode in ('C'))"
" where flag in (11, 12);"
" update vars"
" set AMFS012_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 8 and vars.month_since and"
"        a.paycode in ('C'))"
" where flag in (11, 12);"
" update vars"
" set AMFS012_06="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 5 and vars.month_since and"
"        a.paycode in ('C'))"
" where flag in (11, 12);"
" update vars"
" set AMFS003_03="
" (select  avg(Cash_Advance_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select  *"
"          from  source"
"          where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since and"
"           cash_advance_count > 0);"
" update vars"
" set AMFS003_06="
" (select  avg(Cash_Advance_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 5 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select  *"
"          from  source"
"          where vars.idn=idn and"
"           month_since between vars.month_since - 5 and vars.month_since and"
"           cash_advance_count > 0);"
" update vars"
" set AMFS003_09="
" (select  avg(Cash_Advance_count)"
"  from  source a"
"  where vars.idn=idn and"
"           a.month_since between vars.month_since - 8 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select  *"
"       from  source"
"       where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since and"
"           cash_advance_count > 0);"
" update vars"
" set AMFS001_03="
" (select  SUM(Cash_Advance_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since and"
"           cash_advance_count > 0);"
" "
" update vars"
" set AMFS001_09="
" (select  SUM(Cash_Advance_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select *"
"        from  source"
"        where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since and"
"           cash_advance_count > 0);"
" update vars"
" set AMFS001_12="
" (select  SUM(Cash_Advance_count)"
"  from  source a"
"  where vars.idn=a.idn and"
"           a.month_since between vars.month_since - 11 and vars.month_since and"
"           cash_advance_count > 0)"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 11 and vars.month_since and"
"           cash_advance_count > 0);"
" update vars"
" set AMFS005_03="
" (select  SUM(Purchase_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since)"
" where flag in (11, 12) and exists (select  *"
"      from  source"
"      where vars.idn=idn and"
"           month_since between vars.month_since - 2 and vars.month_since);"
" update vars"
" set AMFS005_09="
" (select  SUM(Purchase_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since)"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since);"
" update vars"
" set AMFS005_12="
" (select  SUM(Purchase_count)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 11 and vars.month_since)"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and month_since between vars.month_since - 11 and vars.month_since);"
" update vars"
" set AMFS022_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.cash_amount > a.purchase_amount)"
" where flag in (11, 12);"
" update vars"
" set AMFS022_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 8 and vars.month_since and"
"        a.cash_amount > a.purchase_amount)"
" where flag in (11, 12);"
" update vars"
" set AMFS022_12="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 11 and vars.month_since and"
"        a.cash_amount > a.purchase_amount)"
" where flag in (11, 12);"
" update vars"
" set AMFS008_03="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"        a.month_since between vars.month_since - 2 and vars.month_since and"
"        a.interest_charge > 0)"
" where flag in (11, 12);"
" update vars"
" set AMFS008_06="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"           a.month_since between vars.month_since - 5 and vars.month_since and"
"           a.interest_charge > 0)"
" where flag in (11, 12);"
" update vars"
" set AMFS008_09="
" (select  count(*)"
"  from  source a"
"  where vars.idn=a.idn and"
"           a.month_since between vars.month_since - 8 and vars.month_since and"
"           a.interest_charge > 0)"
" where flag in (11, 12);"
" update vars"
" set AMMS081_06="
" (select  MAX("
"    case"
"      when Purchase_Average_Daily_Balance <> 0 then (Cash_Average_Daily_Balance / Purchase_Average_Daily_Balance)"
"      else NULL"
"    end)"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 5 and vars.month_since )"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 5 and vars.month_since );"
" update vars"
" set AMMS081_09="
" (select  MAX("
"    case"
"      when Purchase_Average_Daily_Balance <> 0 then (Cash_Average_Daily_Balance / Purchase_Average_Daily_Balance)"
"      else NULL"
"    end)"
"  from  source a"
"  where vars.idn=a.idn and"
"           a.month_since between vars.month_since - 8 and vars.month_since )"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 8 and vars.month_since );"
" update vars"
" set AMMS081_12="
" (select  MAX("
"    case"
"      when Purchase_Average_Daily_Balance <> 0 then (Cash_Average_Daily_Balance / Purchase_Average_Daily_Balance)"
"      else NULL"
"    end)"
"  from  source a"
"  where vars.idn=a.idn and"
"           a.month_since between vars.month_since - 11 and vars.month_since"
"  group by a.idn)"
" where flag in (11, 12) and exists (select *"
"  from  source"
"  where vars.idn=idn and"
"           month_since between vars.month_since - 11 and vars.month_since );"
" update vars"
" set amfs013_03_q = amfs013_03 * amfs013_03,"
"     AMFT013_21= (AMFS013_09 - AMFS013_06) - (AMFS013_12 - AMFS013_09),"
"     AMFS014_06_q = AMFS014_06 * AMFS014_06,"
"     AMFT014_31= (AMFS014_06 - AMFS014_03) - (AMFS014_12 - AMFS014_09),"
"     AMFT016_32= (AMFS016_06 - AMFS016_03) - (AMFS016_09 - AMFS016_06),"
"     amfs016_03_q = amfs016_03 * amfs016_03,"
"     AMFS023_12_q = AMFS023_12 * AMFS023_12,"
"     AMFT012_42= AMFS012_03 - AMFS012_09 + AMFS012_06,"
"     AMFT003_32= (AMFS003_06 - AMFS003_03) - (AMFS003_09 - AMFS003_06),"
"     AMFT001_41= AMFS001_03 - (AMFS001_12 - AMFS001_09),"
"     AMFT005_41= AMFS005_03 - (AMFS005_12 - AMFS005_09),"
"     AMFT022_41= AMFS022_03 - (AMFS022_12 - AMFS022_09),"
"     AMFT008_42= AMFS008_03 - (AMFS008_09 - AMFS008_06),"
"     AMMT081_21= (AMMS081_09 - AMMS081_06) - (AMMS081_12 - AMMS081_09)"
" where flag in (11, 12);"
" update vars"
" set AMFT013_21_q = AMFT013_21 * AMFT013_21,"
"     AMFT014_31_q = AMFT014_31 * AMFT014_31,"
"     AMFT022_41_q = AMFT022_41 * AMFT022_41,"
"     AMFT003_32_q = AMFT003_32 * AMFT003_32"
" where flag in (11, 12);"
" update vars"
" set amfs013_03_q_T="
"      case"
"        when amfs013_03_q > 1.125 then 1.125"
"        else amfs013_03_q"
"      end,"
"    AMFS014_06_q_T="
"      case"
"        when AMFS014_06_q > 9 then 9"
"        else AMFS014_06_q"
"      end,"
"    AMFT014_31_q_T="
"      case"
"        when AMFT014_31_q < 1.25 then 1.25"
"        else AMFT014_31_q"
"      end,"
"    AMFT016_32_T="
"      case"
"        when AMFT016_32 < 0 then 0"
"        else AMFT016_32"
"      end,"
"    AMMS036_06_T="
"      case"
"        when AMMS036_06 < -1 then -1"
"        else AMMS036_06"
"      end,"
"    AMFS023_12_q_T="
"      case"
"        when AMFS023_12_q > 68 then 100"
"        else AMFS023_12_q"
"      end,"
"    AMFT012_42_z="
"      case"
"        when AMFT012_42 = 0 then 1"
"        else 0"
"      end,"
"    AMFT003_32_q_T="
"      case"
"        when AMFT003_32_q > 6 then 6"
"        else AMFT003_32_q"
"      end,"
"    AMFT001_41_z="
"      case"
"        when AMFT001_41 = 0 then 1"
"        else 0"
"      end,"
"    AMFT005_41_z="
"      case"
"        when AMFT005_41 = 0 then 1"
"        else 0"
"      end,"
"    AMFT022_41_q_T="
"      case"
"        when AMFT022_41_q < 2 then 0.25"
"        else AMFT022_41_q"
"      end,"
"    AMFT008_42_z="
"      case"
"        when AMFT008_42 = 0 then 1"
"        else 0"
"      end,"
"    AMMT081_21_z="
"      case"
"        when AMMT081_21 = 0 then 1"
"        else 0"
"      end"
" where flag in (11, 12);"
" update vars"
" set score = 0.25753 + AMMS036_06_T * -0.18063"
"           + AMFS014_06_q_T * 0.01938"
"           + AMFT012_42_z * -0.04845"
"           + AMMT081_21_z * -0.04484"
"           + AMFT003_32_q_T * 0.05144"
"           + AMFT014_31_q_T * 0.01615"
"           + AMFS016_03_q * 0.02626"
"           + AMFT001_41_z * -0.0671"
"           + AMFS023_12_q_T * 0.00061875"
"           + AMFT016_32_T * 0.03552"
"           + AMFT005_41_z * -0.03313"
"           + AMFT022_41_q_T * 0.01453"
"           + AMFS013_03_q_T * 0.03648"
"           + AMFT013_21_q * 0.01103"
"           + AMFT008_42_z * 0.02106"
" where flag in (11, 12);",

/* Execute_Proc_Calculate_Variables_Scores */
"EXEC Calculate_Variables_Scores",

/* Drop_Proc_Calculate_Variables_Scores */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Calculate_Variables_Scores]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Calculate_Variables_Scores];",

/* Update_PD_For_Flag_12 */
" update vars"
" set pd = case"
"    when score < -0.057034608 then 0.0001"
"    when score < -0.047663603 then 0.0001"
"    when score < -0.041741703 then 0.0001"
"    when score < -0.037596317 then 0.0001"
"    when score < -0.035824264 then 0.0001"
"    when score < -0.033553188 then 0.0001"
"    when score < -0.030595447 then 0.0001"
"    when score < -0.028129256 then 0.0001"
"    when score < -0.02628125 then 0.0001"
"    when score < -0.024835967 then 0.0001"
"    when score < -0.021948689 then 0.0001"
"    when score < -0.018550831 then 0.0001"
"    when score < -0.015939097 then 0.0001"
"    when score < -0.013918483 then 0.0001"
"    when score < -0.01108814 then 0.0001"
"    when score < -0.00944862 then 0.0001"
"    when score < -0.00784303 then 0.0001"
"    when score < -0.006621971 then 0.000113576"
"    when score < -0.004904442 then 0.000135677"
"    when score < -0.003320335 then 0.000160571"
"    when score < -0.002407873 then 0.00018844"
"    when score < -0.000943402 then 0.000219468"
"    when score < 0.000752156 then 0.000253841"
"    when score < 0.002268637 then 0.00029158"
"    when score < 0.004363683 then 0.000333026"
"    when score < 0.00623 then 0.000378537"
"    when score < 0.00684875 then 0.000428152"
"    when score < 0.007603379 then 0.000482066"
"    when score < 0.00930619 then 0.000540475"
"    when score < 0.010543778 then 0.000603576"
"    when score < 0.012715281 then 0.000671272"
"    when score < 0.014779882 then 0.000744037"
"    when score < 0.016857127 then 0.000822365"
"    when score < 0.01787875 then 0.000906185"
"    when score < 0.019969511 then 0.000995701"
"    when score < 0.022350454 then 0.001091117"
"    when score < 0.024183188 then 0.001192639"
"    when score < 0.026612495 then 0.001300476"
"    when score < 0.029558269 then 0.001414346"
"    when score < 0.03212591 then 0.00153492"
"    when score < 0.033697262 then 0.001662895"
"    when score < 0.035056948 then 0.001798023"
"    when score < 0.036590419 then 0.001940515"
"    when score < 0.03918875 then 0.002090586"
"    when score < 0.04198191 then 0.00224845"
"    when score < 0.044788292 then 0.002414324"
"    when score < 0.047214732 then 0.002587687"
"    when score < 0.050249675 then 0.002769459"
"    when score < 0.052987473 then 0.002960592"
"    when score < 0.055862769 then 0.003160606"
"    when score < 0.05958082 then 0.003369719"
"    when score < 0.062643647 then 0.003588154"
"    when score < 0.06538511 then 0.003816133"
"    when score < 0.069151318 then 0.00405288"
"    when score < 0.072845213 then 0.004299577"
"    when score < 0.076289134 then 0.004557446"
"    when score < 0.079560136 then 0.004825754"
"    when score < 0.082955393 then 0.005104729"
"    when score < 0.086410845 then 0.005394597"
"    when score < 0.089405635 then 0.005695588"
"    when score < 0.092288244 then 0.006007931"
"    when score < 0.095414567 then 0.006330504"
"    when score < 0.098741537 then 0.006664844"
"    when score < 0.102729625 then 0.007012539"
"    when score < 0.105916749 then 0.00737252"
"    when score < 0.109775932 then 0.00774503"
"    when score < 0.113090299 then 0.008130314"
"    when score < 0.116740021 then 0.008528627"
"    when score < 0.120316755 then 0.008940235"
"    when score < 0.124420408 then 0.009363649"
"    when score < 0.127751303 then 0.009800884"
"    when score < 0.130653323 then 0.010254046"
"    when score < 0.133649799 then 0.010721804"
"    when score < 0.137136783 then 0.011204607"
"    when score < 0.140425735 then 0.011703004"
"    when score < 0.144412026 then 0.012217679"
"    when score < 0.148241465 then 0.012747292"
"    when score < 0.152602781 then 0.013295135"
"    when score < 0.157009176 then 0.013864957"
"    when score < 0.162645205 then 0.01445669"
"    when score < 0.16784349 then 0.015073165"
"    when score < 0.173271523 then 0.015718255"
"    when score < 0.180120723 then 0.016397282"
"    when score < 0.188527723 then 0.017117561"
"    when score < 0.195231985 then 0.017885783"
"    when score < 0.202223881 then 0.01871876"
"    when score < 0.21011642 then 0.019638641"
"    when score < 0.220316862 then 0.020668063"
"    when score < 0.233099491 then 0.021842097"
"    when score < 0.245858163 then 0.023208399"
"    when score < 0.25996386 then 0.024831525"
"    when score < 0.274743627 then 0.026798665"
"    when score < 0.29238773 then 0.02921509"
"    when score < 0.311749973 then 0.0322472"
"    when score < 0.333268507 then 0.036116939"
"    when score < 0.366398163 then 0.041095352"
"    when score < 0.409409465 then 0.047555906"
"    when score < 0.470269444 then 0.055994279"
"    when score < 0.552599989 then 0.067176549"
"    else 0.121825618"
" end"
" where flag = 12;",

/* Update_PD_For_Flag_11 */
" update vars"
" set pd = case"
"    when score < -0.024835967 then 0.00051"
"    when score < -0.003320335 then 0.000580557"
"    when score < 0.010543778 then 0.000773013"
"    when score < 0.03212591 then 0.00114939"
"    when score < 0.055862769 then 0.001773999"
"    when score < 0.089405635 then 0.002719687"
"    when score < 0.124420408 then 0.004085285"
"    when score < 0.162645205 then 0.006035933"
"    when score < 0.245858163 then 0.008884946"
"    else 0.013244816"
" end"
" where flag = 11;",

/* Update_PD_For_Flag_10 */
" update vars"
" set pd = 0.0001"
" where flag = 10;",

/* Update_Risk_Level_For_Flag_10_11_12 */
" update vars"
" set risk_level = case"
"  when pd < 0.006007931 then 'L'"
"  when pd < 0.041095352 then 'M'"
"  else 'H'"
" end"
" where flag in (10, 11, 12);",

/* Create_Proc_Generate_Profile */
" CREATE PROCEDURE Generate_Profile"
" (@target_month varchar(8))"
" AS"
" if  NOT exists (select * from dbo.sysobjects where id = object_id(N'[credit_card_monthly_profile]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"   begin"
"     CREATE TABLE [credit_card_monthly_profile] ("
"         [Statement_month] [varchar] (8) NOT NULL,"
"         [Low] [int] NULL ,"
"         [Medium] [int] NULL ,"
"         [High] [int] NULL ,"
"         [Not_Scored] [int] NULL"
"     );"
"     alter table credit_card_monthly_profile add constraint p_profile_stmtmonth primary key (statement_month);"
"   end"
" delete from credit_card_monthly_profile where statement_month = @target_month;"
" insert into credit_card_monthly_profile (statement_month) values (@target_month);"
" update credit_card_monthly_profile"
"  set low = (select count(*) from vars where risk_level= 'L'),"
"      Medium = (select count(*) from vars where risk_level= 'M'),"
"      High = (select count(*) from vars where risk_level= 'H'),"
"      Not_Scored = (select count(*) from vars where risk_level is null)"
" where statement_month = @target_month;",

/* Execute_Proc_Generate_Profile */
"EXEC Generate_Profile :v1",

/* Drop_Proc_Generate_Profile */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Generate_Profile]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Generate_Profile];",


/*  Create_Proc_Generate_Score */
" CREATE PROCEDURE Generate_Score"
"  (@target_month varchar(8))"
" AS"
" if  NOT exists (select * from dbo.sysobjects where id = object_id(N'[credit_card_monthly_pd]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)"
"   begin"
"     CREATE TABLE [credit_card_monthly_pd] ("
"         [Statement_month] [varchar] (8) NOT NULL,"
"         [Customer_id] varchar (16) NOT NULL,"
"         [pd] [float] NULL"
"     );"
"     alter table credit_card_monthly_pd add constraint p_PD_month_CustID primary key (statement_month, Customer_id);"
"   end"
" delete from credit_card_monthly_pd where statement_month = @target_month;"
" insert into credit_card_monthly_pd (statement_month, Customer_id, pd)"
"  select statement_month, idn, pd"
"  from vars;",

/* Execute_Proc_Generate_Score */
"EXEC Generate_Score :v1",

/* Drop_Proc_Generate_Score */
"if exists (select * from dbo.sysobjects where id = object_id(N'[Generate_Score]') and"
" OBJECTPROPERTY(id, N'IsProcedure') = 1)"
" drop procedure [Generate_Score];"

 };

#endif
